Version 3.2 HI-TECH Software Intermediate Code
"388 C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c
[v __npowers_ `Cd ~T0 @X0 -> 0 `x e ]
[v __powers_ `Cd ~T0 @X0 -> 0 `x e ]
[v F13 `(v ~T0 @X0 0 tf1`uc ]
"54 C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdio.h
[s S1 `*uc 1 `*F13 1 ]
[n S1 __prbuf ptr func ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.33\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.33\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
"394 C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 @X0 0 ef2`f`f ]
"392
[v __div_to_l_ `(ul ~T0 @X0 0 ef2`d`d ]
[; ;stdio.h: 8: typedef int ptrdiff_t;
[; ;stdio.h: 9: typedef unsigned size_t;
[; ;stdio.h: 10: typedef unsigned short wchar_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 23: extern int errno;
[; ;stdio.h: 54: struct __prbuf
[; ;stdio.h: 55: {
[; ;stdio.h: 56: char * ptr;
[; ;stdio.h: 57: void (* func)(char);
[; ;stdio.h: 58: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 99: extern int cprintf(char *, ...);
[; ;stdio.h: 104: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 194: extern char * gets(char *);
[; ;stdio.h: 195: extern int puts(const char *);
[; ;stdio.h: 196: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 197: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 198: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 199: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 200: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 201: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 205: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 206: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 87: extern void * malloc(size_t);
[; ;stdlib.h: 88: extern void free(void *);
[; ;stdlib.h: 89: extern void * realloc(void *, size_t);
[; ;stdlib.h: 91: extern void abort(void);
[; ;stdlib.h: 92: extern void exit(int);
[; ;stdlib.h: 93: extern int atexit(void (*)(void));
[; ;stdlib.h: 94: extern char * getenv(const char *);
[; ;stdlib.h: 95: extern char ** environ;
[; ;stdlib.h: 96: extern int system(char *);
[; ;stdlib.h: 97: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 98: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 99: extern int abs(int);
[; ;stdlib.h: 100: extern long labs(long);
[; ;stdlib.h: 103: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 104: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 109: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 110: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 112: extern char * ftoa(float f, int * status);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 42: extern char * strcat(char *, const char *);
[; ;string.h: 43: extern char * strcpy(char *, const char *);
[; ;string.h: 44: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 45: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 46: extern char * strdup(const char *);
[; ;string.h: 47: extern char * strtok(char *, const char *);
[; ;string.h: 50: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 51: extern int strcmp(const char *, const char *);
[; ;string.h: 52: extern int stricmp(const char *, const char *);
[; ;string.h: 53: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 54: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 55: extern void * memchr(const void *, int, size_t);
[; ;string.h: 56: extern size_t strcspn(const char *, const char *);
[; ;string.h: 57: extern char * strpbrk(const char *, const char *);
[; ;string.h: 58: extern size_t strspn(const char *, const char *);
[; ;string.h: 59: extern char * strstr(const char *, const char *);
[; ;string.h: 60: extern char * stristr(const char *, const char *);
[; ;string.h: 61: extern char * strerror(int);
[; ;string.h: 62: extern size_t strlen(const char *);
[; ;string.h: 63: extern char * strchr(const char *, int);
[; ;string.h: 64: extern char * strichr(const char *, int);
[; ;string.h: 65: extern char * strrchr(const char *, int);
[; ;string.h: 66: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern __bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"356
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"359
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 354: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 356: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 357: 1000000000
[; ;doprnt.c: 359: };
"362
[v _hexpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 16 `i `l `ul
-> -> -> 256 `i `l `ul
-> -> -> 4096 `i `l `ul
"364
-> -> 65536 `l `ul
-> -> 1048576 `l `ul
-> -> 16777216 `l `ul
"366
-> -> 268435456 `l `ul
..
]
[; ;doprnt.c: 362: const static unsigned long hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 364: 0x10000, 0x100000, 0x1000000, 0x10000000
[; ;doprnt.c: 366: };
[; ;doprnt.c: 388: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 392: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 394: extern unsigned long _tdiv_to_l_(float, float);
"409
[v _fround `(d ~T0 @X0 1 sf1`uc ]
"410
{
[; ;doprnt.c: 408: static double
[; ;doprnt.c: 409: fround(unsigned char prec)
[; ;doprnt.c: 410: {
[e :U _fround ]
"409
[v _prec `uc ~T0 @X0 1 r1 ]
"410
[f ]
[; ;doprnt.c: 413: if(prec>=110)
"413
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npowers_[prec%10];
"414
[e ) * * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _prec `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"415
[e :U 7 ]
[; ;doprnt.c: 415: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
"416
[e ) * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"417
[e :U 8 ]
[; ;doprnt.c: 417: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 418: }
"418
[e :UE 6 ]
}
"425
[v _scale `(d ~T0 @X0 1 sf1`c ]
"426
{
[; ;doprnt.c: 424: static double
[; ;doprnt.c: 425: scale(signed char scl)
[; ;doprnt.c: 426: {
[e :U _scale ]
"425
[v _scl `c ~T0 @X0 1 r1 ]
"426
[f ]
[; ;doprnt.c: 428: if(scl < 0) {
"428
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 429: scl = -scl;
"429
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 430: if(scl>=110)
"430
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl%10];
"431
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"432
[e :U 12 ]
[; ;doprnt.c: 432: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
"433
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"434
[e :U 13 ]
[; ;doprnt.c: 434: return _npowers_[scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"435
}
[e :U 11 ]
[; ;doprnt.c: 435: }
[; ;doprnt.c: 436: if(scl>=110)
"436
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10];
"437
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"438
[e :U 15 ]
[; ;doprnt.c: 438: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
"439
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"440
[e :U 16 ]
[; ;doprnt.c: 440: return _powers_[scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 441: }
"441
[e :UE 10 ]
}
"458
[v __doprnt `(i ~T0 @X0 1 ef3`*S1`*Cuc`**v ]
"459
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 458: _doprnt(struct __prbuf * pb, register const char * f, register va_list ap)
[; ;doprnt.c: 459: {
[e :U __doprnt ]
"458
[v _pb `*S1 ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 R2 ]
[v _ap `**v ~T0 @X0 1 R3 ]
"459
[f ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"504
[v _prec `i ~T0 @X0 1 a ]
"508
[v _flag `us ~T0 @X0 1 a ]
"515
[v _d `uc ~T0 @X0 1 a ]
"516
[v _fval `d ~T0 @X0 1 a ]
[v _integ `d ~T0 @X0 1 a ]
[v _exp `i ~T0 @X0 1 a ]
"518
[v _ival `d ~T0 @X0 1 a ]
"521
[s S19 `*Cuc 1 `ui 1 ]
[n S19 . _cp _len ]
"519
[u S18 `ul 1 `S19 1 ]
[n S18 . _val _str ]
"525
[v __val `S18 ~T0 @X0 1 a ]
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 504: int prec;
[; ;doprnt.c: 508: unsigned short flag;
[; ;doprnt.c: 515: char d;
[; ;doprnt.c: 516: double fval, integ;
[; ;doprnt.c: 517: int exp;
[; ;doprnt.c: 518: double ival;
[; ;doprnt.c: 519: union {
[; ;doprnt.c: 520: unsigned long _val;
[; ;doprnt.c: 521: struct {
[; ;doprnt.c: 522: const char * _cp;
[; ;doprnt.c: 523: unsigned _len;
[; ;doprnt.c: 524: } _str;
[; ;doprnt.c: 525: } _val;
[; ;doprnt.c: 545: while(c = *f++) {
"545
[e $U 21  ]
[e :U 22 ]
{
[; ;doprnt.c: 547: if(c != '%')
"547
[e $ ! != -> -> _c `i `ui -> 37 `ui 24  ]
[; ;doprnt.c: 549: {
"549
{
[; ;doprnt.c: 550: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"550
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 25  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 26  ]
[e :U 25 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 26 ]
[; ;doprnt.c: 551: continue;
"551
[e $U 21  ]
"552
}
[e :U 24 ]
[; ;doprnt.c: 552: }
[; ;doprnt.c: 555: width = 0;
"555
[e = _width -> 0 `i ]
[; ;doprnt.c: 557: flag = 0;
"557
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 559: for(;;) {
"559
{
[e :U 27 ]
{
[; ;doprnt.c: 560: switch(*f) {
"560
[e $U 31  ]
{
[; ;doprnt.c: 588: case '0':
"588
[e :U 32 ]
[; ;doprnt.c: 589: flag |= 0x04;
"589
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 590: f++;
"590
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 591: continue;
"591
[e $U 29  ]
"593
}
[; ;doprnt.c: 593: }
[e $U 30  ]
"560
[e :U 31 ]
[e [\ *U _f , $ -> -> 48 `ui `uc 32
 30 ]
"593
[e :U 30 ]
[; ;doprnt.c: 594: break;
"594
[e $U 28  ]
"595
}
[e :U 29 ]
[; ;doprnt.c: 595: }
[e $U 27  ]
[e :U 28 ]
}
[; ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
"606
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 33  ]
{
[; ;doprnt.c: 607: width = 0;
"607
[e = _width -> 0 `i ]
[; ;doprnt.c: 608: do {
"608
[e :U 36 ]
{
[; ;doprnt.c: 609: width *= 10;
"609
[e =* _width -> 10 `i ]
[; ;doprnt.c: 610: width += *f++ - '0';
"610
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"611
}
[; ;doprnt.c: 611: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 36  ]
[e :U 35 ]
"617
}
[e :U 33 ]
[; ;doprnt.c: 617: }
[; ;doprnt.c: 644: switch(c = *f++) {
"644
[e $U 38  ]
{
[; ;doprnt.c: 646: case 0:
"646
[e :U 39 ]
[; ;doprnt.c: 647: goto alldone;
"647
[e $U 40  ]
[; ;doprnt.c: 671: case 'f':
"671
[e :U 41 ]
[; ;doprnt.c: 672: flag |= 0x400;
"672
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 673: break;
"673
[e $U 37  ]
[; ;doprnt.c: 706: case 'd':
"706
[e :U 42 ]
"707
[e :U 43 ]
[; ;doprnt.c: 707: case 'i':
[; ;doprnt.c: 708: break;
"708
[e $U 37  ]
[; ;doprnt.c: 727: case 'x':
"727
[e :U 44 ]
[; ;doprnt.c: 730: flag |= 0x80;
"730
[e =| _flag -> -> 128 `i `us ]
[; ;doprnt.c: 732: break;
"732
[e $U 37  ]
[; ;doprnt.c: 811: default:
"811
[e :U 45 ]
[; ;doprnt.c: 822: continue;
"822
[e $U 21  ]
"831
}
[; ;doprnt.c: 831: }
[e $U 37  ]
"644
[e :U 38 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 39
 , $ -> -> 102 `ui `c 41
 , $ -> -> 100 `ui `c 42
 , $ -> -> 105 `ui `c 43
 , $ -> -> 120 `ui `c 44
 45 ]
"831
[e :U 37 ]
[; ;doprnt.c: 834: if(flag & (0x700)) {
"834
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 46  ]
{
[; ;doprnt.c: 838: prec = 6;
"838
[e = _prec -> 6 `i ]
[; ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"839
[e = _fval *U -> ( ___va_arg , (. -> *U -> _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 840: if(fval < 0.0) {
"840
[e $ ! < _fval .0.0 47  ]
{
[; ;doprnt.c: 841: fval = -fval;
"841
[e = _fval -U _fval ]
[; ;doprnt.c: 842: flag |= 0x03;
"842
[e =| _flag -> -> 3 `i `us ]
"843
}
[e :U 47 ]
[; ;doprnt.c: 843: }
[; ;doprnt.c: 844: exp = 0;
"844
[e = _exp -> 0 `i ]
[; ;doprnt.c: 845: if( fval!=0) {
"845
[e $ ! != _fval -> -> 0 `i `d 48  ]
{
[; ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
"846
[e = *U &U _exp -> - & >> *U -> &U _fval `*ul -> 15 `i -> -> -> 255 `i `l `ul -> -> -> 126 `i `l `ul `i ]
[; ;doprnt.c: 847: exp--;
"847
[e -- _exp -> 1 `i ]
[; ;doprnt.c: 848: exp *= 3;
"848
[e =* _exp -> 3 `i ]
[; ;doprnt.c: 849: exp /= 10;
"849
[e =/ _exp -> -> 10 `uc `i ]
[; ;doprnt.c: 850: if(exp < 0)
"850
[e $ ! < _exp -> 0 `i 49  ]
[; ;doprnt.c: 851: exp--;
"851
[e -- _exp -> 1 `i ]
[e :U 49 ]
[; ;doprnt.c: 855: integ = scale(-exp);
"855
[e = _integ ( _scale (1 -> -U _exp `c ]
[; ;doprnt.c: 856: integ *= fval;
"856
[e =* _integ _fval ]
[; ;doprnt.c: 857: if(integ < 1.0)
"857
[e $ ! < _integ .1.0 50  ]
[; ;doprnt.c: 858: exp--;
"858
[e -- _exp -> 1 `i ]
[e $U 51  ]
"859
[e :U 50 ]
[; ;doprnt.c: 859: else if(integ >= 10.0)
[e $ ! >= _integ .10.0 52  ]
[; ;doprnt.c: 860: exp++;
"860
[e ++ _exp -> 1 `i ]
[e :U 52 ]
"861
[e :U 51 ]
}
[e :U 48 ]
[; ;doprnt.c: 861: }
[; ;doprnt.c: 1121: if(prec <= 12)
"1121
[e $ ! <= _prec -> 12 `i 53  ]
[; ;doprnt.c: 1122: fval += fround(prec);
"1122
[e =+ _fval ( _fround (1 -> _prec `uc ]
[e :U 53 ]
[; ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
"1125
[e $ ! || > _exp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _exp -> 1 `i 54  ]
{
[; ;doprnt.c: 1129: if(integ < 4.294967296){
"1129
[e $ ! < _integ .4.294967296 55  ]
{
[; ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1130
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1131
}
[; ;doprnt.c: 1131: }else{
[e $U 56  ]
[e :U 55 ]
{
[; ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1132
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1133
}
[e :U 56 ]
[; ;doprnt.c: 1133: }
[; ;doprnt.c: 1134: integ = scale(exp);
"1134
[e = _integ ( _scale (1 -> _exp `c ]
[; ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l_(fval,integ));
"1135
[e = . __val 0 ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> _integ `f ( __div_to_l_ (2 , _fval _integ ]
[; ;doprnt.c: 1138: fval = 0.0;
"1138
[e = _fval .0.0 ]
"1139
}
[; ;doprnt.c: 1139: } else {
[e $U 57  ]
[e :U 54 ]
{
[; ;doprnt.c: 1140: _val._val = (unsigned long)fval;
"1140
[e = . __val 0 -> _fval `ul ]
[; ;doprnt.c: 1141: fval -= (double)_val._val;
"1141
[e =- _fval -> . __val 0 `d ]
[; ;doprnt.c: 1142: exp = 0;
"1142
[e = _exp -> 0 `i ]
"1143
}
[e :U 57 ]
[; ;doprnt.c: 1143: }
[; ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1145
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 58  ]
[e $U 59  ]
"1146
[e :U 58 ]
[; ;doprnt.c: 1146: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 61  ]
[; ;doprnt.c: 1147: break;
"1147
[e $U 59  ]
[e :U 61 ]
"1145
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 58  ]
[e :U 59 ]
"1151
}
[; ;doprnt.c: 1151: width -= prec + c + exp;
[e =- _width + + _prec -> _c `i _exp ]
[; ;doprnt.c: 1152: if(
[; ;doprnt.c: 1156: prec)
"1156
[e $ ! != _prec -> 0 `i 62  ]
[; ;doprnt.c: 1157: width--;
"1157
[e -- _width -> 1 `i ]
[e :U 62 ]
[; ;doprnt.c: 1158: if(flag & 0x03)
"1158
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 63  ]
[; ;doprnt.c: 1159: width--;
"1159
[e -- _width -> 1 `i ]
[e :U 63 ]
[; ;doprnt.c: 1162: if(flag & 0x04) {
"1162
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 64  ]
{
[; ;doprnt.c: 1166: if(flag & 0x03)
"1166
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 65  ]
[; ;doprnt.c: 1168: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1168
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 66  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 67  ]
[e :U 66 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 67 ]
[e :U 65 ]
[; ;doprnt.c: 1177: while(width > 0) {
"1177
[e $U 68  ]
[e :U 69 ]
{
[; ;doprnt.c: 1178: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1178
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 71  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 72  ]
[e :U 71 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 72 ]
[; ;doprnt.c: 1179: width--;
"1179
[e -- _width -> 1 `i ]
"1180
}
[e :U 68 ]
"1177
[e $ > _width -> 0 `i 69  ]
[e :U 70 ]
"1182
}
[; ;doprnt.c: 1180: }
[; ;doprnt.c: 1182: } else
[e $U 73  ]
[e :U 64 ]
[; ;doprnt.c: 1184: {
"1184
{
[; ;doprnt.c: 1189: while(width > 0) {
"1189
[e $U 74  ]
[e :U 75 ]
{
[; ;doprnt.c: 1190: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1190
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 77  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 78  ]
[e :U 77 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 78 ]
[; ;doprnt.c: 1191: width--;
"1191
[e -- _width -> 1 `i ]
"1192
}
[e :U 74 ]
"1189
[e $ > _width -> 0 `i 75  ]
[e :U 76 ]
[; ;doprnt.c: 1192: }
[; ;doprnt.c: 1197: if(flag & 0x03)
"1197
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 79  ]
[; ;doprnt.c: 1199: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1199
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 80  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 81  ]
[e :U 80 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 81 ]
[e :U 79 ]
"1204
}
[e :U 73 ]
[; ;doprnt.c: 1204: }
[; ;doprnt.c: 1205: while(c--) {
"1205
[e $U 82  ]
[e :U 83 ]
{
[; ;doprnt.c: 1209: {
"1209
{
"1210
[v _vd `ul ~T0 @X0 1 a ]
[; ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
[e = _vd / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1211: vd %= 10;
"1211
[e =% _vd -> -> 10 `uc `ul ]
[; ;doprnt.c: 1212: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
"1212
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 85  ]
[e ( *U . *U _pb 1 (1 -> + -> -> 48 `ui `ul _vd `uc ]
[e $U 86  ]
[e :U 85 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> -> 48 `ui `ul _vd `uc ]
[e :U 86 ]
"1213
}
"1215
}
[e :U 82 ]
"1205
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 83  ]
[e :U 84 ]
[; ;doprnt.c: 1213: }
[; ;doprnt.c: 1215: }
[; ;doprnt.c: 1216: while(exp > 0) {
"1216
[e $U 87  ]
[e :U 88 ]
{
[; ;doprnt.c: 1217: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1217
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 90  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 91  ]
[e :U 90 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 91 ]
[; ;doprnt.c: 1218: exp--;
"1218
[e -- _exp -> 1 `i ]
"1219
}
[e :U 87 ]
"1216
[e $ > _exp -> 0 `i 88  ]
[e :U 89 ]
[; ;doprnt.c: 1219: }
[; ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1220
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 92  ]
[; ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1221
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `c ]
[e $U 93  ]
"1222
[e :U 92 ]
[; ;doprnt.c: 1222: else
[; ;doprnt.c: 1223: c = prec;
"1223
[e = _c -> _prec `c ]
[e :U 93 ]
[; ;doprnt.c: 1224: prec -= c;
"1224
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1228: if(c)
"1228
[e $ ! != -> _c `i -> -> -> 0 `i `c `i 94  ]
[; ;doprnt.c: 1230: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
"1230
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 95  ]
[e ( *U . *U _pb 1 (1 -> -> 46 `ui `uc ]
[e $U 96  ]
[e :U 95 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 46 `ui `uc ]
[e :U 96 ]
[e :U 94 ]
[; ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
"1236
[e = . __val 0 -> -> * _fval ( _scale (1 _c `l `ul ]
[; ;doprnt.c: 1237: while(c--) {
"1237
[e $U 97  ]
[e :U 98 ]
{
"1238
[v _vd `ul ~T0 @X0 1 a ]
[; ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
[e = _vd / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1239: vd %= 10;
"1239
[e =% _vd -> -> 10 `uc `ul ]
[; ;doprnt.c: 1240: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
"1240
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 100  ]
[e ( *U . *U _pb 1 (1 -> + -> -> 48 `ui `ul _vd `uc ]
[e $U 101  ]
[e :U 100 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> -> 48 `ui `ul _vd `uc ]
[e :U 101 ]
[; ;doprnt.c: 1241: _val._val %= dpowers[c];
"1241
[e =% . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
"1242
}
[e :U 97 ]
"1237
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 98  ]
[e :U 99 ]
[; ;doprnt.c: 1242: }
[; ;doprnt.c: 1244: while(prec) {
"1244
[e $U 102  ]
[e :U 103 ]
{
[; ;doprnt.c: 1245: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1245
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 105  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 106  ]
[e :U 105 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 106 ]
[; ;doprnt.c: 1246: prec--;
"1246
[e -- _prec -> 1 `i ]
"1247
}
[e :U 102 ]
"1244
[e $ != _prec -> 0 `i 103  ]
[e :U 104 ]
[; ;doprnt.c: 1247: }
[; ;doprnt.c: 1254: continue;
"1254
[e $U 21  ]
"1255
}
[e :U 46 ]
[; ;doprnt.c: 1255: }
[; ;doprnt.c: 1260: if((flag & 0x80) == 0x00)
"1260
[e $ ! == & -> _flag `ui -> -> 128 `i `ui -> -> 0 `i `ui 107  ]
[; ;doprnt.c: 1262: {
"1262
{
[; ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
"1268
[e = . __val 0 -> -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `l `ul ]
[; ;doprnt.c: 1270: if((long)_val._val < 0) {
"1270
[e $ ! < -> . __val 0 `l -> -> 0 `i `l 108  ]
{
[; ;doprnt.c: 1271: flag |= 0x03;
"1271
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1272: _val._val = -_val._val;
"1272
[e = . __val 0 -U . __val 0 ]
"1273
}
[e :U 108 ]
"1275
}
[; ;doprnt.c: 1273: }
[; ;doprnt.c: 1275: }
[e $U 109  ]
"1277
[e :U 107 ]
[; ;doprnt.c: 1277: else
[; ;doprnt.c: 1282: {
"1282
{
[; ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1295
[e = . __val 0 -> *U -> ( ___va_arg , (. -> *U -> _ap `**ui `*v -> -> 0 `i `ui `*ui `ul ]
"1296
}
[e :U 109 ]
[; ;doprnt.c: 1296: }
[; ;doprnt.c: 1303: switch((unsigned char)(flag & 0x80)) {
"1303
[e $U 111  ]
{
[; ;doprnt.c: 1308: case 0x00:
"1308
[e :U 112 ]
[; ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1314
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 113  ]
[e $U 114  ]
"1315
[e :U 113 ]
[; ;doprnt.c: 1315: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 116  ]
[; ;doprnt.c: 1316: break;
"1316
[e $U 114  ]
[e :U 116 ]
"1314
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 113  ]
[e :U 114 ]
"1318
}
[; ;doprnt.c: 1318: break;
[e $U 110  ]
[; ;doprnt.c: 1323: case 0x80:
"1323
[e :U 117 ]
[; ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1325
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 118  ]
[e $U 119  ]
"1326
[e :U 118 ]
[; ;doprnt.c: 1326: if(_val._val < hexpowers[c])
[e $ ! < . __val 0 *U + &U _hexpowers * -> -> _c `uc `ux -> -> # *U &U _hexpowers `ui `ux 121  ]
[; ;doprnt.c: 1327: break;
"1327
[e $U 119  ]
[e :U 121 ]
"1325
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 118  ]
[e :U 119 ]
"1329
}
[; ;doprnt.c: 1329: break;
[e $U 110  ]
"1345
}
[; ;doprnt.c: 1345: }
[e $U 110  ]
"1303
[e :U 111 ]
[e [\ -> & -> _flag `ui -> -> 128 `i `ui `uc , $ -> -> 0 `i `uc 112
 , $ -> -> 128 `i `uc 117
 110 ]
"1345
[e :U 110 ]
[; ;doprnt.c: 1354: if(width && flag & 0x03)
"1354
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 122  ]
[; ;doprnt.c: 1355: width--;
"1355
[e -- _width -> 1 `i ]
[e :U 122 ]
[; ;doprnt.c: 1390: if(width > c)
"1390
[e $ ! > _width -> _c `i 123  ]
[; ;doprnt.c: 1391: width -= c;
"1391
[e =- _width -> _c `i ]
[e $U 124  ]
"1392
[e :U 123 ]
[; ;doprnt.c: 1392: else
[; ;doprnt.c: 1393: width = 0;
"1393
[e = _width -> 0 `i ]
[e :U 124 ]
[; ;doprnt.c: 1396: if(flag & 0x04) {
"1396
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 125  ]
{
[; ;doprnt.c: 1401: if(flag & 0x03)
"1401
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 126  ]
[; ;doprnt.c: 1402: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1402
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 127  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 128  ]
[e :U 127 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 128 ]
[e :U 126 ]
[; ;doprnt.c: 1424: if(width)
"1424
[e $ ! != _width -> 0 `i 129  ]
[; ;doprnt.c: 1425: do
"1425
[e :U 132 ]
[; ;doprnt.c: 1426: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1426
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 133  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 134  ]
[e :U 133 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 134 ]
[; ;doprnt.c: 1427: while(--width);
"1427
[e $ != =- _width -> 1 `i -> 0 `i 132  ]
[e :U 131 ]
[e :U 129 ]
"1429
}
[; ;doprnt.c: 1429: } else
[e $U 135  ]
[e :U 125 ]
[; ;doprnt.c: 1431: {
"1431
{
[; ;doprnt.c: 1433: if(width
[; ;doprnt.c: 1437: )
"1437
[e $ ! != _width -> 0 `i 136  ]
[; ;doprnt.c: 1438: do
"1438
[e :U 139 ]
[; ;doprnt.c: 1439: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1439
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 140  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 141  ]
[e :U 140 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 141 ]
[; ;doprnt.c: 1440: while(--width);
"1440
[e $ != =- _width -> 1 `i -> 0 `i 139  ]
[e :U 138 ]
[e :U 136 ]
[; ;doprnt.c: 1447: if(flag & 0x03)
"1447
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 142  ]
[; ;doprnt.c: 1448: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1448
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 143  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 144  ]
[e :U 143 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 144 ]
[e :U 142 ]
"1478
}
[e :U 135 ]
[; ;doprnt.c: 1478: }
[; ;doprnt.c: 1481: prec = c;
"1481
[e = _prec -> _c `i ]
[; ;doprnt.c: 1483: while(prec--) {
"1483
[e $U 145  ]
[e :U 146 ]
{
[; ;doprnt.c: 1485: switch((unsigned char)(flag & 0x80))
"1485
[e $U 149  ]
[; ;doprnt.c: 1487: {
"1487
{
[; ;doprnt.c: 1492: case 0x00:
"1492
[e :U 150 ]
[; ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
"1498
[e = _c -> + % / . __val 0 *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `c ]
[; ;doprnt.c: 1500: break;
"1500
[e $U 148  ]
[; ;doprnt.c: 1506: case 0x80:
"1506
[e :U 151 ]
[; ;doprnt.c: 1508: {
"1508
{
"1509
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
[e = _idx -> & / . __val 0 *U + &U _hexpowers * -> -> _prec `ui `ux -> -> # *U &U _hexpowers `ui `ux -> -> -> 15 `i `l `ul `uc ]
[; ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
"1515
[e = _c -> *U + :s 1C * -> _idx `ux -> -> # *U :s 1C `ui `ux `c ]
"1517
}
[; ;doprnt.c: 1517: }
[; ;doprnt.c: 1519: break;
"1519
[e $U 148  ]
"1532
}
[; ;doprnt.c: 1532: }
[e $U 148  ]
"1485
[e :U 149 ]
[e [\ -> & -> _flag `ui -> -> 128 `i `ui `uc , $ -> -> 0 `i `uc 150
 , $ -> -> 128 `i `uc 151
 148 ]
"1532
[e :U 148 ]
[; ;doprnt.c: 1533: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"1533
[e $ ! != . *U _pb 1 -> -> 0 `i `*F13 152  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 153  ]
[e :U 152 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 153 ]
"1534
}
[e :U 145 ]
"1483
[e $ != -- _prec -> 1 `i -> 0 `i 146  ]
[e :U 147 ]
"1542
}
[e :U 21 ]
"545
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 22  ]
[e :U 23 ]
[; ;doprnt.c: 1534: }
[; ;doprnt.c: 1542: }
[; ;doprnt.c: 1544: alldone:
"1544
[e :U 40 ]
[; ;doprnt.c: 1549: return 0;
"1549
[e ) -> 0 `i ]
[e $UE 20  ]
[; ;doprnt.c: 1550: }
"1550
[e :UE 20 ]
}
[a 1C 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 0 ]

