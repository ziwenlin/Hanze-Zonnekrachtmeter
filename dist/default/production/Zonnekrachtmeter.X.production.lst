

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jun 07 10:59:22 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  002FB2                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _dow
    78  002FB2  01                 	db	1
    79                           
    80                           	psect	idataBANK0
    81  002FA2                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _year1
    85  002FA2  07D0               	dw	2000
    86                           
    87                           ;initializer for _start
    88  002FA4  01                 	db	1
    89                           
    90                           ;initializer for _tempAddress
    91  002FA5  28                 	db	40
    92  002FA6  53                 	db	83
    93  002FA7  44                 	db	68
    94  002FA8  A3                 	db	163
    95  002FA9  08                 	db	8
    96  002FAA  00                 	db	0
    97  002FAB  00                 	db	0
    98  002FAC  9B                 	db	155
    99                           
   100                           ;initializer for _day
   101  002FAD  01                 	db	1
   102                           
   103                           ;initializer for _month
   104  002FAE  01                 	db	1
   105                           
   106                           ;initializer for _year
   107  002FAF  14                 	db	20
   108                           
   109                           	psect	mediumconst
   110  007EDC                     __pmediumconst:
   111                           	opt stack 0
   112  007EDC  00                 	db	0
   113  007EDD                     _dpowers:
   114                           	opt stack 0
   115  007EDD  0001               	dw	1
   116  007EDF  0000               	dw	0
   117  007EE1  000A               	dw	10
   118  007EE3  0000               	dw	0
   119  007EE5  0064               	dw	100
   120  007EE7  0000               	dw	0
   121  007EE9  03E8               	dw	1000
   122  007EEB  0000               	dw	0
   123  007EED  2710               	dw	10000
   124  007EEF  0000               	dw	0
   125  007EF1  86A0               	dw	34464
   126  007EF3  0001               	dw	1
   127  007EF5  4240               	dw	16960
   128  007EF7  000F               	dw	15
   129  007EF9  9680               	dw	38528
   130  007EFB  0098               	dw	152
   131  007EFD  E100               	dw	57600
   132  007EFF  05F5               	dw	1525
   133  007F01  CA00               	dw	51712
   134  007F03  3B9A               	dw	15258
   135  007F05                     __end_of_dpowers:
   136                           	opt stack 0
   137  007F05                     __npowers_:
   138                           	opt stack 0
   139  007F05  00                 	db	0
   140  007F06  80                 	db	128
   141  007F07  3F                 	db	63
   142  007F08  CD                 	db	205
   143  007F09  CC                 	db	204
   144  007F0A  3D                 	db	61
   145  007F0B  D7                 	db	215
   146  007F0C  23                 	db	35
   147  007F0D  3C                 	db	60
   148  007F0E  12                 	db	18
   149  007F0F  83                 	db	131
   150  007F10  3A                 	db	58
   151  007F11  B7                 	db	183
   152  007F12  D1                 	db	209
   153  007F13  38                 	db	56
   154  007F14  C6                 	db	198
   155  007F15  27                 	db	39
   156  007F16  37                 	db	55
   157  007F17  38                 	db	56
   158  007F18  86                 	db	134
   159  007F19  35                 	db	53
   160  007F1A  C0                 	db	192
   161  007F1B  D6                 	db	214
   162  007F1C  33                 	db	51
   163  007F1D  CC                 	db	204
   164  007F1E  2B                 	db	43
   165  007F1F  32                 	db	50
   166  007F20  70                 	db	112
   167  007F21  89                 	db	137
   168  007F22  30                 	db	48
   169  007F23  E7                 	db	231
   170  007F24  DB                 	db	219
   171  007F25  2E                 	db	46
   172  007F26  E5                 	db	229
   173  007F27  3C                 	db	60
   174  007F28  1E                 	db	30
   175  007F29  42                 	db	66
   176  007F2A  A2                 	db	162
   177  007F2B  0D                 	db	13
   178  007F2C                     __end_of__npowers_:
   179                           	opt stack 0
   180  007F2C                     __powers_:
   181                           	opt stack 0
   182  007F2C  00                 	db	0
   183  007F2D  80                 	db	128
   184  007F2E  3F                 	db	63
   185  007F2F  00                 	db	0
   186  007F30  20                 	db	32
   187  007F31  41                 	db	65
   188  007F32  00                 	db	0
   189  007F33  C8                 	db	200
   190  007F34  42                 	db	66
   191  007F35  00                 	db	0
   192  007F36  7A                 	db	122
   193  007F37  44                 	db	68
   194  007F38  40                 	db	64
   195  007F39  1C                 	db	28
   196  007F3A  46                 	db	70
   197  007F3B  50                 	db	80
   198  007F3C  C3                 	db	195
   199  007F3D  47                 	db	71
   200  007F3E  24                 	db	36
   201  007F3F  74                 	db	116
   202  007F40  49                 	db	73
   203  007F41  97                 	db	151
   204  007F42  18                 	db	24
   205  007F43  4B                 	db	75
   206  007F44  BC                 	db	188
   207  007F45  BE                 	db	190
   208  007F46  4C                 	db	76
   209  007F47  6B                 	db	107
   210  007F48  6E                 	db	110
   211  007F49  4E                 	db	78
   212  007F4A  03                 	db	3
   213  007F4B  15                 	db	21
   214  007F4C  50                 	db	80
   215  007F4D  79                 	db	121
   216  007F4E  AD                 	db	173
   217  007F4F  60                 	db	96
   218  007F50  F3                 	db	243
   219  007F51  49                 	db	73
   220  007F52  71                 	db	113
   221  007F53                     __end_of__powers_:
   222                           	opt stack 0
   223  007F53                     _hexpowers:
   224                           	opt stack 0
   225  007F53  0001               	dw	1
   226  007F55  0000               	dw	0
   227  007F57  0010               	dw	16
   228  007F59  0000               	dw	0
   229  007F5B  0100               	dw	256
   230  007F5D  0000               	dw	0
   231  007F5F  1000               	dw	4096
   232  007F61  0000               	dw	0
   233  007F63  0000               	dw	0
   234  007F65  0001               	dw	1
   235  007F67  0000               	dw	0
   236  007F69  0010               	dw	16
   237  007F6B  0000               	dw	0
   238  007F6D  0100               	dw	256
   239  007F6F  0000               	dw	0
   240  007F71  1000               	dw	4096
   241  007F73                     __end_of_hexpowers:
   242                           	opt stack 0
   243  0000                     _ADCON0	set	4034
   244  0000                     _ADCON0bits	set	4034
   245  0000                     _ADCON1	set	4033
   246  0000                     _ADCON2	set	4032
   247  0000                     _ADRESH	set	4036
   248  0000                     _ADRESL	set	4035
   249  0000                     _ANCON0bits	set	3933
   250  0000                     _BAUDCON1	set	4007
   251  0000                     _BAUDCON2	set	4025
   252  0000                     _INTCON2bits	set	4081
   253  0000                     _INTCONbits	set	4082
   254  0000                     _IPR1bits	set	3999
   255  0000                     _PIE1bits	set	3997
   256  0000                     _PIE2bits	set	4000
   257  0000                     _PIE3bits	set	4003
   258  0000                     _PIR1bits	set	3998
   259  0000                     _PIR2bits	set	4001
   260  0000                     _PIR3bits	set	4004
   261  0000                     _PORTAbits	set	3968
   262  0000                     _RCONbits	set	4048
   263  0000                     _RCREG1	set	4014
   264  0000                     _RCREG2	set	3962
   265  0000                     _RCSTA1	set	4011
   266  0000                     _RCSTA2	set	4006
   267  0000                     _SPBRG1	set	4015
   268  0000                     _SPBRG2	set	3963
   269  0000                     _SSPADD	set	4040
   270  0000                     _SSPBUF	set	4041
   271  0000                     _SSPCON1bits	set	4038
   272  0000                     _SSPCON2	set	4037
   273  0000                     _SSPCON2bits	set	4037
   274  0000                     _SSPSTAT	set	4039
   275  0000                     _SSPSTATbits	set	4039
   276  0000                     _T0CONbits	set	4053
   277  0000                     _TMR0H	set	4055
   278  0000                     _TMR0L	set	4054
   279  0000                     _TRISAbits	set	3986
   280  0000                     _TRISBbits	set	3987
   281  0000                     _TRISCbits	set	3988
   282  0000                     _TXREG1	set	4013
   283  0000                     _TXREG2	set	3961
   284  0000                     _TXSTA1	set	4012
   285  0000                     _TXSTA1bits	set	4012
   286  0000                     _TXSTA2	set	4026
   287  0000                     _TXSTA2bits	set	4026
   288  007F73                     __stringdata:
   289                           	opt stack 0
   290  007F73                     STR_1:
   291  007F73  25                 	db	37
   292  007F74  30                 	db	48	;'0'
   293  007F75  34                 	db	52	;'4'
   294  007F76  64                 	db	100	;'d'
   295  007F77  2F                 	db	47
   296  007F78  25                 	db	37
   297  007F79  30                 	db	48	;'0'
   298  007F7A  32                 	db	50	;'2'
   299  007F7B  64                 	db	100	;'d'
   300  007F7C  2F                 	db	47
   301  007F7D  25                 	db	37
   302  007F7E  30                 	db	48	;'0'
   303  007F7F  32                 	db	50	;'2'
   304  007F80  64                 	db	100	;'d'
   305  007F81  2D                 	db	45
   306  007F82  25                 	db	37
   307  007F83  30                 	db	48	;'0'
   308  007F84  32                 	db	50	;'2'
   309  007F85  64                 	db	100	;'d'
   310  007F86  3A                 	db	58	;':'
   311  007F87  25                 	db	37
   312  007F88  30                 	db	48	;'0'
   313  007F89  32                 	db	50	;'2'
   314  007F8A  64                 	db	100	;'d'
   315  007F8B  3A                 	db	58	;':'
   316  007F8C  25                 	db	37
   317  007F8D  30                 	db	48	;'0'
   318  007F8E  32                 	db	50	;'2'
   319  007F8F  64                 	db	100	;'d'
   320  007F90  20                 	db	32
   321  007F91  20                 	db	32
   322  007F92  20                 	db	32
   323  007F93  54                 	db	84	;'T'
   324  007F94  65                 	db	101	;'e'
   325  007F95  6D                 	db	109	;'m'
   326  007F96  70                 	db	112	;'p'
   327  007F97  65                 	db	101	;'e'
   328  007F98  72                 	db	114	;'r'
   329  007F99  61                 	db	97	;'a'
   330  007F9A  74                 	db	116	;'t'
   331  007F9B  75                 	db	117	;'u'
   332  007F9C  75                 	db	117	;'u'
   333  007F9D  72                 	db	114	;'r'
   334  007F9E  3A                 	db	58	;':'
   335  007F9F  20                 	db	32
   336  007FA0  25                 	db	37
   337  007FA1  66                 	db	102	;'f'
   338  007FA2  20                 	db	32
   339  007FA3  43                 	db	67	;'C'
   340  007FA4  20                 	db	32
   341  007FA5  20                 	db	32
   342  007FA6  20                 	db	32
   343  007FA7  56                 	db	86	;'V'
   344  007FA8  6F                 	db	111	;'o'
   345  007FA9  6C                 	db	108	;'l'
   346  007FAA  74                 	db	116	;'t'
   347  007FAB  61                 	db	97	;'a'
   348  007FAC  67                 	db	103	;'g'
   349  007FAD  65                 	db	101	;'e'
   350  007FAE  3A                 	db	58	;':'
   351  007FAF  20                 	db	32
   352  007FB0  25                 	db	37
   353  007FB1  66                 	db	102	;'f'
   354  007FB2  20                 	db	32
   355  007FB3  56                 	db	86	;'V'
   356  007FB4  0A                 	db	10
   357  007FB5  00                 	db	0
   358  007FB6                     STR_2:
   359  007FB6  25                 	db	37
   360  007FB7  30                 	db	48	;'0'
   361  007FB8  34                 	db	52	;'4'
   362  007FB9  64                 	db	100	;'d'
   363  007FBA  2C                 	db	44
   364  007FBB  25                 	db	37
   365  007FBC  30                 	db	48	;'0'
   366  007FBD  32                 	db	50	;'2'
   367  007FBE  64                 	db	100	;'d'
   368  007FBF  2C                 	db	44
   369  007FC0  25                 	db	37
   370  007FC1  30                 	db	48	;'0'
   371  007FC2  32                 	db	50	;'2'
   372  007FC3  64                 	db	100	;'d'
   373  007FC4  2C                 	db	44
   374  007FC5  25                 	db	37
   375  007FC6  30                 	db	48	;'0'
   376  007FC7  32                 	db	50	;'2'
   377  007FC8  64                 	db	100	;'d'
   378  007FC9  2C                 	db	44
   379  007FCA  25                 	db	37
   380  007FCB  30                 	db	48	;'0'
   381  007FCC  32                 	db	50	;'2'
   382  007FCD  64                 	db	100	;'d'
   383  007FCE  2C                 	db	44
   384  007FCF  25                 	db	37
   385  007FD0  30                 	db	48	;'0'
   386  007FD1  32                 	db	50	;'2'
   387  007FD2  64                 	db	100	;'d'
   388  007FD3  2C                 	db	44
   389  007FD4  25                 	db	37
   390  007FD5  66                 	db	102	;'f'
   391  007FD6  2C                 	db	44
   392  007FD7  25                 	db	37
   393  007FD8  66                 	db	102	;'f'
   394  007FD9  0A                 	db	10
   395  007FDA  00                 	db	0
   396  007FDB                     STR_5:
   397  007FDB  30                 	db	48	;'0'
   398  007FDC  31                 	db	49	;'1'
   399  007FDD  32                 	db	50	;'2'
   400  007FDE  33                 	db	51	;'3'
   401  007FDF  34                 	db	52	;'4'
   402  007FE0  35                 	db	53	;'5'
   403  007FE1  36                 	db	54	;'6'
   404  007FE2  37                 	db	55	;'7'
   405  007FE3  38                 	db	56	;'8'
   406  007FE4  39                 	db	57	;'9'
   407  007FE5  61                 	db	97	;'a'
   408  007FE6  62                 	db	98	;'b'
   409  007FE7  63                 	db	99	;'c'
   410  007FE8  64                 	db	100	;'d'
   411  007FE9  65                 	db	101	;'e'
   412  007FEA  66                 	db	102	;'f'
   413  007FEB  00                 	db	0
   414  007FEC  63                 	db	99	;'c'
   415  007FED  72                 	db	114	;'r'
   416  007FEE  63                 	db	99	;'c'
   417  007FEF  20                 	db	32
   418  007FF0  3D                 	db	61	;'='
   419  007FF1  20                 	db	32
   420  007FF2  25                 	db	37
   421  007FF3  78                 	db	120	;'x'
   422  007FF4  20                 	db	32
   423  007FF5  0D                 	db	13
   424  007FF6  0A                 	db	10
   425  007FF7  00                 	db	0
   426  007FF8  30                 	db	48	;'0'
   427  007FF9  78                 	db	120	;'x'
   428  007FFA  25                 	db	37
   429  007FFB  78                 	db	120	;'x'
   430  007FFC  2C                 	db	44
   431  007FFD  00                 	db	0
   432  007FFE                     __end_of__stringdata:
   433                           	opt stack 0
   434                           
   435                           ; #config settings
   436  007FFE  00                 	db	0	; dummy byte at the end
   437  0000                     
   438                           	psect	nvBANK0
   439  0000DD                     __pnvBANK0:
   440                           	opt stack 0
   441  0000DD                     _message:
   442                           	opt stack 0
   443  0000DD                     	ds	2
   444                           
   445                           	psect	cinit
   446  002AC0                     __pcinit:
   447                           	opt stack 0
   448  002AC0                     start_initialization:
   449                           	opt stack 0
   450  002AC0                     __initialization:
   451                           	opt stack 0
   452                           
   453                           ; Clear objects allocated to BANK1 (80 bytes)
   454  002AC0  EE01  F000         	lfsr	0,__pbssBANK1
   455  002AC4  0E50               	movlw	80
   456  002AC6                     clear_0:
   457  002AC6  6AEE               	clrf	postinc0,c
   458  002AC8  06E8               	decf	wreg,f,c
   459  002ACA  E1FD               	bnz	clear_0
   460                           
   461                           ; Clear objects allocated to BANK0 (29 bytes)
   462  002ACC  EE00  F0B2         	lfsr	0,__pbssBANK0
   463  002AD0  0E1D               	movlw	29
   464  002AD2                     clear_1:
   465  002AD2  6AEE               	clrf	postinc0,c
   466  002AD4  06E8               	decf	wreg,f,c
   467  002AD6  E1FD               	bnz	clear_1
   468                           
   469                           ; Clear objects allocated to COMRAM (8 bytes)
   470  002AD8  EE00  F049         	lfsr	0,__pbssCOMRAM
   471  002ADC  0E08               	movlw	8
   472  002ADE                     clear_2:
   473  002ADE  6AEE               	clrf	postinc0,c
   474  002AE0  06E8               	decf	wreg,f,c
   475  002AE2  E1FD               	bnz	clear_2
   476                           
   477                           ; Initialize objects allocated to BANK0 (14 bytes)
   478                           ; load TBLPTR registers with __pidataBANK0
   479  002AE4  0EA2               	movlw	low __pidataBANK0
   480  002AE6  6EF6               	movwf	tblptrl,c
   481  002AE8  0E2F               	movlw	high __pidataBANK0
   482  002AEA  6EF7               	movwf	tblptrh,c
   483  002AEC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   484  002AEE  6EF8               	movwf	tblptru,c
   485  002AF0  EE00  F0CF         	lfsr	0,__pdataBANK0
   486  002AF4  EE10 F00E          	lfsr	1,14
   487  002AF8                     copy_data0:
   488  002AF8  0009               	tblrd		*+
   489  002AFA  CFF5 FFEE          	movff	tablat,postinc0
   490  002AFE  50E5               	movf	postdec1,w,c
   491  002B00  50E1               	movf	fsr1l,w,c
   492  002B02  E1FA               	bnz	copy_data0
   493                           
   494                           ; Initialize objects allocated to COMRAM (1 bytes)
   495                           ; load TBLPTR registers with __pidataCOMRAM
   496  002B04  0EB2               	movlw	low __pidataCOMRAM
   497  002B06  6EF6               	movwf	tblptrl,c
   498  002B08  0E2F               	movlw	high __pidataCOMRAM
   499  002B0A  6EF7               	movwf	tblptrh,c
   500  002B0C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   501  002B0E  6EF8               	movwf	tblptru,c
   502  002B10  0009               	tblrd		*+	;fetch initializer
   503  002B12  CFF5 F051          	movff	tablat,__pdataCOMRAM
   504  002B16                     end_of_initialization:
   505                           	opt stack 0
   506  002B16                     __end_of__initialization:
   507                           	opt stack 0
   508  002B16  0E00               	movlw	low (__Lmediumconst shr (0+16))
   509  002B18  6EF8               	movwf	tblptru,c
   510  002B1A  0100               	movlb	0
   511  002B1C  EF8F  F017         	goto	_main	;jump to C main() function
   512                           tblptru	equ	0xFF8
   513                           tblptrh	equ	0xFF7
   514                           tblptrl	equ	0xFF6
   515                           tablat	equ	0xFF5
   516                           postinc0	equ	0xFEE
   517                           wreg	equ	0xFE8
   518                           postdec1	equ	0xFE5
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	bssCOMRAM
   522  000049                     __pbssCOMRAM:
   523                           	opt stack 0
   524  000049                     printSingleAddress@F214:
   525                           	opt stack 0
   526  000049                     	ds	8
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	dataCOMRAM
   537  000051                     __pdataCOMRAM:
   538                           	opt stack 0
   539  000051                     _dow:
   540                           	opt stack 0
   541  000051                     	ds	1
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           
   551                           	psect	bssBANK0
   552  0000B2                     __pbssBANK0:
   553                           	opt stack 0
   554  0000B2                     getTemperature@F206:
   555                           	opt stack 0
   556  0000B2                     	ds	9
   557  0000BB                     getTemperatureInt@F211:
   558                           	opt stack 0
   559  0000BB                     	ds	9
   560  0000C4                     _temp:
   561                           	opt stack 0
   562  0000C4                     	ds	3
   563  0000C7                     _adc:
   564                           	opt stack 0
   565  0000C7                     	ds	3
   566  0000CA                     _timer0:
   567                           	opt stack 0
   568  0000CA                     	ds	2
   569  0000CC                     _hour:
   570                           	opt stack 0
   571  0000CC                     	ds	1
   572  0000CD                     _minute:
   573                           	opt stack 0
   574  0000CD                     	ds	1
   575  0000CE                     _second:
   576                           	opt stack 0
   577  0000CE                     	ds	1
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	dataBANK0
   588  0000CF                     __pdataBANK0:
   589                           	opt stack 0
   590  0000CF                     _year1:
   591                           	opt stack 0
   592  0000CF                     	ds	2
   593  0000D1                     _start:
   594                           	opt stack 0
   595  0000D1                     	ds	1
   596  0000D2                     _tempAddress:
   597                           	opt stack 0
   598  0000D2                     	ds	8
   599  0000DA                     _day:
   600                           	opt stack 0
   601  0000DA                     	ds	1
   602  0000DB                     _month:
   603                           	opt stack 0
   604  0000DB                     	ds	1
   605  0000DC                     _year:
   606                           	opt stack 0
   607  0000DC                     	ds	1
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           postinc0	equ	0xFEE
   613                           wreg	equ	0xFE8
   614                           postdec1	equ	0xFE5
   615                           fsr1l	equ	0xFE1
   616                           
   617                           	psect	bssBANK1
   618  000100                     __pbssBANK1:
   619                           	opt stack 0
   620  000100                     _string:
   621                           	opt stack 0
   622  000100                     	ds	80
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1l	equ	0xFE1
   631                           
   632                           	psect	cstackBANK0
   633  000060                     __pcstackBANK0:
   634                           	opt stack 0
   635  000060                     ___fttol@sign1:
   636                           	opt stack 0
   637  000060                     getTemperature@scratchPad:
   638                           	opt stack 0
   639                           
   640                           ; 9 bytes @ 0x0
   641  000060                     	ds	1
   642  000061                     ___fttol@lval:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x1
   646  000061                     	ds	4
   647  000065                     ___fttol@exp1:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x5
   651  000065                     	ds	1
   652  000066                     ?__doprnt:
   653                           	opt stack 0
   654  000066                     timer0init@timer0:
   655                           	opt stack 0
   656  000066                     __doprnt@pb:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x6
   660  000066                     	ds	2
   661  000068                     __doprnt@f:
   662                           	opt stack 0
   663  000068                     timer0init@seconds:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x8
   667  000068                     	ds	1
   668  000069                     getTemperature@temperature:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x9
   672  000069                     	ds	1
   673  00006A                     __doprnt@ap:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0xA
   677  00006A                     	ds	1
   678  00006B                     ??_timer0init:
   679                           
   680                           ; 0 bytes @ 0xB
   681  00006B                     	ds	1
   682  00006C                     ??__doprnt:
   683  00006C                     getTemperature@i:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0xC
   687  00006C                     	ds	3
   688  00006F                     _timer0init$2563:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0xF
   692  00006F                     	ds	3
   693  000072                     __doprnt$2567:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x12
   697  000072                     	ds	3
   698  000075                     __doprnt$1972:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x15
   702  000075                     	ds	4
   703  000079                     __doprnt@idx:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x19
   707  000079                     	ds	1
   708  00007A                     __doprnt@vd:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x1A
   712  00007A                     	ds	4
   713  00007E                     __doprnt@vd_1974:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x1E
   717  00007E                     	ds	4
   718  000082                     __doprnt@integ:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x22
   722  000082                     	ds	3
   723  000085                     __doprnt@prec:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x25
   727  000085                     	ds	2
   728  000087                     __doprnt@width:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x27
   732  000087                     	ds	2
   733  000089                     __doprnt@exp:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x29
   737  000089                     	ds	2
   738  00008B                     __doprnt@_val:
   739                           	opt stack 0
   740                           
   741                           ; 5 bytes @ 0x2B
   742  00008B                     	ds	5
   743  000090                     __doprnt@flag:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x30
   747  000090                     	ds	2
   748  000092                     __doprnt@fval:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x32
   752  000092                     	ds	3
   753  000095                     __doprnt@c:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x35
   757  000095                     	ds	1
   758  000096                     ?_sprintf:
   759                           	opt stack 0
   760  000096                     sprintf@wh:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x36
   764  000096                     	ds	2
   765  000098                     sprintf@f:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x38
   769  000098                     	ds	20
   770  0000AC                     sprintf@ap:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x4C
   774  0000AC                     	ds	2
   775  0000AE                     sprintf@pb:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x4E
   779  0000AE                     	ds	4
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           postdec1	equ	0xFE5
   787                           fsr1l	equ	0xFE1
   788                           
   789                           	psect	cstackCOMRAM
   790  000001                     __pcstackCOMRAM:
   791                           	opt stack 0
   792  000001                     ??_isr:
   793  000001                     
   794                           ; 1 bytes @ 0x0
   795  000001                     	ds	14
   796  00000F                     ??_isdigit:
   797  00000F                     ??__I2CWait:
   798  00000F                     ?___awmod:
   799                           	opt stack 0
   800  00000F                     ?___ftpack:
   801                           	opt stack 0
   802  00000F                     ?___ftneg:
   803                           	opt stack 0
   804  00000F                     ?__tdiv_to_l_:
   805                           	opt stack 0
   806  00000F                     ?__div_to_l_:
   807                           	opt stack 0
   808  00000F                     ?___lldiv:
   809                           	opt stack 0
   810  00000F                     onewireReadBit@result:
   811                           	opt stack 0
   812  00000F                     toHour@hour:
   813                           	opt stack 0
   814  00000F                     toMonth@month:
   815                           	opt stack 0
   816  00000F                     bcdtodec@dec:
   817                           	opt stack 0
   818  00000F                     __UART1Send@message:
   819                           	opt stack 0
   820  00000F                     __UART2Send@message:
   821                           	opt stack 0
   822  00000F                     onewireWriteBit@b:
   823                           	opt stack 0
   824  00000F                     ___awmod@dividend:
   825                           	opt stack 0
   826  00000F                     __div_to_l_@f1:
   827                           	opt stack 0
   828  00000F                     ___ftpack@arg:
   829                           	opt stack 0
   830  00000F                     __tdiv_to_l_@f1:
   831                           	opt stack 0
   832  00000F                     ___ftge@ff1:
   833                           	opt stack 0
   834  00000F                     ___ftneg@f1:
   835                           	opt stack 0
   836  00000F                     ___lldiv@dividend:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0xE
   840  00000F                     	ds	1
   841  000010                     __I2CSend@data:
   842                           	opt stack 0
   843  000010                     onewireReadByte@result:
   844                           	opt stack 0
   845  000010                     _isdigit$2257:
   846                           	opt stack 0
   847  000010                     __I2CReceive@data:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0xF
   851  000010                     	ds	1
   852  000011                     ??_bcdtodec:
   853  000011                     ??_toHour:
   854  000011                     ??_onewireWriteByte:
   855  000011                     __I2CAddress@readnwrite:
   856                           	opt stack 0
   857  000011                     onewireReadByte@loop:
   858                           	opt stack 0
   859  000011                     isdigit@c:
   860                           	opt stack 0
   861  000011                     toMonth@year:
   862                           	opt stack 0
   863  000011                     __UART1Send@i:
   864                           	opt stack 0
   865  000011                     __UART2Send@i:
   866                           	opt stack 0
   867  000011                     ___awmod@divisor:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x10
   871  000011                     	ds	1
   872  000012                     toHour@h:
   873                           	opt stack 0
   874  000012                     bcdtodec@bcd:
   875                           	opt stack 0
   876  000012                     __I2CAddress@address:
   877                           	opt stack 0
   878  000012                     __I2CReceive@ack:
   879                           	opt stack 0
   880  000012                     onewireWriteByte@data:
   881                           	opt stack 0
   882  000012                     ___ftpack@exp:
   883                           	opt stack 0
   884  000012                     __div_to_l_@f2:
   885                           	opt stack 0
   886  000012                     __tdiv_to_l_@f2:
   887                           	opt stack 0
   888  000012                     ___ftge@ff2:
   889                           	opt stack 0
   890                           
   891                           ; 3 bytes @ 0x11
   892  000012                     	ds	1
   893  000013                     ??_toMonth:
   894  000013                     onewireWriteByte@loop:
   895                           	opt stack 0
   896  000013                     ___awmod@counter:
   897                           	opt stack 0
   898  000013                     ___ftpack@sign:
   899                           	opt stack 0
   900  000013                     getTime@hour:
   901                           	opt stack 0
   902  000013                     ___lldiv@divisor:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x12
   906  000013                     	ds	1
   907  000014                     ??___ftpack:
   908  000014                     toMonth@m:
   909                           	opt stack 0
   910  000014                     ___awmod@sign:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x13
   914  000014                     	ds	1
   915  000015                     ??__tdiv_to_l_:
   916  000015                     ??__div_to_l_:
   917  000015                     ??___ftge:
   918  000015                     ?___awdiv:
   919                           	opt stack 0
   920  000015                     getTime@minute:
   921                           	opt stack 0
   922  000015                     getDate@day:
   923                           	opt stack 0
   924  000015                     ___awdiv@dividend:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x14
   928  000015                     	ds	2
   929  000017                     ?___ftadd:
   930                           	opt stack 0
   931  000017                     ?___awtoft:
   932                           	opt stack 0
   933  000017                     ?___lltoft:
   934                           	opt stack 0
   935  000017                     getTime@second:
   936                           	opt stack 0
   937  000017                     getDate@month:
   938                           	opt stack 0
   939  000017                     ___awdiv@divisor:
   940                           	opt stack 0
   941  000017                     ___awtoft@c:
   942                           	opt stack 0
   943  000017                     ___ftadd@f1:
   944                           	opt stack 0
   945  000017                     ___lldiv@quotient:
   946                           	opt stack 0
   947  000017                     ___lltoft@c:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x16
   951  000017                     	ds	1
   952  000018                     __tdiv_to_l_@quot:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x17
   956  000018                     	ds	1
   957  000019                     ___awdiv@counter:
   958                           	opt stack 0
   959  000019                     getDate@year:
   960                           	opt stack 0
   961  000019                     __div_to_l_@quot:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x18
   965  000019                     	ds	1
   966  00001A                     ___awdiv@sign:
   967                           	opt stack 0
   968  00001A                     ___awtoft@sign:
   969                           	opt stack 0
   970  00001A                     ___ftadd@f2:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x19
   974  00001A                     	ds	1
   975  00001B                     ??___lltoft:
   976  00001B                     ?___ftdiv:
   977                           	opt stack 0
   978  00001B                     ___lldiv@counter:
   979                           	opt stack 0
   980  00001B                     ___awdiv@quotient:
   981                           	opt stack 0
   982  00001B                     ___ftdiv@f1:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x1A
   986  00001B                     	ds	1
   987  00001C                     ?___llmod:
   988                           	opt stack 0
   989  00001C                     __tdiv_to_l_@cntr:
   990                           	opt stack 0
   991  00001C                     __I2CInit@BRate:
   992                           	opt stack 0
   993  00001C                     __UART1Init@BRate:
   994                           	opt stack 0
   995  00001C                     __UART2Init@BRate:
   996                           	opt stack 0
   997  00001C                     ___llmod@dividend:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x1B
  1001  00001C                     	ds	1
  1002  00001D                     ??___ftadd:
  1003  00001D                     ?___wmul:
  1004                           	opt stack 0
  1005  00001D                     __div_to_l_@cntr:
  1006                           	opt stack 0
  1007  00001D                     __tdiv_to_l_@exp1:
  1008                           	opt stack 0
  1009  00001D                     ___wmul@multiplier:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x1C
  1013  00001D                     	ds	1
  1014  00001E                     __div_to_l_@exp1:
  1015                           	opt stack 0
  1016  00001E                     ___ftdiv@f2:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x1D
  1020  00001E                     	ds	1
  1021  00001F                     ___lltoft@exp:
  1022                           	opt stack 0
  1023  00001F                     ___wmul@multiplicand:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x1E
  1027  00001F                     	ds	1
  1028  000020                     ??__UART1Init:
  1029  000020                     ??__UART2Init:
  1030  000020                     ??__I2CInit:
  1031  000020                     ___ftadd@sign:
  1032                           	opt stack 0
  1033  000020                     ___llmod@divisor:
  1034                           	opt stack 0
  1035                           
  1036                           ; 4 bytes @ 0x1F
  1037  000020                     	ds	1
  1038  000021                     ??___ftdiv:
  1039  000021                     ___ftadd@exp2:
  1040                           	opt stack 0
  1041  000021                     ___wmul@product:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x20
  1045  000021                     	ds	1
  1046  000022                     ___ftadd@exp1:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x21
  1050  000022                     	ds	1
  1051  000023                     ?___ftsub:
  1052                           	opt stack 0
  1053  000023                     ___ftsub@f1:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x22
  1057  000023                     	ds	1
  1058  000024                     ___ftdiv@cntr:
  1059                           	opt stack 0
  1060  000024                     ___llmod@counter:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x23
  1064  000024                     	ds	1
  1065  000025                     ___ftdiv@f3:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x24
  1069  000025                     	ds	1
  1070  000026                     ___ftsub@f2:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x25
  1074  000026                     	ds	2
  1075  000028                     ___ftdiv@exp:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x27
  1079  000028                     	ds	1
  1080  000029                     ___ftdiv@sign:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x28
  1084  000029                     	ds	1
  1085  00002A                     ?___ftmul:
  1086                           	opt stack 0
  1087  00002A                     ___ftmul@f1:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x29
  1091  00002A                     	ds	3
  1092  00002D                     ___ftmul@f2:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x2C
  1096  00002D                     	ds	3
  1097  000030                     ??___ftmul:
  1098                           
  1099                           ; 0 bytes @ 0x2F
  1100  000030                     	ds	3
  1101  000033                     ___ftmul@exp:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x32
  1105  000033                     	ds	1
  1106  000034                     ___ftmul@f3_as_product:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x33
  1110  000034                     	ds	3
  1111  000037                     ___ftmul@cntr:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x36
  1115  000037                     	ds	1
  1116  000038                     ___ftmul@sign:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x37
  1120  000038                     	ds	1
  1121  000039                     ?_getTemperature:
  1122                           	opt stack 0
  1123  000039                     ?_fround:
  1124                           	opt stack 0
  1125  000039                     ?_scale:
  1126                           	opt stack 0
  1127  000039                     getTemperature@address:
  1128                           	opt stack 0
  1129  000039                     getADC9@zonnekracht:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x38
  1133  000039                     	ds	2
  1134  00003B                     ??_getADC9:
  1135                           
  1136                           ; 0 bytes @ 0x3A
  1137  00003B                     	ds	1
  1138  00003C                     ??_getTemperature:
  1139  00003C                     _fround$2565:
  1140                           	opt stack 0
  1141  00003C                     _scale$2566:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x3B
  1145  00003C                     	ds	1
  1146  00003D                     getADC9@adc:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x3C
  1150  00003D                     	ds	2
  1151  00003F                     scale@scl:
  1152                           	opt stack 0
  1153  00003F                     _fround$2564:
  1154                           	opt stack 0
  1155                           
  1156                           ; 3 bytes @ 0x3E
  1157  00003F                     	ds	1
  1158  000040                     ?___fttol:
  1159                           	opt stack 0
  1160  000040                     ___fttol@f1:
  1161                           	opt stack 0
  1162                           
  1163                           ; 3 bytes @ 0x3F
  1164  000040                     	ds	2
  1165  000042                     fround@prec:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x41
  1169  000042                     	ds	2
  1170  000044                     ??___fttol:
  1171                           
  1172                           ; 0 bytes @ 0x43
  1173  000044                     	ds	5
  1174  000049                     tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           
  1183                           ; 0 bytes @ 0x48
  1184 ;;
  1185 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1186 ;;
  1187 ;; *************** function _main *****************
  1188 ;; Defined at:
  1189 ;;		line 39 in file "src/main.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;		None               void
  1196 ;; Registers used:
  1197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1207 ;;Total ram usage:        0 bytes
  1208 ;; Hardware stack levels required when called:    7
  1209 ;; This function calls:
  1210 ;;		_loop
  1211 ;;		_setup
  1212 ;; This function is called by:
  1213 ;;		Startup code after reset
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text0
  1218  002F1E                     __ptext0:
  1219                           	opt stack 0
  1220  002F1E                     _main:
  1221                           	opt stack 24
  1222                           
  1223                           ;main.c: 40: setup();
  1224                           
  1225                           ;incstack = 0
  1226  002F1E  EC59  F014         	call	_setup	;wreg free
  1227  002F22                     l5175:
  1228                           
  1229                           ;main.c: 42: loop();
  1230  002F22  ECB9  F00D         	call	_loop	;wreg free
  1231                           
  1232                           ;main.c: 43: start = 0;
  1233  002F26  0E00               	movlw	0
  1234  002F28  0100               	movlb	0	; () banked
  1235  002F2A  6FD1               	movwf	_start& (0+255),b
  1236  002F2C                     l5179:
  1237                           
  1238                           ; BSR set to: 0
  1239  002F2C  0100               	movlb	0	; () banked
  1240  002F2E  51D1               	movf	_start& (0+255),w,b
  1241  002F30  A4D8               	btfss	status,2,c
  1242  002F32  D7F7               	goto	l5175
  1243  002F34  D7FB               	goto	l5179
  1244  002F36                     __end_of_main:
  1245                           	opt stack 0
  1246                           tblptru	equ	0xFF8
  1247                           tblptrh	equ	0xFF7
  1248                           tblptrl	equ	0xFF6
  1249                           tablat	equ	0xFF5
  1250                           postinc0	equ	0xFEE
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           status	equ	0xFD8
  1255                           
  1256 ;; *************** function _setup *****************
  1257 ;; Defined at:
  1258 ;;		line 48 in file "src/main.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;		None
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;		None
  1263 ;; Return value:  Size  Location     Type
  1264 ;;		None               void
  1265 ;; Registers used:
  1266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1276 ;;Total ram usage:        0 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; Hardware stack levels required when called:    4
  1279 ;; This function calls:
  1280 ;;		__I2CInit
  1281 ;;		__UART1Init
  1282 ;;		__UART2Init
  1283 ;;		_timer0init
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text1
  1290  0028B2                     __ptext1:
  1291                           	opt stack 0
  1292  0028B2                     _setup:
  1293                           	opt stack 26
  1294                           
  1295                           ;main.c: 49: _UART1Init(9600);
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;incstack = 0
  1299  0028B2  0E80               	movlw	128
  1300  0028B4  6E1C               	movwf	__UART1Init@BRate,c
  1301  0028B6  0E25               	movlw	37
  1302  0028B8  6E1D               	movwf	__UART1Init@BRate+1,c
  1303  0028BA  0E00               	movlw	0
  1304  0028BC  6E1E               	movwf	__UART1Init@BRate+2,c
  1305  0028BE  0E00               	movlw	0
  1306  0028C0  6E1F               	movwf	__UART1Init@BRate+3,c
  1307  0028C2  EC2E  F015         	call	__UART1Init	;wreg free
  1308                           
  1309                           ;main.c: 50: _UART2Init(9600);
  1310  0028C6  0E80               	movlw	128
  1311  0028C8  6E1C               	movwf	__UART2Init@BRate,c
  1312  0028CA  0E25               	movlw	37
  1313  0028CC  6E1D               	movwf	__UART2Init@BRate+1,c
  1314  0028CE  0E00               	movlw	0
  1315  0028D0  6E1E               	movwf	__UART2Init@BRate+2,c
  1316  0028D2  0E00               	movlw	0
  1317  0028D4  6E1F               	movwf	__UART2Init@BRate+3,c
  1318  0028D6  ECFC  F014         	call	__UART2Init	;wreg free
  1319                           
  1320                           ;main.c: 51: _I2CInit(100000);
  1321  0028DA  0EA0               	movlw	160
  1322  0028DC  6E1C               	movwf	__I2CInit@BRate,c
  1323  0028DE  0E86               	movlw	134
  1324  0028E0  6E1D               	movwf	__I2CInit@BRate+1,c
  1325  0028E2  0E01               	movlw	1
  1326  0028E4  6E1E               	movwf	__I2CInit@BRate+2,c
  1327  0028E6  0E00               	movlw	0
  1328  0028E8  6E1F               	movwf	__I2CInit@BRate+3,c
  1329  0028EA  ECEC  F015         	call	__I2CInit	;wreg free
  1330                           
  1331                           ;main.c: 52: timer0init(&timer0, 1);
  1332  0028EE  0100               	movlb	0	; () banked
  1333  0028F0  0E00               	movlw	high _timer0
  1334  0028F2  0100               	movlb	0	; () banked
  1335  0028F4  6F67               	movwf	(timer0init@timer0+1)& (0+255),b
  1336  0028F6  0100               	movlb	0	; () banked
  1337  0028F8  0ECA               	movlw	low _timer0
  1338  0028FA  0100               	movlb	0	; () banked
  1339  0028FC  6F66               	movwf	timer0init@timer0& (0+255),b
  1340  0028FE  0E00               	movlw	0
  1341  002900  0100               	movlb	0	; () banked
  1342  002902  6F68               	movwf	timer0init@seconds& (0+255),b
  1343  002904  0E80               	movlw	128
  1344  002906  0100               	movlb	0	; () banked
  1345  002908  6F69               	movwf	(timer0init@seconds+1)& (0+255),b
  1346  00290A  0E3F               	movlw	63
  1347  00290C  0100               	movlb	0	; () banked
  1348  00290E  6F6A               	movwf	(timer0init@seconds+2)& (0+255),b
  1349  002910  ECC1  F011         	call	_timer0init	;wreg free
  1350                           
  1351                           ;main.c: 53: ANCON0bits.ANSEL1 = 0;
  1352  002914  010F               	movlb	15	; () banked
  1353  002916  935D               	bcf	93,1,b	;volatile
  1354                           
  1355                           ; BSR set to: 15
  1356                           ;main.c: 54: (INTCONbits.GIE = 1);
  1357  002918  8EF2               	bsf	intcon,7,c	;volatile
  1358                           
  1359                           ; BSR set to: 15
  1360                           ;main.c: 55: message = &string;
  1361  00291A  0101               	movlb	1	; () banked
  1362  00291C  0E01               	movlw	high _string
  1363  00291E  0100               	movlb	0	; () banked
  1364  002920  6FDE               	movwf	(_message+1)& (0+255),b
  1365  002922  0101               	movlb	1	; () banked
  1366  002924  0E00               	movlw	low _string
  1367  002926  0100               	movlb	0	; () banked
  1368  002928  6FDD               	movwf	_message& (0+255),b
  1369                           
  1370                           ; BSR set to: 0
  1371  00292A  0012               	return	
  1372  00292C                     __end_of_setup:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           intcon	equ	0xFF2
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _timer0init *****************
  1386 ;; Defined at:
  1387 ;;		line 3 in file "src/timers.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  timer0          2    6[BANK0 ] PTR struct .
  1390 ;;		 -> timer0(2), 
  1391 ;;  seconds         3    8[BANK0 ] float 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;		None               void
  1396 ;; Registers used:
  1397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1403 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1405 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1407 ;;Total ram usage:       12 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:    3
  1410 ;; This function calls:
  1411 ;;		___ftadd
  1412 ;;		___ftmul
  1413 ;;		___ftneg
  1414 ;;		___fttol
  1415 ;; This function is called by:
  1416 ;;		_setup
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text2
  1421  002382                     __ptext2:
  1422                           	opt stack 0
  1423  002382                     _timer0init:
  1424                           	opt stack 26
  1425                           
  1426                           ;timers.c: 4: timer0->ab = (uint16_t)((0x0BDC) + (0xF424/8.0*(8.0-seconds)));
  1427                           
  1428                           ; BSR set to: 0
  1429                           ;incstack = 0
  1430  002382  0E24               	movlw	36
  1431  002384  6E2D               	movwf	___ftmul@f2,c
  1432  002386  0EF4               	movlw	244
  1433  002388  6E2E               	movwf	___ftmul@f2+1,c
  1434  00238A  0E45               	movlw	69
  1435  00238C  6E2F               	movwf	___ftmul@f2+2,c
  1436  00238E  0E00               	movlw	0
  1437  002390  6E1A               	movwf	___ftadd@f2,c
  1438  002392  0E00               	movlw	0
  1439  002394  6E1B               	movwf	___ftadd@f2+1,c
  1440  002396  0E41               	movlw	65
  1441  002398  6E1C               	movwf	___ftadd@f2+2,c
  1442  00239A  C068  F00F         	movff	timer0init@seconds,___ftneg@f1
  1443  00239E  C069  F010         	movff	timer0init@seconds+1,___ftneg@f1+1
  1444  0023A2  C06A  F011         	movff	timer0init@seconds+2,___ftneg@f1+2
  1445  0023A6  EC29  F017         	call	___ftneg	;wreg free
  1446  0023AA  C00F  F017         	movff	?___ftneg,___ftadd@f1
  1447  0023AE  C010  F018         	movff	?___ftneg+1,___ftadd@f1+1
  1448  0023B2  C011  F019         	movff	?___ftneg+2,___ftadd@f1+2
  1449  0023B6  ECE3  F00C         	call	___ftadd	;wreg free
  1450  0023BA  C017  F02A         	movff	?___ftadd,___ftmul@f1
  1451  0023BE  C018  F02B         	movff	?___ftadd+1,___ftmul@f1+1
  1452  0023C2  C019  F02C         	movff	?___ftadd+2,___ftmul@f1+2
  1453  0023C6  EC6E  F010         	call	___ftmul	;wreg free
  1454  0023CA  C02A  F06F         	movff	?___ftmul,_timer0init$2563
  1455  0023CE  C02B  F070         	movff	?___ftmul+1,_timer0init$2563+1
  1456  0023D2  C02C  F071         	movff	?___ftmul+2,_timer0init$2563+2
  1457                           
  1458                           ;timers.c: 4: timer0->ab = (uint16_t)((0x0BDC) + (0xF424/8.0*(8.0-seconds)));
  1459  0023D6  0EC0               	movlw	192
  1460  0023D8  6E1A               	movwf	___ftadd@f2,c
  1461  0023DA  0E3D               	movlw	61
  1462  0023DC  6E1B               	movwf	___ftadd@f2+1,c
  1463  0023DE  0E45               	movlw	69
  1464  0023E0  6E1C               	movwf	___ftadd@f2+2,c
  1465  0023E2  C06F  F017         	movff	_timer0init$2563,___ftadd@f1
  1466  0023E6  C070  F018         	movff	_timer0init$2563+1,___ftadd@f1+1
  1467  0023EA  C071  F019         	movff	_timer0init$2563+2,___ftadd@f1+2
  1468  0023EE  ECE3  F00C         	call	___ftadd	;wreg free
  1469  0023F2  C017  F040         	movff	?___ftadd,___fttol@f1
  1470  0023F6  C018  F041         	movff	?___ftadd+1,___fttol@f1+1
  1471  0023FA  C019  F042         	movff	?___ftadd+2,___fttol@f1+2
  1472  0023FE  EC3A  F00F         	call	___fttol	;wreg free
  1473  002402  C040  F06B         	movff	?___fttol,??_timer0init
  1474  002406  C041  F06C         	movff	?___fttol+1,??_timer0init+1
  1475  00240A  C042  F06D         	movff	?___fttol+2,??_timer0init+2
  1476  00240E  C043  F06E         	movff	?___fttol+3,??_timer0init+3
  1477  002412  C066  FFD9         	movff	timer0init@timer0,fsr2l
  1478  002416  C067  FFDA         	movff	timer0init@timer0+1,fsr2h
  1479  00241A  C06B  FFDE         	movff	??_timer0init,postinc2
  1480  00241E  C06C  FFDD         	movff	??_timer0init+1,postdec2
  1481                           
  1482                           ;timers.c: 5: T0CONbits.TMR0ON = 1;
  1483  002422  8ED5               	bsf	4053,7,c	;volatile
  1484                           
  1485                           ;timers.c: 6: T0CONbits.T08BIT = 0;
  1486  002424  9CD5               	bcf	4053,6,c	;volatile
  1487                           
  1488                           ;timers.c: 7: T0CONbits.T0CS = 0;
  1489  002426  9AD5               	bcf	4053,5,c	;volatile
  1490                           
  1491                           ;timers.c: 8: T0CONbits.T0SE = 0;
  1492  002428  98D5               	bcf	4053,4,c	;volatile
  1493                           
  1494                           ;timers.c: 9: T0CONbits.PSA = 0;
  1495  00242A  96D5               	bcf	4053,3,c	;volatile
  1496                           
  1497                           ;timers.c: 10: T0CONbits.T0PS = 0x7;
  1498  00242C  80D5               	bsf	4053,0,c	;volatile
  1499  00242E  82D5               	bsf	4053,1,c	;volatile
  1500  002430  84D5               	bsf	4053,2,c	;volatile
  1501                           
  1502                           ;timers.c: 11: INTCON2bits.TMR0IP = 1;
  1503  002432  84F1               	bsf	intcon2,2,c	;volatile
  1504                           
  1505                           ;timers.c: 12: INTCONbits.TMR0IF = 0;
  1506  002434  94F2               	bcf	intcon,2,c	;volatile
  1507                           
  1508                           ;timers.c: 13: INTCONbits.TMR0IE = 1;
  1509  002436  8AF2               	bsf	intcon,5,c	;volatile
  1510  002438  0012               	return	
  1511  00243A                     __end_of_timer0init:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           intcon	equ	0xFF2
  1518                           intcon2	equ	0xFF1
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1l	equ	0xFE1
  1523                           postinc2	equ	0xFDE
  1524                           postdec2	equ	0xFDD
  1525                           fsr2h	equ	0xFDA
  1526                           fsr2l	equ	0xFD9
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function __UART2Init *****************
  1530 ;; Defined at:
  1531 ;;		line 46 in file "src/EUSART.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  BRate           4   27[COMRAM] unsigned long 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;		None               void
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1547 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1549 ;;Total ram usage:        8 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    2
  1552 ;; This function calls:
  1553 ;;		___lldiv
  1554 ;; This function is called by:
  1555 ;;		_setup
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text3
  1560  0029F8                     __ptext3:
  1561                           	opt stack 0
  1562  0029F8                     __UART2Init:
  1563                           	opt stack 27
  1564                           
  1565                           ;EUSART.c: 47: TRISBbits.TRISB6 = 1;
  1566                           
  1567                           ;incstack = 0
  1568  0029F8  8C93               	bsf	3987,6,c	;volatile
  1569                           
  1570                           ;EUSART.c: 48: TRISBbits.TRISB7 = 1;
  1571  0029FA  8E93               	bsf	3987,7,c	;volatile
  1572                           
  1573                           ;EUSART.c: 49: PIR3bits.TX2IF = 0;
  1574  0029FC  98A4               	bcf	4004,4,c	;volatile
  1575                           
  1576                           ;EUSART.c: 50: PIR3bits.RC2IF = 0;
  1577  0029FE  9AA4               	bcf	4004,5,c	;volatile
  1578                           
  1579                           ;EUSART.c: 51: PIE3bits.RC2IE = 1;
  1580  002A00  8AA3               	bsf	4003,5,c	;volatile
  1581                           
  1582                           ;EUSART.c: 52: PIE3bits.TX2IE = 1;
  1583  002A02  88A3               	bsf	4003,4,c	;volatile
  1584                           
  1585                           ;EUSART.c: 53: TXSTA2 = 0xA0;
  1586  002A04  0EA0               	movlw	160
  1587  002A06  6EBA               	movwf	4026,c	;volatile
  1588                           
  1589                           ;EUSART.c: 54: RCSTA2 = 0x90;
  1590  002A08  0E90               	movlw	144
  1591  002A0A  6EA6               	movwf	4006,c	;volatile
  1592                           
  1593                           ;EUSART.c: 55: BAUDCON2 = 0x40;
  1594  002A0C  0E40               	movlw	64
  1595  002A0E  6EB9               	movwf	4025,c	;volatile
  1596                           
  1597                           ;EUSART.c: 56: SPBRG2 = (uint8_t) ((8000000 / BRate / 64) - 1);
  1598  002A10  0E00               	movlw	0
  1599  002A12  6E0F               	movwf	___lldiv@dividend,c
  1600  002A14  0E12               	movlw	18
  1601  002A16  6E10               	movwf	___lldiv@dividend+1,c
  1602  002A18  0E7A               	movlw	122
  1603  002A1A  6E11               	movwf	___lldiv@dividend+2,c
  1604  002A1C  0E00               	movlw	0
  1605  002A1E  6E12               	movwf	___lldiv@dividend+3,c
  1606  002A20  C01C  F013         	movff	__UART2Init@BRate,___lldiv@divisor
  1607  002A24  C01D  F014         	movff	__UART2Init@BRate+1,___lldiv@divisor+1
  1608  002A28  C01E  F015         	movff	__UART2Init@BRate+2,___lldiv@divisor+2
  1609  002A2C  C01F  F016         	movff	__UART2Init@BRate+3,___lldiv@divisor+3
  1610  002A30  ECDA  F013         	call	___lldiv	;wreg free
  1611  002A34  C00F  F020         	movff	?___lldiv,??__UART2Init
  1612  002A38  C010  F021         	movff	?___lldiv+1,??__UART2Init+1
  1613  002A3C  C011  F022         	movff	?___lldiv+2,??__UART2Init+2
  1614  002A40  C012  F023         	movff	?___lldiv+3,??__UART2Init+3
  1615  002A44  0E07               	movlw	7
  1616  002A46  D005               	goto	u4490
  1617  002A48                     u4495:
  1618  002A48  90D8               	bcf	status,0,c
  1619  002A4A  3223               	rrcf	??__UART2Init+3,f,c
  1620  002A4C  3222               	rrcf	??__UART2Init+2,f,c
  1621  002A4E  3221               	rrcf	??__UART2Init+1,f,c
  1622  002A50  3220               	rrcf	??__UART2Init,f,c
  1623  002A52                     u4490:
  1624  002A52  2EE8               	decfsz	wreg,f,c
  1625  002A54  D7F9               	goto	u4495
  1626  002A56  0420               	decf	??__UART2Init,w,c
  1627  002A58  6E7B               	movwf	3963,c	;volatile
  1628  002A5A  0012               	return	
  1629  002A5C                     __end_of__UART2Init:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           intcon	equ	0xFF2
  1636                           intcon2	equ	0xFF1
  1637                           postinc0	equ	0xFEE
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8
  1646                           
  1647 ;; *************** function __UART1Init *****************
  1648 ;; Defined at:
  1649 ;;		line 18 in file "src/EUSART.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  BRate           4   27[COMRAM] unsigned long 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;		None               void
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1665 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1666 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1667 ;;Total ram usage:        8 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    2
  1670 ;; This function calls:
  1671 ;;		___lldiv
  1672 ;; This function is called by:
  1673 ;;		_setup
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           	psect	text4
  1678  002A5C                     __ptext4:
  1679                           	opt stack 0
  1680  002A5C                     __UART1Init:
  1681                           	opt stack 27
  1682                           
  1683                           ;EUSART.c: 19: TRISCbits.TRISC6 = 1;
  1684                           
  1685                           ;incstack = 0
  1686  002A5C  8C94               	bsf	3988,6,c	;volatile
  1687                           
  1688                           ;EUSART.c: 20: TRISCbits.TRISC7 = 1;
  1689  002A5E  8E94               	bsf	3988,7,c	;volatile
  1690                           
  1691                           ;EUSART.c: 21: PIR1bits.TX1IF = 0;
  1692  002A60  989E               	bcf	3998,4,c	;volatile
  1693                           
  1694                           ;EUSART.c: 22: PIR1bits.RC1IF = 0;
  1695  002A62  9A9E               	bcf	3998,5,c	;volatile
  1696                           
  1697                           ;EUSART.c: 23: PIE1bits.RC1IE = 1;
  1698  002A64  8A9D               	bsf	3997,5,c	;volatile
  1699                           
  1700                           ;EUSART.c: 24: PIE1bits.TX1IE = 1;
  1701  002A66  889D               	bsf	3997,4,c	;volatile
  1702                           
  1703                           ;EUSART.c: 25: TXSTA1 = 0xA0;
  1704  002A68  0EA0               	movlw	160
  1705  002A6A  6EAC               	movwf	4012,c	;volatile
  1706                           
  1707                           ;EUSART.c: 26: RCSTA1 = 0x90;
  1708  002A6C  0E90               	movlw	144
  1709  002A6E  6EAB               	movwf	4011,c	;volatile
  1710                           
  1711                           ;EUSART.c: 27: BAUDCON1 = 0x40;
  1712  002A70  0E40               	movlw	64
  1713  002A72  6EA7               	movwf	4007,c	;volatile
  1714                           
  1715                           ;EUSART.c: 28: SPBRG1 = (uint8_t) ((8000000 / BRate / 64) - 1);
  1716  002A74  0E00               	movlw	0
  1717  002A76  6E0F               	movwf	___lldiv@dividend,c
  1718  002A78  0E12               	movlw	18
  1719  002A7A  6E10               	movwf	___lldiv@dividend+1,c
  1720  002A7C  0E7A               	movlw	122
  1721  002A7E  6E11               	movwf	___lldiv@dividend+2,c
  1722  002A80  0E00               	movlw	0
  1723  002A82  6E12               	movwf	___lldiv@dividend+3,c
  1724  002A84  C01C  F013         	movff	__UART1Init@BRate,___lldiv@divisor
  1725  002A88  C01D  F014         	movff	__UART1Init@BRate+1,___lldiv@divisor+1
  1726  002A8C  C01E  F015         	movff	__UART1Init@BRate+2,___lldiv@divisor+2
  1727  002A90  C01F  F016         	movff	__UART1Init@BRate+3,___lldiv@divisor+3
  1728  002A94  ECDA  F013         	call	___lldiv	;wreg free
  1729  002A98  C00F  F020         	movff	?___lldiv,??__UART1Init
  1730  002A9C  C010  F021         	movff	?___lldiv+1,??__UART1Init+1
  1731  002AA0  C011  F022         	movff	?___lldiv+2,??__UART1Init+2
  1732  002AA4  C012  F023         	movff	?___lldiv+3,??__UART1Init+3
  1733  002AA8  0E07               	movlw	7
  1734  002AAA  D005               	goto	u4480
  1735  002AAC                     u4485:
  1736  002AAC  90D8               	bcf	status,0,c
  1737  002AAE  3223               	rrcf	??__UART1Init+3,f,c
  1738  002AB0  3222               	rrcf	??__UART1Init+2,f,c
  1739  002AB2  3221               	rrcf	??__UART1Init+1,f,c
  1740  002AB4  3220               	rrcf	??__UART1Init,f,c
  1741  002AB6                     u4480:
  1742  002AB6  2EE8               	decfsz	wreg,f,c
  1743  002AB8  D7F9               	goto	u4485
  1744  002ABA  0420               	decf	??__UART1Init,w,c
  1745  002ABC  6EAF               	movwf	4015,c	;volatile
  1746  002ABE  0012               	return	
  1747  002AC0                     __end_of__UART1Init:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           intcon	equ	0xFF2
  1754                           intcon2	equ	0xFF1
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function __I2CInit *****************
  1766 ;; Defined at:
  1767 ;;		line 57 in file "src/I2C.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  BRate           4   27[COMRAM] unsigned long 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;		None               void
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1781 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1783 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1784 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1785 ;;Total ram usage:        8 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    2
  1788 ;; This function calls:
  1789 ;;		___lldiv
  1790 ;; This function is called by:
  1791 ;;		_setup
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text5
  1796  002BD8                     __ptext5:
  1797                           	opt stack 0
  1798  002BD8                     __I2CInit:
  1799                           	opt stack 27
  1800                           
  1801                           ;I2C.c: 58: SSPCON1bits.SSPEN = 0;
  1802                           
  1803                           ;incstack = 0
  1804  002BD8  9AC6               	bcf	4038,5,c	;volatile
  1805                           
  1806                           ;I2C.c: 59: TRISCbits.TRISC4 = 1;
  1807  002BDA  8894               	bsf	3988,4,c	;volatile
  1808                           
  1809                           ;I2C.c: 60: TRISCbits.TRISC3 = 1;
  1810  002BDC  8694               	bsf	3988,3,c	;volatile
  1811                           
  1812                           ;I2C.c: 61: SSPSTATbits.CKE = 0;
  1813  002BDE  9CC7               	bcf	4039,6,c	;volatile
  1814                           
  1815                           ;I2C.c: 62: SSPSTATbits.SMP = 0;
  1816  002BE0  9EC7               	bcf	4039,7,c	;volatile
  1817                           
  1818                           ;I2C.c: 63: SSPCON1bits.WCOL = 0;
  1819  002BE2  9EC6               	bcf	4038,7,c	;volatile
  1820                           
  1821                           ;I2C.c: 64: SSPCON1bits.SSPOV = 0;
  1822  002BE4  9CC6               	bcf	4038,6,c	;volatile
  1823                           
  1824                           ;I2C.c: 65: SSPCON1bits.SSPM = 0x8;
  1825  002BE6  50C6               	movf	4038,w,c	;volatile
  1826  002BE8  0BF0               	andlw	-16
  1827  002BEA  0908               	iorlw	8
  1828  002BEC  6EC6               	movwf	4038,c	;volatile
  1829                           
  1830                           ;I2C.c: 66: SSPADD = (8000000 / 4 / BRate - 1);
  1831  002BEE  0E80               	movlw	128
  1832  002BF0  6E0F               	movwf	___lldiv@dividend,c
  1833  002BF2  0E84               	movlw	132
  1834  002BF4  6E10               	movwf	___lldiv@dividend+1,c
  1835  002BF6  0E1E               	movlw	30
  1836  002BF8  6E11               	movwf	___lldiv@dividend+2,c
  1837  002BFA  0E00               	movlw	0
  1838  002BFC  6E12               	movwf	___lldiv@dividend+3,c
  1839  002BFE  C01C  F013         	movff	__I2CInit@BRate,___lldiv@divisor
  1840  002C02  C01D  F014         	movff	__I2CInit@BRate+1,___lldiv@divisor+1
  1841  002C06  C01E  F015         	movff	__I2CInit@BRate+2,___lldiv@divisor+2
  1842  002C0A  C01F  F016         	movff	__I2CInit@BRate+3,___lldiv@divisor+3
  1843  002C0E  ECDA  F013         	call	___lldiv	;wreg free
  1844  002C12  C00F  F020         	movff	?___lldiv,??__I2CInit
  1845  002C16  C010  F021         	movff	?___lldiv+1,??__I2CInit+1
  1846  002C1A  C011  F022         	movff	?___lldiv+2,??__I2CInit+2
  1847  002C1E  C012  F023         	movff	?___lldiv+3,??__I2CInit+3
  1848  002C22  0420               	decf	??__I2CInit,w,c
  1849  002C24  6EC8               	movwf	4040,c	;volatile
  1850                           
  1851                           ;I2C.c: 67: PIR1bits.SSPIF = 0;
  1852  002C26  969E               	bcf	3998,3,c	;volatile
  1853                           
  1854                           ;I2C.c: 68: PIE1bits.SSPIE = 1;
  1855  002C28  869D               	bsf	3997,3,c	;volatile
  1856                           
  1857                           ;I2C.c: 70: PIR2bits.BCLIF = 0;
  1858  002C2A  96A1               	bcf	4001,3,c	;volatile
  1859                           
  1860                           ;I2C.c: 71: PIE2bits.BCLIE = 1;
  1861  002C2C  86A0               	bsf	4000,3,c	;volatile
  1862                           
  1863                           ;I2C.c: 73: SSPCON1bits.SSPEN = 1;
  1864  002C2E  8AC6               	bsf	4038,5,c	;volatile
  1865  002C30  0012               	return	
  1866  002C32                     __end_of__I2CInit:
  1867                           	opt stack 0
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1l	equ	0xFE1
  1878                           postinc2	equ	0xFDE
  1879                           postdec2	equ	0xFDD
  1880                           fsr2h	equ	0xFDA
  1881                           fsr2l	equ	0xFD9
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _loop *****************
  1885 ;; Defined at:
  1886 ;;		line 58 in file "src/main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;		None               void
  1893 ;; Registers used:
  1894 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    6
  1907 ;; This function calls:
  1908 ;;		__UART1Send
  1909 ;;		__UART2Send
  1910 ;;		_broadcastConvert
  1911 ;;		_getADC9
  1912 ;;		_getDate
  1913 ;;		_getTemperature
  1914 ;;		_getTime
  1915 ;;		_sprintf
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text6
  1922  001B72                     __ptext6:
  1923                           	opt stack 0
  1924  001B72                     _loop:
  1925                           	opt stack 24
  1926                           
  1927                           ;main.c: 59: broadcastConvert();
  1928                           
  1929                           ;incstack = 0
  1930  001B72  EC81  F017         	call	_broadcastConvert	;wreg free
  1931                           
  1932                           ;main.c: 60: temp = getTemperature(tempAddress);
  1933  001B76  0100               	movlb	0	; () banked
  1934  001B78  0E00               	movlw	high _tempAddress
  1935  001B7A  6E3A               	movwf	getTemperature@address+1,c
  1936  001B7C  0100               	movlb	0	; () banked
  1937  001B7E  0ED2               	movlw	low _tempAddress
  1938  001B80  6E39               	movwf	getTemperature@address,c
  1939  001B82  EC57  F011         	call	_getTemperature	;wreg free
  1940  001B86  C039  F0C4         	movff	?_getTemperature,_temp
  1941  001B8A  C03A  F0C5         	movff	?_getTemperature+1,_temp+1
  1942  001B8E  C03B  F0C6         	movff	?_getTemperature+2,_temp+2
  1943                           
  1944                           ;main.c: 61: getTime(&hour, &minute, &second);
  1945  001B92  0100               	movlb	0	; () banked
  1946  001B94  0E00               	movlw	high _hour
  1947  001B96  6E14               	movwf	getTime@hour+1,c
  1948  001B98  0100               	movlb	0	; () banked
  1949  001B9A  0ECC               	movlw	low _hour
  1950  001B9C  6E13               	movwf	getTime@hour,c
  1951  001B9E  0100               	movlb	0	; () banked
  1952  001BA0  0E00               	movlw	high _minute
  1953  001BA2  6E16               	movwf	getTime@minute+1,c
  1954  001BA4  0100               	movlb	0	; () banked
  1955  001BA6  0ECD               	movlw	low _minute
  1956  001BA8  6E15               	movwf	getTime@minute,c
  1957  001BAA  0100               	movlb	0	; () banked
  1958  001BAC  0E00               	movlw	high _second
  1959  001BAE  6E18               	movwf	getTime@second+1,c
  1960  001BB0  0100               	movlb	0	; () banked
  1961  001BB2  0ECE               	movlw	low _second
  1962  001BB4  6E17               	movwf	getTime@second,c
  1963  001BB6  EC1B  F014         	call	_getTime	;wreg free
  1964                           
  1965                           ;main.c: 62: getDate(&day, &month, &year);
  1966  001BBA  0100               	movlb	0	; () banked
  1967  001BBC  0E00               	movlw	high _day
  1968  001BBE  6E16               	movwf	getDate@day+1,c
  1969  001BC0  0100               	movlb	0	; () banked
  1970  001BC2  0EDA               	movlw	low _day
  1971  001BC4  6E15               	movwf	getDate@day,c
  1972  001BC6  0100               	movlb	0	; () banked
  1973  001BC8  0E00               	movlw	high _month
  1974  001BCA  6E18               	movwf	getDate@month+1,c
  1975  001BCC  0100               	movlb	0	; () banked
  1976  001BCE  0EDB               	movlw	low _month
  1977  001BD0  6E17               	movwf	getDate@month,c
  1978  001BD2  0100               	movlb	0	; () banked
  1979  001BD4  0E00               	movlw	high _year
  1980  001BD6  6E1A               	movwf	getDate@year+1,c
  1981  001BD8  0100               	movlb	0	; () banked
  1982  001BDA  0EDC               	movlw	low _year
  1983  001BDC  6E19               	movwf	getDate@year,c
  1984  001BDE  EC98  F013         	call	_getDate	;wreg free
  1985                           
  1986                           ;main.c: 63: getADC9(&adc);
  1987  001BE2  0100               	movlb	0	; () banked
  1988  001BE4  0E00               	movlw	high _adc
  1989  001BE6  6E3A               	movwf	getADC9@zonnekracht+1,c
  1990  001BE8  0100               	movlb	0	; () banked
  1991  001BEA  0EC7               	movlw	low _adc
  1992  001BEC  6E39               	movwf	getADC9@zonnekracht,c
  1993  001BEE  EC53  F013         	call	_getADC9	;wreg free
  1994                           
  1995                           ;main.c: 64: sprintf(message, "%04d/%02d/%02d-%02d:%02d:%02d   Temperatuur: %f C   Volta
      +                          ge: %f V\n",
  1996                           ;main.c: 65: (year1 + year), month, day, hour, minute, second, temp, adc);
  1997  001BF2  0100               	movlb	0	; () banked
  1998  001BF4  C0DE  F097         	movff	_message+1,sprintf@wh+1
  1999  001BF8  0100               	movlb	0	; () banked
  2000  001BFA  C0DD  F096         	movff	_message,sprintf@wh
  2001  001BFE  0E7F               	movlw	high STR_1
  2002  001C00  0100               	movlb	0	; () banked
  2003  001C02  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2004  001C04  0E73               	movlw	low STR_1
  2005  001C06  0100               	movlb	0	; () banked
  2006  001C08  6F98               	movwf	sprintf@f& (0+255),b
  2007  001C0A  0100               	movlb	0	; () banked
  2008  001C0C  51DC               	movf	_year& (0+255),w,b
  2009  001C0E  0100               	movlb	0	; () banked
  2010  001C10  25CF               	addwf	_year1& (0+255),w,b
  2011  001C12  0100               	movlb	0	; () banked
  2012  001C14  6F9A               	movwf	(?_sprintf+4)& (0+255),b
  2013  001C16  0E00               	movlw	0
  2014  001C18  0100               	movlb	0	; () banked
  2015  001C1A  21D0               	addwfc	(_year1+1)& (0+255),w,b
  2016  001C1C  0100               	movlb	0	; () banked
  2017  001C1E  6F9B               	movwf	(?_sprintf+5)& (0+255),b
  2018  001C20  0100               	movlb	0	; () banked
  2019  001C22  C0DB  F09C         	movff	_month,?_sprintf+6
  2020  001C26  0100               	movlb	0	; () banked
  2021  001C28  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2022  001C2A  0100               	movlb	0	; () banked
  2023  001C2C  C0DA  F09E         	movff	_day,?_sprintf+8
  2024  001C30  0100               	movlb	0	; () banked
  2025  001C32  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2026  001C34  0100               	movlb	0	; () banked
  2027  001C36  C0CC  F0A0         	movff	_hour,?_sprintf+10
  2028  001C3A  0100               	movlb	0	; () banked
  2029  001C3C  6BA1               	clrf	(?_sprintf+11)& (0+255),b
  2030  001C3E  0100               	movlb	0	; () banked
  2031  001C40  C0CD  F0A2         	movff	_minute,?_sprintf+12
  2032  001C44  0100               	movlb	0	; () banked
  2033  001C46  6BA3               	clrf	(?_sprintf+13)& (0+255),b
  2034  001C48  0100               	movlb	0	; () banked
  2035  001C4A  C0CE  F0A4         	movff	_second,?_sprintf+14
  2036  001C4E  0100               	movlb	0	; () banked
  2037  001C50  6BA5               	clrf	(?_sprintf+15)& (0+255),b
  2038  001C52  C0C4  F0A6         	movff	_temp,?_sprintf+16
  2039  001C56  C0C5  F0A7         	movff	_temp+1,?_sprintf+17
  2040  001C5A  C0C6  F0A8         	movff	_temp+2,?_sprintf+18
  2041  001C5E  C0C7  F0A9         	movff	_adc,?_sprintf+19
  2042  001C62  C0C8  F0AA         	movff	_adc+1,?_sprintf+20
  2043  001C66  C0C9  F0AB         	movff	_adc+2,?_sprintf+21
  2044  001C6A  EC96  F014         	call	_sprintf	;wreg free
  2045                           
  2046                           ;main.c: 66: _UART1Send(message);
  2047  001C6E  0100               	movlb	0	; () banked
  2048  001C70  C0DE  F010         	movff	_message+1,__UART1Send@message+1
  2049  001C74  0100               	movlb	0	; () banked
  2050  001C76  C0DD  F00F         	movff	_message,__UART1Send@message
  2051  001C7A  EC7C  F016         	call	__UART1Send	;wreg free
  2052                           
  2053                           ;main.c: 67: sprintf(message, "%04d,%02d,%02d,%02d,%02d,%02d,%f,%f\n",
  2054                           ;main.c: 68: (year1 + year), month, day, hour, minute, second, temp, adc);
  2055  001C7E  0100               	movlb	0	; () banked
  2056  001C80  C0DE  F097         	movff	_message+1,sprintf@wh+1
  2057  001C84  0100               	movlb	0	; () banked
  2058  001C86  C0DD  F096         	movff	_message,sprintf@wh
  2059  001C8A  0E7F               	movlw	high STR_2
  2060  001C8C  0100               	movlb	0	; () banked
  2061  001C8E  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2062  001C90  0EB6               	movlw	low STR_2
  2063  001C92  0100               	movlb	0	; () banked
  2064  001C94  6F98               	movwf	sprintf@f& (0+255),b
  2065  001C96  0100               	movlb	0	; () banked
  2066  001C98  51DC               	movf	_year& (0+255),w,b
  2067  001C9A  0100               	movlb	0	; () banked
  2068  001C9C  25CF               	addwf	_year1& (0+255),w,b
  2069  001C9E  0100               	movlb	0	; () banked
  2070  001CA0  6F9A               	movwf	(?_sprintf+4)& (0+255),b
  2071  001CA2  0E00               	movlw	0
  2072  001CA4  0100               	movlb	0	; () banked
  2073  001CA6  21D0               	addwfc	(_year1+1)& (0+255),w,b
  2074  001CA8  0100               	movlb	0	; () banked
  2075  001CAA  6F9B               	movwf	(?_sprintf+5)& (0+255),b
  2076  001CAC  0100               	movlb	0	; () banked
  2077  001CAE  C0DB  F09C         	movff	_month,?_sprintf+6
  2078  001CB2  0100               	movlb	0	; () banked
  2079  001CB4  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2080  001CB6  0100               	movlb	0	; () banked
  2081  001CB8  C0DA  F09E         	movff	_day,?_sprintf+8
  2082  001CBC  0100               	movlb	0	; () banked
  2083  001CBE  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2084  001CC0  0100               	movlb	0	; () banked
  2085  001CC2  C0CC  F0A0         	movff	_hour,?_sprintf+10
  2086  001CC6  0100               	movlb	0	; () banked
  2087  001CC8  6BA1               	clrf	(?_sprintf+11)& (0+255),b
  2088  001CCA  0100               	movlb	0	; () banked
  2089  001CCC  C0CD  F0A2         	movff	_minute,?_sprintf+12
  2090  001CD0  0100               	movlb	0	; () banked
  2091  001CD2  6BA3               	clrf	(?_sprintf+13)& (0+255),b
  2092  001CD4  0100               	movlb	0	; () banked
  2093  001CD6  C0CE  F0A4         	movff	_second,?_sprintf+14
  2094  001CDA  0100               	movlb	0	; () banked
  2095  001CDC  6BA5               	clrf	(?_sprintf+15)& (0+255),b
  2096  001CDE  C0C4  F0A6         	movff	_temp,?_sprintf+16
  2097  001CE2  C0C5  F0A7         	movff	_temp+1,?_sprintf+17
  2098  001CE6  C0C6  F0A8         	movff	_temp+2,?_sprintf+18
  2099  001CEA  C0C7  F0A9         	movff	_adc,?_sprintf+19
  2100  001CEE  C0C8  F0AA         	movff	_adc+1,?_sprintf+20
  2101  001CF2  C0C9  F0AB         	movff	_adc+2,?_sprintf+21
  2102  001CF6  EC96  F014         	call	_sprintf	;wreg free
  2103                           
  2104                           ;main.c: 69: _UART2Send(message);
  2105  001CFA  0100               	movlb	0	; () banked
  2106  001CFC  C0DE  F010         	movff	_message+1,__UART2Send@message+1
  2107  001D00  0100               	movlb	0	; () banked
  2108  001D02  C0DD  F00F         	movff	_message,__UART2Send@message
  2109  001D06  EC5D  F016         	call	__UART2Send	;wreg free
  2110  001D0A  0012               	return	
  2111  001D0C                     __end_of_loop:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           intcon	equ	0xFF2
  2118                           intcon2	equ	0xFF1
  2119                           postinc0	equ	0xFEE
  2120                           wreg	equ	0xFE8
  2121                           postdec1	equ	0xFE5
  2122                           fsr1l	equ	0xFE1
  2123                           postinc2	equ	0xFDE
  2124                           postdec2	equ	0xFDD
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _sprintf *****************
  2130 ;; Defined at:
  2131 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\sprintf.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;  wh              2   54[BANK0 ] PTR unsigned char 
  2134 ;;		 -> NULL(0), string(80), 
  2135 ;;  f               2   56[BANK0 ] PTR const unsigned char 
  2136 ;;		 -> STR_2(37), STR_1(67), 
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;  pb              4   78[BANK0 ] struct __prbuf
  2139 ;;  ap              2   76[BANK0 ] PTR void [1]
  2140 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  2   54[BANK0 ] int 
  2143 ;; Registers used:
  2144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2150 ;;      Params:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2151 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2153 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2154 ;;Total ram usage:       28 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    5
  2157 ;; This function calls:
  2158 ;;		__doprnt
  2159 ;; This function is called by:
  2160 ;;		_loop
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text7
  2165  00292C                     __ptext7:
  2166                           	opt stack 0
  2167  00292C                     _sprintf:
  2168                           	opt stack 24
  2169                           
  2170                           ;incstack = 0
  2171  00292C  0100               	movlb	0	; () banked
  2172  00292E  C097  F0AF         	movff	sprintf@wh+1,sprintf@pb+1
  2173  002932  0100               	movlb	0	; () banked
  2174  002934  C096  F0AE         	movff	sprintf@wh,sprintf@pb
  2175  002938  0E00               	movlw	0
  2176  00293A  0100               	movlb	0	; () banked
  2177  00293C  6FB1               	movwf	(sprintf@pb+3)& (0+255),b
  2178  00293E  0E00               	movlw	0
  2179  002940  0100               	movlb	0	; () banked
  2180  002942  6FB0               	movwf	(sprintf@pb+2)& (0+255),b
  2181  002944  0100               	movlb	0	; () banked
  2182  002946  0E00               	movlw	high (?_sprintf+4)
  2183  002948  0100               	movlb	0	; () banked
  2184  00294A  6FAD               	movwf	(sprintf@ap+1)& (0+255),b
  2185  00294C  0100               	movlb	0	; () banked
  2186  00294E  0E9A               	movlw	low (?_sprintf+4)
  2187  002950  0100               	movlb	0	; () banked
  2188  002952  6FAC               	movwf	sprintf@ap& (0+255),b
  2189                           
  2190                           ; BSR set to: 0
  2191  002954  0100               	movlb	0	; () banked
  2192  002956  0E00               	movlw	high sprintf@pb
  2193  002958  0100               	movlb	0	; () banked
  2194  00295A  6F67               	movwf	(__doprnt@pb+1)& (0+255),b
  2195  00295C  0100               	movlb	0	; () banked
  2196  00295E  0EAE               	movlw	low sprintf@pb
  2197  002960  0100               	movlb	0	; () banked
  2198  002962  6F66               	movwf	__doprnt@pb& (0+255),b
  2199  002964  0100               	movlb	0	; () banked
  2200  002966  C099  F069         	movff	sprintf@f+1,__doprnt@f+1
  2201  00296A  0100               	movlb	0	; () banked
  2202  00296C  C098  F068         	movff	sprintf@f,__doprnt@f
  2203  002970  0100               	movlb	0	; () banked
  2204  002972  0E00               	movlw	high sprintf@ap
  2205  002974  0100               	movlb	0	; () banked
  2206  002976  6F6B               	movwf	(__doprnt@ap+1)& (0+255),b
  2207  002978  0100               	movlb	0	; () banked
  2208  00297A  0EAC               	movlw	low sprintf@ap
  2209  00297C  0100               	movlb	0	; () banked
  2210  00297E  6F6A               	movwf	__doprnt@ap& (0+255),b
  2211  002980  EC58  F000         	call	__doprnt	;wreg free
  2212  002984  C0AE  FFD9         	movff	sprintf@pb,fsr2l
  2213  002988  C0AF  FFDA         	movff	sprintf@pb+1,fsr2h
  2214  00298C  0E00               	movlw	0
  2215  00298E  6EDF               	movwf	indf2,c
  2216  002990  0012               	return	
  2217  002992                     __end_of_sprintf:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           intcon	equ	0xFF2
  2224                           intcon2	equ	0xFF1
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1l	equ	0xFE1
  2229                           indf2	equ	0xFDF
  2230                           postinc2	equ	0xFDE
  2231                           postdec2	equ	0xFDD
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function __doprnt *****************
  2237 ;; Defined at:
  2238 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  pb              2    6[BANK0 ] PTR struct __prbuf
  2241 ;;		 -> sprintf@pb(4), printf@pb(4), 
  2242 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  2243 ;;		 -> STR_4(12), STR_3(6), STR_2(37), STR_1(67), 
  2244 ;;  ap              2   10[BANK0 ] PTR PTR void 
  2245 ;;		 -> sprintf@ap(2), printf@ap(2), 
  2246 ;; Auto vars:     Size  Location     Type
  2247 ;;  idx             1   25[BANK0 ] unsigned char 
  2248 ;;  vd              4   26[BANK0 ] unsigned long 
  2249 ;;  vd              4   30[BANK0 ] unsigned long 
  2250 ;;  _val            5   43[BANK0 ] struct .
  2251 ;;  fval            3   50[BANK0 ] struct .
  2252 ;;  integ           3   34[BANK0 ] struct .
  2253 ;;  ival            3    0        struct .
  2254 ;;  flag            2   48[BANK0 ] unsigned short 
  2255 ;;  exp             2   41[BANK0 ] int 
  2256 ;;  width           2   39[BANK0 ] int 
  2257 ;;  prec            2   37[BANK0 ] int 
  2258 ;;  c               1   53[BANK0 ] char 
  2259 ;;  d               1    0        unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    6[BANK0 ] int 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2269 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2270 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2271 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2272 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;Total ram usage:       48 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    4
  2276 ;; This function calls:
  2277 ;;		Absolute function
  2278 ;;		___awdiv
  2279 ;;		___ftadd
  2280 ;;		___ftge
  2281 ;;		___ftmul
  2282 ;;		___ftneg
  2283 ;;		___ftsub
  2284 ;;		___fttol
  2285 ;;		___lldiv
  2286 ;;		___llmod
  2287 ;;		___lltoft
  2288 ;;		___wmul
  2289 ;;		__div_to_l_
  2290 ;;		__tdiv_to_l_
  2291 ;;		_fround
  2292 ;;		_isdigit
  2293 ;;		_putch
  2294 ;;		_scale
  2295 ;; This function is called by:
  2296 ;;		_sprintf
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text8
  2301  0000B0                     __ptext8:
  2302                           	opt stack 0
  2303  0000B0                     __doprnt:
  2304                           	opt stack 24
  2305                           
  2306                           ;doprnt.c: 499: signed char c;
  2307                           ;doprnt.c: 501: int width;
  2308                           ;doprnt.c: 504: int prec;
  2309                           ;doprnt.c: 508: unsigned short flag;
  2310                           ;doprnt.c: 515: char d;
  2311                           ;doprnt.c: 516: double fval, integ;
  2312                           ;doprnt.c: 517: int exp;
  2313                           ;doprnt.c: 518: double ival;
  2314                           ;doprnt.c: 519: union {
  2315                           ;doprnt.c: 520: unsigned long _val;
  2316                           ;doprnt.c: 521: struct {
  2317                           ;doprnt.c: 522: const char * _cp;
  2318                           ;doprnt.c: 523: unsigned _len;
  2319                           ;doprnt.c: 524: } _str;
  2320                           ;doprnt.c: 525: } _val;
  2321                           ;doprnt.c: 545: while(c = *f++) {
  2322                           
  2323                           ;incstack = 0
  2324  0000B0  EF9E  F009         	goto	l4995
  2325  0000B4                     l4625:
  2326                           
  2327                           ;doprnt.c: 547: if(c != '%')
  2328  0000B4  0100               	movlb	0	; () banked
  2329  0000B6  5195               	movf	__doprnt@c& (0+255),w,b
  2330  0000B8  0A25               	xorlw	37
  2331  0000BA  B4D8               	btfsc	status,2,c
  2332  0000BC  D03D               	goto	l4635
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;doprnt.c: 549: {
  2336                           ;doprnt.c: 550: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2337  0000BE  0100               	movlb	0	; () banked
  2338  0000C0  EE20 F002          	lfsr	2,2
  2339  0000C4  0100               	movlb	0	; () banked
  2340  0000C6  5166               	movf	__doprnt@pb& (0+255),w,b
  2341  0000C8  26D9               	addwf	fsr2l,f,c
  2342  0000CA  0100               	movlb	0	; () banked
  2343  0000CC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  2344  0000CE  22DA               	addwfc	fsr2h,f,c
  2345  0000D0  50DE               	movf	postinc2,w,c
  2346  0000D2  10DD               	iorwf	postdec2,w,c
  2347  0000D4  B4D8               	btfsc	status,2,c
  2348  0000D6  D018               	goto	l4631
  2349                           
  2350                           ; BSR set to: 0
  2351  0000D8  0100               	movlb	0	; () banked
  2352  0000DA  EE20 F002          	lfsr	2,2
  2353  0000DE  0100               	movlb	0	; () banked
  2354  0000E0  5166               	movf	__doprnt@pb& (0+255),w,b
  2355  0000E2  26D9               	addwf	fsr2l,f,c
  2356  0000E4  0100               	movlb	0	; () banked
  2357  0000E6  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  2358  0000E8  22DA               	addwfc	fsr2h,f,c
  2359  0000EA  D802               	call	u5418
  2360  0000EC  EF9E  F009         	goto	l4995
  2361  0000F0                     u5418:
  2362  0000F0  0005               	push	
  2363  0000F2  6EFA               	movwf	pclath,c
  2364  0000F4  50DE               	movf	postinc2,w,c
  2365  0000F6  6EFD               	movwf	tosl,c
  2366  0000F8  50DE               	movf	postinc2,w,c
  2367  0000FA  6EFE               	movwf	tosh,c
  2368  0000FC  50F8               	movf	tblptru,w,c
  2369  0000FE  6EFF               	movwf	tosu,c
  2370  000100  50FA               	movf	pclath,w,c
  2371  000102  0100               	movlb	0	; () banked
  2372  000104  5195               	movf	__doprnt@c& (0+255),w,b
  2373  000106  0012               	return		;indir
  2374  000108                     l4631:
  2375  000108  C066  FFD9         	movff	__doprnt@pb,fsr2l
  2376  00010C  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  2377  000110  CFDE F06C          	movff	postinc2,??__doprnt
  2378  000114  CFDD F06D          	movff	postdec2,??__doprnt+1
  2379  000118  C06C  FFD9         	movff	??__doprnt,fsr2l
  2380  00011C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  2381  000120  0100               	movlb	0	; () banked
  2382  000122  C095  FFDF         	movff	__doprnt@c,indf2
  2383                           
  2384                           ; BSR set to: 0
  2385  000126  C066  FFD9         	movff	__doprnt@pb,fsr2l
  2386  00012A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  2387  00012E  2ADE               	incf	postinc2,f,c
  2388  000130  0E00               	movlw	0
  2389  000132  22DD               	addwfc	postdec2,f,c
  2390  000134  EF9E  F009         	goto	l4995
  2391  000138                     l4635:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;doprnt.c: 552: }
  2395                           ;doprnt.c: 555: width = 0;
  2396  000138  0E00               	movlw	0
  2397  00013A  0100               	movlb	0	; () banked
  2398  00013C  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  2399  00013E  0E00               	movlw	0
  2400  000140  0100               	movlb	0	; () banked
  2401  000142  6F87               	movwf	__doprnt@width& (0+255),b
  2402                           
  2403                           ;doprnt.c: 557: flag = 0;
  2404  000144  0E00               	movlw	0
  2405  000146  0100               	movlb	0	; () banked
  2406  000148  6F91               	movwf	(__doprnt@flag+1)& (0+255),b
  2407  00014A  0E00               	movlw	0
  2408  00014C  0100               	movlb	0	; () banked
  2409  00014E  6F90               	movwf	__doprnt@flag& (0+255),b
  2410  000150  D005               	goto	l4641
  2411  000152                     l4637:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 589: flag |= 0x04;
  2415  000152  0100               	movlb	0	; () banked
  2416  000154  8590               	bsf	__doprnt@flag& (0+255),2,b
  2417                           
  2418                           ;doprnt.c: 590: f++;
  2419  000156  0100               	movlb	0	; () banked
  2420  000158  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2421  00015A  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2422  00015C                     l4641:
  2423                           
  2424                           ; BSR set to: 0
  2425  00015C  0100               	movlb	0	; () banked
  2426  00015E  C068  FFF6         	movff	__doprnt@f,tblptrl
  2427  000162  0100               	movlb	0	; () banked
  2428  000164  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2429  000168                     	if	0	;tblptru may be non-zero
  2430  000168                     	endif
  2431  000168                     	if	0	;tblptru may be non-zero
  2432  000168                     	endif
  2433  000168  0008               	tblrd		*
  2434  00016A  50F5               	movf	tablat,w,c
  2435                           
  2436                           ; Switch size 1, requested type "space"
  2437                           ; Number of cases is 1, Range of values is 48 to 48
  2438                           ; switch strategies available:
  2439                           ; Name         Instructions Cycles
  2440                           ; simple_byte            4     3 (average)
  2441                           ;	Chosen strategy is simple_byte
  2442  00016C  0A30               	xorlw	48	; case 48
  2443  00016E  B4D8               	btfsc	status,2,c
  2444  000170  D7F0               	goto	l4637
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2448                           
  2449                           ; BSR set to: 0
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;doprnt.c: 595: }
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 594: break;
  2456  000172  0100               	movlb	0	; () banked
  2457  000174  C068  FFF6         	movff	__doprnt@f,tblptrl
  2458  000178  0100               	movlb	0	; () banked
  2459  00017A  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2460  00017E                     	if	0	;tblptru may be non-zero
  2461  00017E                     	endif
  2462  00017E                     	if	0	;tblptru may be non-zero
  2463  00017E                     	endif
  2464  00017E  0008               	tblrd		*
  2465  000180  50F5               	movf	tablat,w,c
  2466  000182  EC71  F017         	call	_isdigit
  2467  000186  A0D8               	btfss	status,0,c
  2468  000188  D04A               	goto	l4661
  2469                           
  2470                           ;doprnt.c: 607: width = 0;
  2471  00018A  0E00               	movlw	0
  2472  00018C  0100               	movlb	0	; () banked
  2473  00018E  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  2474  000190  0E00               	movlw	0
  2475  000192  0100               	movlb	0	; () banked
  2476  000194  6F87               	movwf	__doprnt@width& (0+255),b
  2477  000196                     l4647:
  2478                           
  2479                           ;doprnt.c: 609: width *= 10;
  2480  000196  C087  F01D         	movff	__doprnt@width,___wmul@multiplier
  2481  00019A  C088  F01E         	movff	__doprnt@width+1,___wmul@multiplier+1
  2482  00019E  0E00               	movlw	0
  2483  0001A0  6E20               	movwf	___wmul@multiplicand+1,c
  2484  0001A2  0E0A               	movlw	10
  2485  0001A4  6E1F               	movwf	___wmul@multiplicand,c
  2486  0001A6  EC16  F017         	call	___wmul	;wreg free
  2487  0001AA  C01D  F087         	movff	?___wmul,__doprnt@width
  2488  0001AE  C01E  F088         	movff	?___wmul+1,__doprnt@width+1
  2489                           
  2490                           ;doprnt.c: 610: width += *f++ - '0';
  2491  0001B2  0ED0               	movlw	208
  2492  0001B4  0100               	movlb	0	; () banked
  2493  0001B6  6F6C               	movwf	??__doprnt& (0+255),b
  2494  0001B8  0EFF               	movlw	255
  2495  0001BA  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  2496  0001BC  0100               	movlb	0	; () banked
  2497  0001BE  C068  FFF6         	movff	__doprnt@f,tblptrl
  2498  0001C2  0100               	movlb	0	; () banked
  2499  0001C4  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2500  0001C8                     	if	0	;tblptru may be non-zero
  2501  0001C8                     	endif
  2502  0001C8                     	if	0	;tblptru may be non-zero
  2503  0001C8                     	endif
  2504  0001C8  0008               	tblrd		*
  2505  0001CA  50F5               	movf	tablat,w,c
  2506  0001CC  0100               	movlb	0	; () banked
  2507  0001CE  6F6E               	movwf	(??__doprnt+2)& (0+255),b
  2508  0001D0  6B6F               	clrf	(??__doprnt+3)& (0+255),b
  2509  0001D2  0100               	movlb	0	; () banked
  2510  0001D4  516C               	movf	??__doprnt& (0+255),w,b
  2511  0001D6  0100               	movlb	0	; () banked
  2512  0001D8  276E               	addwf	(??__doprnt+2)& (0+255),f,b
  2513  0001DA  0100               	movlb	0	; () banked
  2514  0001DC  516D               	movf	(??__doprnt+1)& (0+255),w,b
  2515  0001DE  0100               	movlb	0	; () banked
  2516  0001E0  236F               	addwfc	(??__doprnt+3)& (0+255),f,b
  2517  0001E2  0100               	movlb	0	; () banked
  2518  0001E4  516E               	movf	(??__doprnt+2)& (0+255),w,b
  2519  0001E6  0100               	movlb	0	; () banked
  2520  0001E8  2787               	addwf	__doprnt@width& (0+255),f,b
  2521  0001EA  0100               	movlb	0	; () banked
  2522  0001EC  516F               	movf	(??__doprnt+3)& (0+255),w,b
  2523  0001EE  0100               	movlb	0	; () banked
  2524  0001F0  2388               	addwfc	(__doprnt@width+1)& (0+255),f,b
  2525                           
  2526                           ; BSR set to: 0
  2527  0001F2  0100               	movlb	0	; () banked
  2528  0001F4  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2529  0001F6  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2533  0001F8  0100               	movlb	0	; () banked
  2534  0001FA  C068  FFF6         	movff	__doprnt@f,tblptrl
  2535  0001FE  0100               	movlb	0	; () banked
  2536  000200  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2537  000204                     	if	0	;tblptru may be non-zero
  2538  000204                     	endif
  2539  000204                     	if	0	;tblptru may be non-zero
  2540  000204                     	endif
  2541  000204  0008               	tblrd		*
  2542  000206  50F5               	movf	tablat,w,c
  2543  000208  EC71  F017         	call	_isdigit
  2544  00020C  A0D8               	btfss	status,0,c
  2545  00020E  D007               	goto	l4661
  2546  000210  D7C2               	goto	l4647
  2547  000212                     l4655:
  2548                           
  2549                           ;doprnt.c: 672: flag |= 0x400;
  2550  000212  0100               	movlb	0	; () banked
  2551  000214  8591               	bsf	(__doprnt@flag+1)& (0+255),2,b
  2552                           
  2553                           ;doprnt.c: 673: break;
  2554  000216  D024               	goto	l4663
  2555  000218                     l4657:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 730: flag |= 0x80;
  2559  000218  0100               	movlb	0	; () banked
  2560  00021A  8F90               	bsf	__doprnt@flag& (0+255),7,b
  2561                           
  2562                           ;doprnt.c: 732: break;
  2563  00021C  D021               	goto	l4663
  2564  00021E                     l4661:
  2565  00021E  0100               	movlb	0	; () banked
  2566  000220  C068  FFF6         	movff	__doprnt@f,tblptrl
  2567  000224  0100               	movlb	0	; () banked
  2568  000226  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2569  00022A  0100               	movlb	0	; () banked
  2570  00022C  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2571  00022E  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2572  000230                     	if	0	;tblptru may be non-zero
  2573  000230                     	endif
  2574  000230                     	if	0	;tblptru may be non-zero
  2575  000230                     	endif
  2576  000230  0008               	tblrd		*
  2577  000232  0100               	movlb	0	; () banked
  2578  000234  CFF5 F095          	movff	tablat,__doprnt@c
  2579  000238  0100               	movlb	0	; () banked
  2580  00023A  5195               	movf	__doprnt@c& (0+255),w,b
  2581                           
  2582                           ; Switch size 1, requested type "space"
  2583                           ; Number of cases is 5, Range of values is 0 to 120
  2584                           ; switch strategies available:
  2585                           ; Name         Instructions Cycles
  2586                           ; simple_byte           16     9 (average)
  2587                           ;	Chosen strategy is simple_byte
  2588  00023C  0A00               	xorlw	0	; case 0
  2589  00023E  B4D8               	btfsc	status,2,c
  2590  000240  EFAF  F009         	goto	l4997
  2591  000244  0A64               	xorlw	100	; case 100
  2592  000246  B4D8               	btfsc	status,2,c
  2593  000248  D00B               	goto	l4663
  2594  00024A  0A02               	xorlw	2	; case 102
  2595  00024C  B4D8               	btfsc	status,2,c
  2596  00024E  D7E1               	goto	l4655
  2597  000250  0A0F               	xorlw	15	; case 105
  2598  000252  B4D8               	btfsc	status,2,c
  2599  000254  D005               	goto	l4663
  2600  000256  0A11               	xorlw	17	; case 120
  2601  000258  B4D8               	btfsc	status,2,c
  2602  00025A  D7DE               	goto	l4657
  2603  00025C  EF9E  F009         	goto	l4995
  2604  000260                     l4663:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 834: if(flag & (0x700)) {
  2608  000260  0E07               	movlw	7
  2609  000262  0100               	movlb	0	; () banked
  2610  000264  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  2611  000266  B4D8               	btfsc	status,2,c
  2612  000268  EFA7  F006         	goto	l501
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;doprnt.c: 838: prec = 6;
  2616  00026C  0E00               	movlw	0
  2617  00026E  0100               	movlb	0	; () banked
  2618  000270  6F86               	movwf	(__doprnt@prec+1)& (0+255),b
  2619  000272  0E06               	movlw	6
  2620  000274  0100               	movlb	0	; () banked
  2621  000276  6F85               	movwf	__doprnt@prec& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2625  000278  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  2626  00027C  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  2627  000280  CFDF F06C          	movff	indf2,??__doprnt
  2628  000284  0E03               	movlw	3
  2629  000286  26DE               	addwf	postinc2,f,c
  2630  000288  CFDF F06D          	movff	indf2,??__doprnt+1
  2631  00028C  0E00               	movlw	0
  2632  00028E  22DD               	addwfc	postdec2,f,c
  2633  000290  C06C  FFD9         	movff	??__doprnt,fsr2l
  2634  000294  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  2635  000298  0100               	movlb	0	; () banked
  2636  00029A  CFDE F092          	movff	postinc2,__doprnt@fval
  2637  00029E  0100               	movlb	0	; () banked
  2638  0002A0  CFDE F093          	movff	postinc2,__doprnt@fval+1
  2639  0002A4  0100               	movlb	0	; () banked
  2640  0002A6  CFDD F094          	movff	postdec2,__doprnt@fval+2
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;doprnt.c: 840: if(fval < 0.0) {
  2644  0002AA  0100               	movlb	0	; () banked
  2645  0002AC  5194               	movf	(__doprnt@fval+2)& (0+255),w,b
  2646  0002AE  0A80               	xorlw	128
  2647  0002B0  0F80               	addlw	128
  2648  0002B2  E107               	bnz	u5455
  2649  0002B4  0E00               	movlw	0
  2650  0002B6  0100               	movlb	0	; () banked
  2651  0002B8  5D93               	subwf	(__doprnt@fval+1)& (0+255),w,b
  2652  0002BA  E103               	bnz	u5455
  2653  0002BC  0E00               	movlw	0
  2654  0002BE  0100               	movlb	0	; () banked
  2655  0002C0  5D92               	subwf	__doprnt@fval& (0+255),w,b
  2656  0002C2                     u5455:
  2657  0002C2  B0D8               	btfsc	status,0,c
  2658  0002C4  D011               	goto	l4675
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 841: fval = -fval;
  2662  0002C6  C092  F00F         	movff	__doprnt@fval,___ftneg@f1
  2663  0002CA  C093  F010         	movff	__doprnt@fval+1,___ftneg@f1+1
  2664  0002CE  C094  F011         	movff	__doprnt@fval+2,___ftneg@f1+2
  2665  0002D2  EC29  F017         	call	___ftneg	;wreg free
  2666  0002D6  C00F  F092         	movff	?___ftneg,__doprnt@fval
  2667  0002DA  C010  F093         	movff	?___ftneg+1,__doprnt@fval+1
  2668  0002DE  C011  F094         	movff	?___ftneg+2,__doprnt@fval+2
  2669                           
  2670                           ;doprnt.c: 842: flag |= 0x03;
  2671  0002E2  0E03               	movlw	3
  2672  0002E4  0100               	movlb	0	; () banked
  2673  0002E6  1390               	iorwf	__doprnt@flag& (0+255),f,b
  2674  0002E8                     l4675:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 843: }
  2678                           ;doprnt.c: 844: exp = 0;
  2679  0002E8  0E00               	movlw	0
  2680  0002EA  0100               	movlb	0	; () banked
  2681  0002EC  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  2682  0002EE  0E00               	movlw	0
  2683  0002F0  0100               	movlb	0	; () banked
  2684  0002F2  6F89               	movwf	__doprnt@exp& (0+255),b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;doprnt.c: 845: if( fval!=0) {
  2688  0002F4  0E7F               	movlw	127
  2689  0002F6  0100               	movlb	0	; () banked
  2690  0002F8  1594               	andwf	(__doprnt@fval+2)& (0+255),w,b
  2691  0002FA  0100               	movlb	0	; () banked
  2692  0002FC  1193               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  2693  0002FE  0100               	movlb	0	; () banked
  2694  000300  1192               	iorwf	__doprnt@fval& (0+255),w,b
  2695  000302  B4D8               	btfsc	status,2,c
  2696  000304  D09C               	goto	l4703
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2700  000306  0E82               	movlw	130
  2701  000308  0100               	movlb	0	; () banked
  2702  00030A  6F6C               	movwf	??__doprnt& (0+255),b
  2703  00030C  0EFF               	movlw	255
  2704  00030E  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  2705  000310  0100               	movlb	0	; () banked
  2706  000312  C092  F06E         	movff	__doprnt@fval,??__doprnt+2
  2707  000316  0100               	movlb	0	; () banked
  2708  000318  C093  F06F         	movff	__doprnt@fval+1,??__doprnt+3
  2709  00031C  0100               	movlb	0	; () banked
  2710  00031E  C094  F070         	movff	__doprnt@fval+2,??__doprnt+4
  2711  000322  0100               	movlb	0	; () banked
  2712  000324  C095  F071         	movff	__doprnt@fval+3,??__doprnt+5
  2713  000328  0E10               	movlw	16
  2714  00032A  D006               	goto	u5470
  2715  00032C                     u5475:
  2716  00032C  0100               	movlb	0	; () banked
  2717  00032E  90D8               	bcf	status,0,c
  2718  000330  3371               	rrcf	(??__doprnt+5)& (0+255),f,b
  2719  000332  3370               	rrcf	(??__doprnt+4)& (0+255),f,b
  2720  000334  336F               	rrcf	(??__doprnt+3)& (0+255),f,b
  2721  000336  336E               	rrcf	(??__doprnt+2)& (0+255),f,b
  2722  000338                     u5470:
  2723  000338  2EE8               	decfsz	wreg,f,c
  2724  00033A  D7F8               	goto	u5475
  2725  00033C  0100               	movlb	0	; () banked
  2726  00033E  516E               	movf	(??__doprnt+2)& (0+255),w,b
  2727  000340  0100               	movlb	0	; () banked
  2728  000342  256C               	addwf	??__doprnt& (0+255),w,b
  2729  000344  0100               	movlb	0	; () banked
  2730  000346  6F89               	movwf	__doprnt@exp& (0+255),b
  2731  000348  0E00               	movlw	0
  2732  00034A  0100               	movlb	0	; () banked
  2733  00034C  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  2734  00034E  0100               	movlb	0	; () banked
  2735  000350  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;doprnt.c: 847: exp--;
  2739  000352  0100               	movlb	0	; () banked
  2740  000354  0789               	decf	__doprnt@exp& (0+255),f,b
  2741  000356  A0D8               	btfss	status,0,c
  2742  000358  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;doprnt.c: 848: exp *= 3;
  2746  00035A  C089  F01D         	movff	__doprnt@exp,___wmul@multiplier
  2747  00035E  C08A  F01E         	movff	__doprnt@exp+1,___wmul@multiplier+1
  2748  000362  0E00               	movlw	0
  2749  000364  6E20               	movwf	___wmul@multiplicand+1,c
  2750  000366  0E03               	movlw	3
  2751  000368  6E1F               	movwf	___wmul@multiplicand,c
  2752  00036A  EC16  F017         	call	___wmul	;wreg free
  2753  00036E  C01D  F089         	movff	?___wmul,__doprnt@exp
  2754  000372  C01E  F08A         	movff	?___wmul+1,__doprnt@exp+1
  2755                           
  2756                           ;doprnt.c: 849: exp /= 10;
  2757  000376  C089  F015         	movff	__doprnt@exp,___awdiv@dividend
  2758  00037A  C08A  F016         	movff	__doprnt@exp+1,___awdiv@dividend+1
  2759  00037E  0E00               	movlw	0
  2760  000380  6E18               	movwf	___awdiv@divisor+1,c
  2761  000382  0E0A               	movlw	10
  2762  000384  6E17               	movwf	___awdiv@divisor,c
  2763  000386  EC71  F012         	call	___awdiv	;wreg free
  2764  00038A  C015  F089         	movff	?___awdiv,__doprnt@exp
  2765  00038E  C016  F08A         	movff	?___awdiv+1,__doprnt@exp+1
  2766                           
  2767                           ;doprnt.c: 850: if(exp < 0)
  2768  000392  0100               	movlb	0	; () banked
  2769  000394  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2770  000396  0A80               	xorlw	128
  2771  000398  6EF3               	movwf	prodl,c
  2772  00039A  0E80               	movlw	128
  2773  00039C  5CF3               	subwf	prodl,w,c
  2774  00039E  0E00               	movlw	0
  2775  0003A0  B4D8               	btfsc	status,2,c
  2776  0003A2  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2777  0003A4  B0D8               	btfsc	status,0,c
  2778  0003A6  D004               	goto	l4691
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;doprnt.c: 851: exp--;
  2782  0003A8  0100               	movlb	0	; () banked
  2783  0003AA  0789               	decf	__doprnt@exp& (0+255),f,b
  2784  0003AC  A0D8               	btfss	status,0,c
  2785  0003AE  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2786  0003B0                     l4691:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;doprnt.c: 855: integ = scale(-exp);
  2790  0003B0  0100               	movlb	0	; () banked
  2791  0003B2  5189               	movf	__doprnt@exp& (0+255),w,b
  2792  0003B4  0800               	sublw	0
  2793  0003B6  ECB6  F009         	call	_scale
  2794  0003BA  C039  F082         	movff	?_scale,__doprnt@integ
  2795  0003BE  C03A  F083         	movff	?_scale+1,__doprnt@integ+1
  2796  0003C2  C03B  F084         	movff	?_scale+2,__doprnt@integ+2
  2797                           
  2798                           ;doprnt.c: 856: integ *= fval;
  2799  0003C6  C082  F02A         	movff	__doprnt@integ,___ftmul@f1
  2800  0003CA  C083  F02B         	movff	__doprnt@integ+1,___ftmul@f1+1
  2801  0003CE  C084  F02C         	movff	__doprnt@integ+2,___ftmul@f1+2
  2802  0003D2  C092  F02D         	movff	__doprnt@fval,___ftmul@f2
  2803  0003D6  C093  F02E         	movff	__doprnt@fval+1,___ftmul@f2+1
  2804  0003DA  C094  F02F         	movff	__doprnt@fval+2,___ftmul@f2+2
  2805  0003DE  EC6E  F010         	call	___ftmul	;wreg free
  2806  0003E2  C02A  F082         	movff	?___ftmul,__doprnt@integ
  2807  0003E6  C02B  F083         	movff	?___ftmul+1,__doprnt@integ+1
  2808  0003EA  C02C  F084         	movff	?___ftmul+2,__doprnt@integ+2
  2809                           
  2810                           ;doprnt.c: 857: if(integ < 1.0)
  2811  0003EE  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2812  0003F2  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2813  0003F6  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2814  0003FA  0E00               	movlw	0
  2815  0003FC  6E12               	movwf	___ftge@ff2,c
  2816  0003FE  0E80               	movlw	128
  2817  000400  6E13               	movwf	___ftge@ff2+1,c
  2818  000402  0E3F               	movlw	63
  2819  000404  6E14               	movwf	___ftge@ff2+2,c
  2820  000406  EC0B  F013         	call	___ftge	;wreg free
  2821  00040A  B0D8               	btfsc	status,0,c
  2822  00040C  D005               	goto	l4699
  2823                           
  2824                           ;doprnt.c: 858: exp--;
  2825  00040E  0100               	movlb	0	; () banked
  2826  000410  0789               	decf	__doprnt@exp& (0+255),f,b
  2827  000412  A0D8               	btfss	status,0,c
  2828  000414  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2829  000416  D013               	goto	l4703
  2830  000418                     l4699:
  2831                           
  2832                           ;doprnt.c: 859: else if(integ >= 10.0)
  2833  000418  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2834  00041C  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2835  000420  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2836  000424  0E00               	movlw	0
  2837  000426  6E12               	movwf	___ftge@ff2,c
  2838  000428  0E20               	movlw	32
  2839  00042A  6E13               	movwf	___ftge@ff2+1,c
  2840  00042C  0E41               	movlw	65
  2841  00042E  6E14               	movwf	___ftge@ff2+2,c
  2842  000430  EC0B  F013         	call	___ftge	;wreg free
  2843  000434  A0D8               	btfss	status,0,c
  2844  000436  D003               	goto	l4703
  2845                           
  2846                           ;doprnt.c: 860: exp++;
  2847  000438  0100               	movlb	0	; () banked
  2848  00043A  4B89               	infsnz	__doprnt@exp& (0+255),f,b
  2849  00043C  2B8A               	incf	(__doprnt@exp+1)& (0+255),f,b
  2850  00043E                     l4703:
  2851                           
  2852                           ;doprnt.c: 861: }
  2853                           ;doprnt.c: 1121: if(prec <= 12)
  2854  00043E  0100               	movlb	0	; () banked
  2855  000440  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  2856  000442  0A80               	xorlw	128
  2857  000444  6EF3               	movwf	prodl,c
  2858  000446  0E80               	movlw	128
  2859  000448  5CF3               	subwf	prodl,w,c
  2860  00044A  0E0D               	movlw	13
  2861  00044C  B4D8               	btfsc	status,2,c
  2862  00044E  5D85               	subwf	__doprnt@prec& (0+255),w,b
  2863  000450  B0D8               	btfsc	status,0,c
  2864  000452  D018               	goto	l4707
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 1122: fval += fround(prec);
  2868  000454  C092  F017         	movff	__doprnt@fval,___ftadd@f1
  2869  000458  C093  F018         	movff	__doprnt@fval+1,___ftadd@f1+1
  2870  00045C  C094  F019         	movff	__doprnt@fval+2,___ftadd@f1+2
  2871  000460  0100               	movlb	0	; () banked
  2872  000462  5185               	movf	__doprnt@prec& (0+255),w,b
  2873  000464  ECBA  F00B         	call	_fround
  2874  000468  C039  F01A         	movff	?_fround,___ftadd@f2
  2875  00046C  C03A  F01B         	movff	?_fround+1,___ftadd@f2+1
  2876  000470  C03B  F01C         	movff	?_fround+2,___ftadd@f2+2
  2877  000474  ECE3  F00C         	call	___ftadd	;wreg free
  2878  000478  C017  F092         	movff	?___ftadd,__doprnt@fval
  2879  00047C  C018  F093         	movff	?___ftadd+1,__doprnt@fval+1
  2880  000480  C019  F094         	movff	?___ftadd+2,__doprnt@fval+2
  2881  000484                     l4707:
  2882                           
  2883                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2884  000484  0100               	movlb	0	; () banked
  2885  000486  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2886  000488  0A80               	xorlw	128
  2887  00048A  6EF3               	movwf	prodl,c
  2888  00048C  0E80               	movlw	128
  2889  00048E  5CF3               	subwf	prodl,w,c
  2890  000490  0E0A               	movlw	10
  2891  000492  B4D8               	btfsc	status,2,c
  2892  000494  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2893  000496  B0D8               	btfsc	status,0,c
  2894  000498  D029               	goto	l4715
  2895                           
  2896                           ; BSR set to: 0
  2897  00049A  0E7F               	movlw	127
  2898  00049C  0100               	movlb	0	; () banked
  2899  00049E  1594               	andwf	(__doprnt@fval+2)& (0+255),w,b
  2900  0004A0  0100               	movlb	0	; () banked
  2901  0004A2  1193               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  2902  0004A4  0100               	movlb	0	; () banked
  2903  0004A6  1192               	iorwf	__doprnt@fval& (0+255),w,b
  2904  0004A8  B4D8               	btfsc	status,2,c
  2905  0004AA  D06C               	goto	l4731
  2906                           
  2907                           ; BSR set to: 0
  2908  0004AC  C092  F040         	movff	__doprnt@fval,___fttol@f1
  2909  0004B0  C093  F041         	movff	__doprnt@fval+1,___fttol@f1+1
  2910  0004B4  C094  F042         	movff	__doprnt@fval+2,___fttol@f1+2
  2911  0004B8  EC3A  F00F         	call	___fttol	;wreg free
  2912  0004BC  C040  F06C         	movff	?___fttol,??__doprnt
  2913  0004C0  C041  F06D         	movff	?___fttol+1,??__doprnt+1
  2914  0004C4  C042  F06E         	movff	?___fttol+2,??__doprnt+2
  2915  0004C8  C043  F06F         	movff	?___fttol+3,??__doprnt+3
  2916  0004CC  0100               	movlb	0	; () banked
  2917  0004CE  516F               	movf	(??__doprnt+3)& (0+255),w,b
  2918  0004D0  116C               	iorwf	??__doprnt& (0+255),w,b
  2919  0004D2  116D               	iorwf	(??__doprnt+1)& (0+255),w,b
  2920  0004D4  116E               	iorwf	(??__doprnt+2)& (0+255),w,b
  2921  0004D6  A4D8               	btfss	status,2,c
  2922  0004D8  D055               	goto	l4731
  2923                           
  2924                           ; BSR set to: 0
  2925  0004DA  0100               	movlb	0	; () banked
  2926  0004DC  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2927  0004DE  0A80               	xorlw	128
  2928  0004E0  0F80               	addlw	-128
  2929  0004E2  0E02               	movlw	2
  2930  0004E4  B4D8               	btfsc	status,2,c
  2931  0004E6  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2932  0004E8  A0D8               	btfss	status,0,c
  2933  0004EA  D04C               	goto	l4731
  2934  0004EC                     l4715:
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2938  0004EC  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2939  0004F0  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2940  0004F4  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2941  0004F8  0E70               	movlw	112
  2942  0004FA  6E12               	movwf	___ftge@ff2,c
  2943  0004FC  0E89               	movlw	137
  2944  0004FE  6E13               	movwf	___ftge@ff2+1,c
  2945  000500  0E40               	movlw	64
  2946  000502  6E14               	movwf	___ftge@ff2+2,c
  2947  000504  EC0B  F013         	call	___ftge	;wreg free
  2948  000508  B0D8               	btfsc	status,0,c
  2949  00050A  D003               	goto	l4719
  2950                           
  2951                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2952  00050C  0100               	movlb	0	; () banked
  2953  00050E  0EF7               	movlw	247
  2954  000510  D002               	goto	L1
  2955  000512                     l4719:
  2956                           
  2957                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2958  000512  0100               	movlb	0	; () banked
  2959  000514  0EF8               	movlw	248
  2960  000516                     L1:
  2961  000516  0100               	movlb	0	; () banked
  2962  000518  2789               	addwf	__doprnt@exp& (0+255),f,b
  2963  00051A  0EFF               	movlw	255
  2964  00051C  0100               	movlb	0	; () banked
  2965  00051E  238A               	addwfc	(__doprnt@exp+1)& (0+255),f,b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;doprnt.c: 1133: }
  2969                           ;doprnt.c: 1134: integ = scale(exp);
  2970                           
  2971                           ; BSR set to: 0
  2972  000520  0100               	movlb	0	; () banked
  2973  000522  5189               	movf	__doprnt@exp& (0+255),w,b
  2974  000524  ECB6  F009         	call	_scale
  2975  000528  C039  F082         	movff	?_scale,__doprnt@integ
  2976  00052C  C03A  F083         	movff	?_scale+1,__doprnt@integ+1
  2977  000530  C03B  F084         	movff	?_scale+2,__doprnt@integ+2
  2978                           
  2979                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2980  000534  C092  F00F         	movff	__doprnt@fval,__tdiv_to_l_@f1
  2981  000538  C093  F010         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
  2982  00053C  C094  F011         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
  2983  000540  C082  F012         	movff	__doprnt@integ,__tdiv_to_l_@f2
  2984  000544  C083  F013         	movff	__doprnt@integ+1,__tdiv_to_l_@f2+1
  2985  000548  C084  F014         	movff	__doprnt@integ+2,__tdiv_to_l_@f2+2
  2986  00054C  ECD5  F00F         	call	__tdiv_to_l_	;wreg free
  2987  000550  C00F  F075         	movff	?__tdiv_to_l_,__doprnt$1972
  2988  000554  C010  F076         	movff	?__tdiv_to_l_+1,__doprnt$1972+1
  2989  000558  C011  F077         	movff	?__tdiv_to_l_+2,__doprnt$1972+2
  2990  00055C  C012  F078         	movff	?__tdiv_to_l_+3,__doprnt$1972+3
  2991  000560  C075  F08B         	movff	__doprnt$1972,__doprnt@_val
  2992  000564  C076  F08C         	movff	__doprnt$1972+1,__doprnt@_val+1
  2993  000568  C077  F08D         	movff	__doprnt$1972+2,__doprnt@_val+2
  2994  00056C  C078  F08E         	movff	__doprnt$1972+3,__doprnt@_val+3
  2995                           
  2996                           ;doprnt.c: 1138: fval = 0.0;
  2997  000570  0E00               	movlw	0
  2998  000572  0100               	movlb	0	; () banked
  2999  000574  6F92               	movwf	__doprnt@fval& (0+255),b
  3000  000576  0E00               	movlw	0
  3001  000578  0100               	movlb	0	; () banked
  3002  00057A  6F93               	movwf	(__doprnt@fval+1)& (0+255),b
  3003  00057C  0E00               	movlw	0
  3004  00057E  0100               	movlb	0	; () banked
  3005  000580  6F94               	movwf	(__doprnt@fval+2)& (0+255),b
  3006                           
  3007                           ;doprnt.c: 1139: } else {
  3008  000582  D034               	goto	l4735
  3009  000584                     l4731:
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3013  000584  C092  F040         	movff	__doprnt@fval,___fttol@f1
  3014  000588  C093  F041         	movff	__doprnt@fval+1,___fttol@f1+1
  3015  00058C  C094  F042         	movff	__doprnt@fval+2,___fttol@f1+2
  3016  000590  EC3A  F00F         	call	___fttol	;wreg free
  3017  000594  C040  F08B         	movff	?___fttol,__doprnt@_val
  3018  000598  C041  F08C         	movff	?___fttol+1,__doprnt@_val+1
  3019  00059C  C042  F08D         	movff	?___fttol+2,__doprnt@_val+2
  3020  0005A0  C043  F08E         	movff	?___fttol+3,__doprnt@_val+3
  3021                           
  3022                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3023  0005A4  C092  F023         	movff	__doprnt@fval,___ftsub@f1
  3024  0005A8  C093  F024         	movff	__doprnt@fval+1,___ftsub@f1+1
  3025  0005AC  C094  F025         	movff	__doprnt@fval+2,___ftsub@f1+2
  3026  0005B0  C08B  F017         	movff	__doprnt@_val,___lltoft@c
  3027  0005B4  C08C  F018         	movff	__doprnt@_val+1,___lltoft@c+1
  3028  0005B8  C08D  F019         	movff	__doprnt@_val+2,___lltoft@c+2
  3029  0005BC  C08E  F01A         	movff	__doprnt@_val+3,___lltoft@c+3
  3030  0005C0  EC90  F015         	call	___lltoft	;wreg free
  3031  0005C4  C017  F026         	movff	?___lltoft,___ftsub@f2
  3032  0005C8  C018  F027         	movff	?___lltoft+1,___ftsub@f2+1
  3033  0005CC  C019  F028         	movff	?___lltoft+2,___ftsub@f2+2
  3034  0005D0  ECB8  F016         	call	___ftsub	;wreg free
  3035  0005D4  C023  F092         	movff	?___ftsub,__doprnt@fval
  3036  0005D8  C024  F093         	movff	?___ftsub+1,__doprnt@fval+1
  3037  0005DC  C025  F094         	movff	?___ftsub+2,__doprnt@fval+2
  3038                           
  3039                           ;doprnt.c: 1142: exp = 0;
  3040  0005E0  0E00               	movlw	0
  3041  0005E2  0100               	movlb	0	; () banked
  3042  0005E4  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  3043  0005E6  0E00               	movlw	0
  3044  0005E8  0100               	movlb	0	; () banked
  3045  0005EA  6F89               	movwf	__doprnt@exp& (0+255),b
  3046  0005EC                     l4735:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;doprnt.c: 1143: }
  3050                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3051  0005EC  0E01               	movlw	1
  3052  0005EE  0100               	movlb	0	; () banked
  3053  0005F0  6F95               	movwf	__doprnt@c& (0+255),b
  3054  0005F2                     
  3055                           ; BSR set to: 0
  3056  0005F2  0100               	movlb	0	; () banked
  3057  0005F4  5195               	movf	__doprnt@c& (0+255),w,b
  3058  0005F6  0A0A               	xorlw	10
  3059  0005F8  B4D8               	btfsc	status,2,c
  3060  0005FA  D01E               	goto	l4749
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3064                           
  3065                           ; BSR set to: 0
  3066                           
  3067                           ; BSR set to: 0
  3068  0005FC  0100               	movlb	0	; () banked
  3069  0005FE  5195               	movf	__doprnt@c& (0+255),w,b
  3070  000600  0D04               	mullw	4
  3071  000602  0EDD               	movlw	low _dpowers
  3072  000604  24F3               	addwf	prodl,w,c
  3073  000606  6EF6               	movwf	tblptrl,c
  3074  000608  0E7E               	movlw	high _dpowers
  3075  00060A  20F4               	addwfc	prodh,w,c
  3076  00060C  6EF7               	movwf	tblptrh,c
  3077  00060E                     	if	0	;There are less than 3 active tblptr bytes
  3078  00060E                     	endif
  3079  00060E  0009               	tblrd		*+
  3080  000610  50F5               	movf	tablat,w,c
  3081  000612  0100               	movlb	0	; () banked
  3082  000614  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  3083  000616  0009               	tblrd		*+
  3084  000618  50F5               	movf	tablat,w,c
  3085  00061A  0100               	movlb	0	; () banked
  3086  00061C  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  3087  00061E  0009               	tblrd		*+
  3088  000620  50F5               	movf	tablat,w,c
  3089  000622  0100               	movlb	0	; () banked
  3090  000624  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  3091  000626  0009               	tblrd		*+
  3092  000628  50F5               	movf	tablat,w,c
  3093  00062A  0100               	movlb	0	; () banked
  3094  00062C  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  3095  00062E  A0D8               	btfss	status,0,c
  3096  000630  D003               	goto	l4749
  3097                           
  3098                           ; BSR set to: 0
  3099                           
  3100                           ; BSR set to: 0
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 1147: break;
  3104  000632  0100               	movlb	0	; () banked
  3105  000634  2B95               	incf	__doprnt@c& (0+255),f,b
  3106  000636  D7DD               	goto	L2
  3107  000638                     l4749:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;doprnt.c: 1151: width -= prec + c + exp;
  3111  000638  0100               	movlb	0	; () banked
  3112  00063A  C095  F06C         	movff	__doprnt@c,??__doprnt
  3113  00063E  0100               	movlb	0	; () banked
  3114  000640  6B6D               	clrf	(??__doprnt+1)& (0+255),b
  3115  000642  BF6C               	btfsc	??__doprnt& (0+255),7,b
  3116  000644  076D               	decf	(??__doprnt+1)& (0+255),f,b
  3117  000646  0100               	movlb	0	; () banked
  3118  000648  5185               	movf	__doprnt@prec& (0+255),w,b
  3119  00064A  0100               	movlb	0	; () banked
  3120  00064C  276C               	addwf	??__doprnt& (0+255),f,b
  3121  00064E  0100               	movlb	0	; () banked
  3122  000650  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3123  000652  0100               	movlb	0	; () banked
  3124  000654  236D               	addwfc	(??__doprnt+1)& (0+255),f,b
  3125  000656  0100               	movlb	0	; () banked
  3126  000658  5189               	movf	__doprnt@exp& (0+255),w,b
  3127  00065A  0100               	movlb	0	; () banked
  3128  00065C  276C               	addwf	??__doprnt& (0+255),f,b
  3129  00065E  0100               	movlb	0	; () banked
  3130  000660  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  3131  000662  0100               	movlb	0	; () banked
  3132  000664  236D               	addwfc	(??__doprnt+1)& (0+255),f,b
  3133  000666  0100               	movlb	0	; () banked
  3134  000668  516C               	movf	??__doprnt& (0+255),w,b
  3135  00066A  0100               	movlb	0	; () banked
  3136  00066C  5F87               	subwf	__doprnt@width& (0+255),f,b
  3137  00066E  0100               	movlb	0	; () banked
  3138  000670  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3139  000672  0100               	movlb	0	; () banked
  3140  000674  5B88               	subwfb	(__doprnt@width+1)& (0+255),f,b
  3141                           
  3142                           ;doprnt.c: 1152: if(
  3143                           ;doprnt.c: 1156: prec)
  3144  000676  0100               	movlb	0	; () banked
  3145  000678  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3146  00067A  1185               	iorwf	__doprnt@prec& (0+255),w,b
  3147  00067C  B4D8               	btfsc	status,2,c
  3148  00067E  D004               	goto	l4753
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;doprnt.c: 1157: width--;
  3152  000680  0100               	movlb	0	; () banked
  3153  000682  0787               	decf	__doprnt@width& (0+255),f,b
  3154  000684  A0D8               	btfss	status,0,c
  3155  000686  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3156  000688                     l4753:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;doprnt.c: 1158: if(flag & 0x03)
  3160  000688  0E03               	movlw	3
  3161  00068A  0100               	movlb	0	; () banked
  3162  00068C  1590               	andwf	__doprnt@flag& (0+255),w,b
  3163  00068E  0100               	movlb	0	; () banked
  3164  000690  6F6C               	movwf	??__doprnt& (0+255),b
  3165  000692  0E00               	movlw	0
  3166  000694  0100               	movlb	0	; () banked
  3167  000696  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3168  000698  0100               	movlb	0	; () banked
  3169  00069A  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3170  00069C  0100               	movlb	0	; () banked
  3171  00069E  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3172  0006A0  116C               	iorwf	??__doprnt& (0+255),w,b
  3173  0006A2  B4D8               	btfsc	status,2,c
  3174  0006A4  D004               	goto	l4757
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 1159: width--;
  3178  0006A6  0100               	movlb	0	; () banked
  3179  0006A8  0787               	decf	__doprnt@width& (0+255),f,b
  3180  0006AA  A0D8               	btfss	status,0,c
  3181  0006AC  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3182  0006AE                     l4757:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;doprnt.c: 1162: if(flag & 0x04) {
  3186  0006AE  0100               	movlb	0	; () banked
  3187  0006B0  A590               	btfss	__doprnt@flag& (0+255),2,b
  3188  0006B2  D0CC               	goto	l4791
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;doprnt.c: 1166: if(flag & 0x03)
  3192  0006B4  0E03               	movlw	3
  3193  0006B6  0100               	movlb	0	; () banked
  3194  0006B8  1590               	andwf	__doprnt@flag& (0+255),w,b
  3195  0006BA  0100               	movlb	0	; () banked
  3196  0006BC  6F6C               	movwf	??__doprnt& (0+255),b
  3197  0006BE  0E00               	movlw	0
  3198  0006C0  0100               	movlb	0	; () banked
  3199  0006C2  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3200  0006C4  0100               	movlb	0	; () banked
  3201  0006C6  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3202  0006C8  0100               	movlb	0	; () banked
  3203  0006CA  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3204  0006CC  116C               	iorwf	??__doprnt& (0+255),w,b
  3205  0006CE  B4D8               	btfsc	status,2,c
  3206  0006D0  D075               	goto	l4779
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;doprnt.c: 1168: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3210  0006D2  0100               	movlb	0	; () banked
  3211  0006D4  EE20 F002          	lfsr	2,2
  3212  0006D8  0100               	movlb	0	; () banked
  3213  0006DA  5166               	movf	__doprnt@pb& (0+255),w,b
  3214  0006DC  26D9               	addwf	fsr2l,f,c
  3215  0006DE  0100               	movlb	0	; () banked
  3216  0006E0  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3217  0006E2  22DA               	addwfc	fsr2h,f,c
  3218  0006E4  50DE               	movf	postinc2,w,c
  3219  0006E6  10DD               	iorwf	postdec2,w,c
  3220  0006E8  B4D8               	btfsc	status,2,c
  3221  0006EA  D016               	goto	l4765
  3222                           
  3223                           ; BSR set to: 0
  3224  0006EC  0100               	movlb	0	; () banked
  3225  0006EE  EE20 F002          	lfsr	2,2
  3226  0006F2  0100               	movlb	0	; () banked
  3227  0006F4  5166               	movf	__doprnt@pb& (0+255),w,b
  3228  0006F6  26D9               	addwf	fsr2l,f,c
  3229  0006F8  0100               	movlb	0	; () banked
  3230  0006FA  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3231  0006FC  22DA               	addwfc	fsr2h,f,c
  3232  0006FE  D801               	call	u5658
  3233  000700  D05D               	goto	l4779
  3234  000702                     u5658:
  3235  000702  0005               	push	
  3236  000704  6EFA               	movwf	pclath,c
  3237  000706  50DE               	movf	postinc2,w,c
  3238  000708  6EFD               	movwf	tosl,c
  3239  00070A  50DE               	movf	postinc2,w,c
  3240  00070C  6EFE               	movwf	tosh,c
  3241  00070E  50F8               	movf	tblptru,w,c
  3242  000710  6EFF               	movwf	tosu,c
  3243  000712  50FA               	movf	pclath,w,c
  3244  000714  0E2D               	movlw	45
  3245  000716  0012               	return		;indir
  3246  000718                     l4765:
  3247  000718  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3248  00071C  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3249  000720  CFDE F06C          	movff	postinc2,??__doprnt
  3250  000724  CFDD F06D          	movff	postdec2,??__doprnt+1
  3251  000728  C06C  FFD9         	movff	??__doprnt,fsr2l
  3252  00072C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3253  000730  0E2D               	movlw	45
  3254  000732  6EDF               	movwf	indf2,c
  3255  000734  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3256  000738  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3257  00073C  2ADE               	incf	postinc2,f,c
  3258  00073E  0E00               	movlw	0
  3259  000740  22DD               	addwfc	postdec2,f,c
  3260  000742  D03C               	goto	l4779
  3261  000744                     l4769:
  3262                           
  3263                           ;doprnt.c: 1178: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3264  000744  0100               	movlb	0	; () banked
  3265  000746  EE20 F002          	lfsr	2,2
  3266  00074A  0100               	movlb	0	; () banked
  3267  00074C  5166               	movf	__doprnt@pb& (0+255),w,b
  3268  00074E  26D9               	addwf	fsr2l,f,c
  3269  000750  0100               	movlb	0	; () banked
  3270  000752  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3271  000754  22DA               	addwfc	fsr2h,f,c
  3272  000756  50DE               	movf	postinc2,w,c
  3273  000758  10DD               	iorwf	postdec2,w,c
  3274  00075A  B4D8               	btfsc	status,2,c
  3275  00075C  D016               	goto	l4773
  3276                           
  3277                           ; BSR set to: 0
  3278  00075E  0100               	movlb	0	; () banked
  3279  000760  EE20 F002          	lfsr	2,2
  3280  000764  0100               	movlb	0	; () banked
  3281  000766  5166               	movf	__doprnt@pb& (0+255),w,b
  3282  000768  26D9               	addwf	fsr2l,f,c
  3283  00076A  0100               	movlb	0	; () banked
  3284  00076C  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3285  00076E  22DA               	addwfc	fsr2h,f,c
  3286  000770  D801               	call	u5678
  3287  000772  D020               	goto	l4777
  3288  000774                     u5678:
  3289  000774  0005               	push	
  3290  000776  6EFA               	movwf	pclath,c
  3291  000778  50DE               	movf	postinc2,w,c
  3292  00077A  6EFD               	movwf	tosl,c
  3293  00077C  50DE               	movf	postinc2,w,c
  3294  00077E  6EFE               	movwf	tosh,c
  3295  000780  50F8               	movf	tblptru,w,c
  3296  000782  6EFF               	movwf	tosu,c
  3297  000784  50FA               	movf	pclath,w,c
  3298  000786  0E30               	movlw	48
  3299  000788  0012               	return		;indir
  3300  00078A                     l4773:
  3301  00078A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3302  00078E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3303  000792  CFDE F06C          	movff	postinc2,??__doprnt
  3304  000796  CFDD F06D          	movff	postdec2,??__doprnt+1
  3305  00079A  C06C  FFD9         	movff	??__doprnt,fsr2l
  3306  00079E  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3307  0007A2  0E30               	movlw	48
  3308  0007A4  6EDF               	movwf	indf2,c
  3309  0007A6  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3310  0007AA  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3311  0007AE  2ADE               	incf	postinc2,f,c
  3312  0007B0  0E00               	movlw	0
  3313  0007B2  22DD               	addwfc	postdec2,f,c
  3314  0007B4                     l4777:
  3315                           
  3316                           ;doprnt.c: 1179: width--;
  3317  0007B4  0100               	movlb	0	; () banked
  3318  0007B6  0787               	decf	__doprnt@width& (0+255),f,b
  3319  0007B8  A0D8               	btfss	status,0,c
  3320  0007BA  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3321  0007BC                     l4779:
  3322  0007BC  0100               	movlb	0	; () banked
  3323  0007BE  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  3324  0007C0  0A80               	xorlw	128
  3325  0007C2  6EF3               	movwf	prodl,c
  3326  0007C4  0E80               	movlw	128
  3327  0007C6  5CF3               	subwf	prodl,w,c
  3328  0007C8  0E01               	movlw	1
  3329  0007CA  B4D8               	btfsc	status,2,c
  3330  0007CC  5D87               	subwf	__doprnt@width& (0+255),w,b
  3331  0007CE  A0D8               	btfss	status,0,c
  3332  0007D0  D105               	goto	l4813
  3333  0007D2  D7B8               	goto	l4769
  3334  0007D4                     l4781:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1190: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  3338  0007D4  0100               	movlb	0	; () banked
  3339  0007D6  EE20 F002          	lfsr	2,2
  3340  0007DA  0100               	movlb	0	; () banked
  3341  0007DC  5166               	movf	__doprnt@pb& (0+255),w,b
  3342  0007DE  26D9               	addwf	fsr2l,f,c
  3343  0007E0  0100               	movlb	0	; () banked
  3344  0007E2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3345  0007E4  22DA               	addwfc	fsr2h,f,c
  3346  0007E6  50DE               	movf	postinc2,w,c
  3347  0007E8  10DD               	iorwf	postdec2,w,c
  3348  0007EA  B4D8               	btfsc	status,2,c
  3349  0007EC  D016               	goto	l4785
  3350                           
  3351                           ; BSR set to: 0
  3352  0007EE  0100               	movlb	0	; () banked
  3353  0007F0  EE20 F002          	lfsr	2,2
  3354  0007F4  0100               	movlb	0	; () banked
  3355  0007F6  5166               	movf	__doprnt@pb& (0+255),w,b
  3356  0007F8  26D9               	addwf	fsr2l,f,c
  3357  0007FA  0100               	movlb	0	; () banked
  3358  0007FC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3359  0007FE  22DA               	addwfc	fsr2h,f,c
  3360  000800  D801               	call	u5708
  3361  000802  D020               	goto	l4789
  3362  000804                     u5708:
  3363  000804  0005               	push	
  3364  000806  6EFA               	movwf	pclath,c
  3365  000808  50DE               	movf	postinc2,w,c
  3366  00080A  6EFD               	movwf	tosl,c
  3367  00080C  50DE               	movf	postinc2,w,c
  3368  00080E  6EFE               	movwf	tosh,c
  3369  000810  50F8               	movf	tblptru,w,c
  3370  000812  6EFF               	movwf	tosu,c
  3371  000814  50FA               	movf	pclath,w,c
  3372  000816  0E20               	movlw	32
  3373  000818  0012               	return		;indir
  3374  00081A                     l4785:
  3375  00081A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3376  00081E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3377  000822  CFDE F06C          	movff	postinc2,??__doprnt
  3378  000826  CFDD F06D          	movff	postdec2,??__doprnt+1
  3379  00082A  C06C  FFD9         	movff	??__doprnt,fsr2l
  3380  00082E  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3381  000832  0E20               	movlw	32
  3382  000834  6EDF               	movwf	indf2,c
  3383  000836  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3384  00083A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3385  00083E  2ADE               	incf	postinc2,f,c
  3386  000840  0E00               	movlw	0
  3387  000842  22DD               	addwfc	postdec2,f,c
  3388  000844                     l4789:
  3389                           
  3390                           ;doprnt.c: 1191: width--;
  3391  000844  0100               	movlb	0	; () banked
  3392  000846  0787               	decf	__doprnt@width& (0+255),f,b
  3393  000848  A0D8               	btfss	status,0,c
  3394  00084A  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3395  00084C                     l4791:
  3396                           
  3397                           ; BSR set to: 0
  3398  00084C  0100               	movlb	0	; () banked
  3399  00084E  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  3400  000850  0A80               	xorlw	128
  3401  000852  6EF3               	movwf	prodl,c
  3402  000854  0E80               	movlw	128
  3403  000856  5CF3               	subwf	prodl,w,c
  3404  000858  0E01               	movlw	1
  3405  00085A  B4D8               	btfsc	status,2,c
  3406  00085C  5D87               	subwf	__doprnt@width& (0+255),w,b
  3407  00085E  B0D8               	btfsc	status,0,c
  3408  000860  D7B9               	goto	l4781
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;doprnt.c: 1192: }
  3412                           ;doprnt.c: 1197: if(flag & 0x03)
  3413                           
  3414                           ; BSR set to: 0
  3415  000862  0E03               	movlw	3
  3416  000864  0100               	movlb	0	; () banked
  3417  000866  1590               	andwf	__doprnt@flag& (0+255),w,b
  3418  000868  0100               	movlb	0	; () banked
  3419  00086A  6F6C               	movwf	??__doprnt& (0+255),b
  3420  00086C  0E00               	movlw	0
  3421  00086E  0100               	movlb	0	; () banked
  3422  000870  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3423  000872  0100               	movlb	0	; () banked
  3424  000874  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3425  000876  0100               	movlb	0	; () banked
  3426  000878  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3427  00087A  116C               	iorwf	??__doprnt& (0+255),w,b
  3428  00087C  B4D8               	btfsc	status,2,c
  3429  00087E  D0AE               	goto	l4813
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;doprnt.c: 1199: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3433  000880  0100               	movlb	0	; () banked
  3434  000882  EE20 F002          	lfsr	2,2
  3435  000886  0100               	movlb	0	; () banked
  3436  000888  5166               	movf	__doprnt@pb& (0+255),w,b
  3437  00088A  26D9               	addwf	fsr2l,f,c
  3438  00088C  0100               	movlb	0	; () banked
  3439  00088E  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3440  000890  22DA               	addwfc	fsr2h,f,c
  3441  000892  50DE               	movf	postinc2,w,c
  3442  000894  10DD               	iorwf	postdec2,w,c
  3443  000896  B4D8               	btfsc	status,2,c
  3444  000898  D016               	goto	l4799
  3445                           
  3446                           ; BSR set to: 0
  3447  00089A  0100               	movlb	0	; () banked
  3448  00089C  EE20 F002          	lfsr	2,2
  3449  0008A0  0100               	movlb	0	; () banked
  3450  0008A2  5166               	movf	__doprnt@pb& (0+255),w,b
  3451  0008A4  26D9               	addwf	fsr2l,f,c
  3452  0008A6  0100               	movlb	0	; () banked
  3453  0008A8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3454  0008AA  22DA               	addwfc	fsr2h,f,c
  3455  0008AC  D801               	call	u5748
  3456  0008AE  D096               	goto	l4813
  3457  0008B0                     u5748:
  3458  0008B0  0005               	push	
  3459  0008B2  6EFA               	movwf	pclath,c
  3460  0008B4  50DE               	movf	postinc2,w,c
  3461  0008B6  6EFD               	movwf	tosl,c
  3462  0008B8  50DE               	movf	postinc2,w,c
  3463  0008BA  6EFE               	movwf	tosh,c
  3464  0008BC  50F8               	movf	tblptru,w,c
  3465  0008BE  6EFF               	movwf	tosu,c
  3466  0008C0  50FA               	movf	pclath,w,c
  3467  0008C2  0E2D               	movlw	45
  3468  0008C4  0012               	return		;indir
  3469  0008C6                     l4799:
  3470  0008C6  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3471  0008CA  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3472  0008CE  CFDE F06C          	movff	postinc2,??__doprnt
  3473  0008D2  CFDD F06D          	movff	postdec2,??__doprnt+1
  3474  0008D6  C06C  FFD9         	movff	??__doprnt,fsr2l
  3475  0008DA  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3476  0008DE  0E2D               	movlw	45
  3477  0008E0  D075               	goto	L3
  3478  0008E2                     l4803:
  3479                           
  3480                           ;doprnt.c: 1209: {
  3481                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3482  0008E2  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  3483  0008E6  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  3484  0008EA  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  3485  0008EE  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  3486  0008F2  0100               	movlb	0	; () banked
  3487  0008F4  5195               	movf	__doprnt@c& (0+255),w,b
  3488  0008F6  0D04               	mullw	4
  3489  0008F8  0EDD               	movlw	low _dpowers
  3490  0008FA  24F3               	addwf	prodl,w,c
  3491  0008FC  6EF6               	movwf	tblptrl,c
  3492  0008FE  0E7E               	movlw	high _dpowers
  3493  000900  20F4               	addwfc	prodh,w,c
  3494  000902  6EF7               	movwf	tblptrh,c
  3495  000904                     	if	0	;There are less than 3 active tblptr bytes
  3496  000904                     	endif
  3497  000904  0009               	tblrd		*+
  3498  000906  CFF5 F013          	movff	tablat,___lldiv@divisor
  3499  00090A  0009               	tblrd		*+
  3500  00090C  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3501  000910  0009               	tblrd		*+
  3502  000912  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3503  000916  000A               	tblrd		*-
  3504  000918  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3505  00091C  ECDA  F013         	call	___lldiv
  3506  000920  C00F  F07A         	movff	?___lldiv,__doprnt@vd
  3507  000924  C010  F07B         	movff	?___lldiv+1,__doprnt@vd+1
  3508  000928  C011  F07C         	movff	?___lldiv+2,__doprnt@vd+2
  3509  00092C  C012  F07D         	movff	?___lldiv+3,__doprnt@vd+3
  3510                           
  3511                           ;doprnt.c: 1211: vd %= 10;
  3512  000930  C07A  F01C         	movff	__doprnt@vd,___llmod@dividend
  3513  000934  C07B  F01D         	movff	__doprnt@vd+1,___llmod@dividend+1
  3514  000938  C07C  F01E         	movff	__doprnt@vd+2,___llmod@dividend+2
  3515  00093C  C07D  F01F         	movff	__doprnt@vd+3,___llmod@dividend+3
  3516  000940  0E0A               	movlw	10
  3517  000942  6E20               	movwf	___llmod@divisor,c
  3518  000944  0E00               	movlw	0
  3519  000946  6E21               	movwf	___llmod@divisor+1,c
  3520  000948  0E00               	movlw	0
  3521  00094A  6E22               	movwf	___llmod@divisor+2,c
  3522  00094C  0E00               	movlw	0
  3523  00094E  6E23               	movwf	___llmod@divisor+3,c
  3524  000950  ECC9  F014         	call	___llmod	;wreg free
  3525  000954  C01C  F07A         	movff	?___llmod,__doprnt@vd
  3526  000958  C01D  F07B         	movff	?___llmod+1,__doprnt@vd+1
  3527  00095C  C01E  F07C         	movff	?___llmod+2,__doprnt@vd+2
  3528  000960  C01F  F07D         	movff	?___llmod+3,__doprnt@vd+3
  3529                           
  3530                           ;doprnt.c: 1212: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
  3531  000964  0100               	movlb	0	; () banked
  3532  000966  EE20 F002          	lfsr	2,2
  3533  00096A  0100               	movlb	0	; () banked
  3534  00096C  5166               	movf	__doprnt@pb& (0+255),w,b
  3535  00096E  26D9               	addwf	fsr2l,f,c
  3536  000970  0100               	movlb	0	; () banked
  3537  000972  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3538  000974  22DA               	addwfc	fsr2h,f,c
  3539  000976  50DE               	movf	postinc2,w,c
  3540  000978  10DD               	iorwf	postdec2,w,c
  3541  00097A  B4D8               	btfsc	status,2,c
  3542  00097C  D018               	goto	l4811
  3543                           
  3544                           ; BSR set to: 0
  3545  00097E  0100               	movlb	0	; () banked
  3546  000980  EE20 F002          	lfsr	2,2
  3547  000984  0100               	movlb	0	; () banked
  3548  000986  5166               	movf	__doprnt@pb& (0+255),w,b
  3549  000988  26D9               	addwf	fsr2l,f,c
  3550  00098A  0100               	movlb	0	; () banked
  3551  00098C  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3552  00098E  22DA               	addwfc	fsr2h,f,c
  3553  000990  D801               	call	u5768
  3554  000992  D024               	goto	l4813
  3555  000994                     u5768:
  3556  000994  0005               	push	
  3557  000996  6EFA               	movwf	pclath,c
  3558  000998  50DE               	movf	postinc2,w,c
  3559  00099A  6EFD               	movwf	tosl,c
  3560  00099C  50DE               	movf	postinc2,w,c
  3561  00099E  6EFE               	movwf	tosh,c
  3562  0009A0  50F8               	movf	tblptru,w,c
  3563  0009A2  6EFF               	movwf	tosu,c
  3564  0009A4  50FA               	movf	pclath,w,c
  3565  0009A6  0100               	movlb	0	; () banked
  3566  0009A8  517A               	movf	__doprnt@vd& (0+255),w,b
  3567  0009AA  0F30               	addlw	48
  3568  0009AC  0012               	return		;indir
  3569  0009AE                     l4811:
  3570  0009AE  0100               	movlb	0	; () banked
  3571  0009B0  517A               	movf	__doprnt@vd& (0+255),w,b
  3572  0009B2  0F30               	addlw	48
  3573  0009B4  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3574  0009B8  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3575  0009BC  CFDE F06C          	movff	postinc2,??__doprnt
  3576  0009C0  CFDD F06D          	movff	postdec2,??__doprnt+1
  3577  0009C4  C06C  FFD9         	movff	??__doprnt,fsr2l
  3578  0009C8  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3579  0009CC                     L3:
  3580  0009CC  6EDF               	movwf	indf2,c
  3581  0009CE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3582  0009D2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3583  0009D6  2ADE               	incf	postinc2,f,c
  3584  0009D8  0E00               	movlw	0
  3585  0009DA  22DD               	addwfc	postdec2,f,c
  3586  0009DC                     l4813:
  3587  0009DC  0100               	movlb	0	; () banked
  3588  0009DE  0795               	decf	__doprnt@c& (0+255),f,b
  3589  0009E0  0100               	movlb	0	; () banked
  3590  0009E2  2995               	incf	__doprnt@c& (0+255),w,b
  3591  0009E4  B4D8               	btfsc	status,2,c
  3592  0009E6  D03D               	goto	l4825
  3593  0009E8  D77C               	goto	l4803
  3594  0009EA                     l4815:
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;doprnt.c: 1217: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3598  0009EA  0100               	movlb	0	; () banked
  3599  0009EC  EE20 F002          	lfsr	2,2
  3600  0009F0  0100               	movlb	0	; () banked
  3601  0009F2  5166               	movf	__doprnt@pb& (0+255),w,b
  3602  0009F4  26D9               	addwf	fsr2l,f,c
  3603  0009F6  0100               	movlb	0	; () banked
  3604  0009F8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3605  0009FA  22DA               	addwfc	fsr2h,f,c
  3606  0009FC  50DE               	movf	postinc2,w,c
  3607  0009FE  10DD               	iorwf	postdec2,w,c
  3608  000A00  B4D8               	btfsc	status,2,c
  3609  000A02  D016               	goto	l4819
  3610                           
  3611                           ; BSR set to: 0
  3612  000A04  0100               	movlb	0	; () banked
  3613  000A06  EE20 F002          	lfsr	2,2
  3614  000A0A  0100               	movlb	0	; () banked
  3615  000A0C  5166               	movf	__doprnt@pb& (0+255),w,b
  3616  000A0E  26D9               	addwf	fsr2l,f,c
  3617  000A10  0100               	movlb	0	; () banked
  3618  000A12  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3619  000A14  22DA               	addwfc	fsr2h,f,c
  3620  000A16  D801               	call	u5798
  3621  000A18  D020               	goto	l4823
  3622  000A1A                     u5798:
  3623  000A1A  0005               	push	
  3624  000A1C  6EFA               	movwf	pclath,c
  3625  000A1E  50DE               	movf	postinc2,w,c
  3626  000A20  6EFD               	movwf	tosl,c
  3627  000A22  50DE               	movf	postinc2,w,c
  3628  000A24  6EFE               	movwf	tosh,c
  3629  000A26  50F8               	movf	tblptru,w,c
  3630  000A28  6EFF               	movwf	tosu,c
  3631  000A2A  50FA               	movf	pclath,w,c
  3632  000A2C  0E30               	movlw	48
  3633  000A2E  0012               	return		;indir
  3634  000A30                     l4819:
  3635  000A30  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3636  000A34  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3637  000A38  CFDE F06C          	movff	postinc2,??__doprnt
  3638  000A3C  CFDD F06D          	movff	postdec2,??__doprnt+1
  3639  000A40  C06C  FFD9         	movff	??__doprnt,fsr2l
  3640  000A44  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3641  000A48  0E30               	movlw	48
  3642  000A4A  6EDF               	movwf	indf2,c
  3643  000A4C  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3644  000A50  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3645  000A54  2ADE               	incf	postinc2,f,c
  3646  000A56  0E00               	movlw	0
  3647  000A58  22DD               	addwfc	postdec2,f,c
  3648  000A5A                     l4823:
  3649                           
  3650                           ;doprnt.c: 1218: exp--;
  3651  000A5A  0100               	movlb	0	; () banked
  3652  000A5C  0789               	decf	__doprnt@exp& (0+255),f,b
  3653  000A5E  A0D8               	btfss	status,0,c
  3654  000A60  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  3655  000A62                     l4825:
  3656                           
  3657                           ; BSR set to: 0
  3658  000A62  0100               	movlb	0	; () banked
  3659  000A64  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  3660  000A66  0A80               	xorlw	128
  3661  000A68  6EF3               	movwf	prodl,c
  3662  000A6A  0E80               	movlw	128
  3663  000A6C  5CF3               	subwf	prodl,w,c
  3664  000A6E  0E01               	movlw	1
  3665  000A70  B4D8               	btfsc	status,2,c
  3666  000A72  5D89               	subwf	__doprnt@exp& (0+255),w,b
  3667  000A74  B0D8               	btfsc	status,0,c
  3668  000A76  D7B9               	goto	l4815
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;doprnt.c: 1219: }
  3672                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3673                           
  3674                           ; BSR set to: 0
  3675  000A78  0100               	movlb	0	; () banked
  3676  000A7A  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3677  000A7C  0A80               	xorlw	128
  3678  000A7E  0F80               	addlw	-128
  3679  000A80  0E09               	movlw	9
  3680  000A82  B4D8               	btfsc	status,2,c
  3681  000A84  5D85               	subwf	__doprnt@prec& (0+255),w,b
  3682  000A86  A0D8               	btfss	status,0,c
  3683  000A88  D004               	goto	l552
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3687  000A8A  0E08               	movlw	8
  3688  000A8C  0100               	movlb	0	; () banked
  3689  000A8E  6F95               	movwf	__doprnt@c& (0+255),b
  3690  000A90  D002               	goto	l4831
  3691  000A92                     l552:
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;doprnt.c: 1222: else
  3695                           ;doprnt.c: 1223: c = prec;
  3696  000A92  C085  F095         	movff	__doprnt@prec,__doprnt@c
  3697  000A96                     l4831:
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;doprnt.c: 1224: prec -= c;
  3701  000A96  0100               	movlb	0	; () banked
  3702  000A98  5195               	movf	__doprnt@c& (0+255),w,b
  3703  000A9A  0100               	movlb	0	; () banked
  3704  000A9C  5F85               	subwf	__doprnt@prec& (0+255),f,b
  3705  000A9E  0E00               	movlw	0
  3706  000AA0  0100               	movlb	0	; () banked
  3707  000AA2  BF95               	btfsc	__doprnt@c& (0+255),7,b
  3708  000AA4  0EFF               	movlw	255
  3709  000AA6  0100               	movlb	0	; () banked
  3710  000AA8  5B86               	subwfb	(__doprnt@prec+1)& (0+255),f,b
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;doprnt.c: 1228: if(c)
  3714  000AAA  0100               	movlb	0	; () banked
  3715  000AAC  5195               	movf	__doprnt@c& (0+255),w,b
  3716  000AAE  B4D8               	btfsc	status,2,c
  3717  000AB0  D038               	goto	l4843
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;doprnt.c: 1230: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
  3721  000AB2  0100               	movlb	0	; () banked
  3722  000AB4  EE20 F002          	lfsr	2,2
  3723  000AB8  0100               	movlb	0	; () banked
  3724  000ABA  5166               	movf	__doprnt@pb& (0+255),w,b
  3725  000ABC  26D9               	addwf	fsr2l,f,c
  3726  000ABE  0100               	movlb	0	; () banked
  3727  000AC0  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3728  000AC2  22DA               	addwfc	fsr2h,f,c
  3729  000AC4  50DE               	movf	postinc2,w,c
  3730  000AC6  10DD               	iorwf	postdec2,w,c
  3731  000AC8  B4D8               	btfsc	status,2,c
  3732  000ACA  D016               	goto	l4839
  3733                           
  3734                           ; BSR set to: 0
  3735  000ACC  0100               	movlb	0	; () banked
  3736  000ACE  EE20 F002          	lfsr	2,2
  3737  000AD2  0100               	movlb	0	; () banked
  3738  000AD4  5166               	movf	__doprnt@pb& (0+255),w,b
  3739  000AD6  26D9               	addwf	fsr2l,f,c
  3740  000AD8  0100               	movlb	0	; () banked
  3741  000ADA  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3742  000ADC  22DA               	addwfc	fsr2h,f,c
  3743  000ADE  D801               	call	u5848
  3744  000AE0  D020               	goto	l4843
  3745  000AE2                     u5848:
  3746  000AE2  0005               	push	
  3747  000AE4  6EFA               	movwf	pclath,c
  3748  000AE6  50DE               	movf	postinc2,w,c
  3749  000AE8  6EFD               	movwf	tosl,c
  3750  000AEA  50DE               	movf	postinc2,w,c
  3751  000AEC  6EFE               	movwf	tosh,c
  3752  000AEE  50F8               	movf	tblptru,w,c
  3753  000AF0  6EFF               	movwf	tosu,c
  3754  000AF2  50FA               	movf	pclath,w,c
  3755  000AF4  0E2E               	movlw	46
  3756  000AF6  0012               	return		;indir
  3757  000AF8                     l4839:
  3758  000AF8  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3759  000AFC  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3760  000B00  CFDE F06C          	movff	postinc2,??__doprnt
  3761  000B04  CFDD F06D          	movff	postdec2,??__doprnt+1
  3762  000B08  C06C  FFD9         	movff	??__doprnt,fsr2l
  3763  000B0C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3764  000B10  0E2E               	movlw	46
  3765  000B12  6EDF               	movwf	indf2,c
  3766  000B14  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3767  000B18  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3768  000B1C  2ADE               	incf	postinc2,f,c
  3769  000B1E  0E00               	movlw	0
  3770  000B20  22DD               	addwfc	postdec2,f,c
  3771  000B22                     l4843:
  3772                           
  3773                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3774  000B22  0100               	movlb	0	; () banked
  3775  000B24  5195               	movf	__doprnt@c& (0+255),w,b
  3776  000B26  ECB6  F009         	call	_scale
  3777  000B2A  C039  F072         	movff	?_scale,__doprnt$2567
  3778  000B2E  C03A  F073         	movff	?_scale+1,__doprnt$2567+1
  3779  000B32  C03B  F074         	movff	?_scale+2,__doprnt$2567+2
  3780                           
  3781                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3782  000B36  C092  F02D         	movff	__doprnt@fval,___ftmul@f2
  3783  000B3A  C093  F02E         	movff	__doprnt@fval+1,___ftmul@f2+1
  3784  000B3E  C094  F02F         	movff	__doprnt@fval+2,___ftmul@f2+2
  3785  000B42  C072  F02A         	movff	__doprnt$2567,___ftmul@f1
  3786  000B46  C073  F02B         	movff	__doprnt$2567+1,___ftmul@f1+1
  3787  000B4A  C074  F02C         	movff	__doprnt$2567+2,___ftmul@f1+2
  3788  000B4E  EC6E  F010         	call	___ftmul	;wreg free
  3789  000B52  C02A  F040         	movff	?___ftmul,___fttol@f1
  3790  000B56  C02B  F041         	movff	?___ftmul+1,___fttol@f1+1
  3791  000B5A  C02C  F042         	movff	?___ftmul+2,___fttol@f1+2
  3792  000B5E  EC3A  F00F         	call	___fttol	;wreg free
  3793  000B62  C040  F08B         	movff	?___fttol,__doprnt@_val
  3794  000B66  C041  F08C         	movff	?___fttol+1,__doprnt@_val+1
  3795  000B6A  C042  F08D         	movff	?___fttol+2,__doprnt@_val+2
  3796  000B6E  C043  F08E         	movff	?___fttol+3,__doprnt@_val+3
  3797                           
  3798                           ;doprnt.c: 1237: while(c--) {
  3799  000B72  D0A4               	goto	l4859
  3800  000B74                     l4847:
  3801                           
  3802                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3803  000B74  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  3804  000B78  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  3805  000B7C  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  3806  000B80  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  3807  000B84  0100               	movlb	0	; () banked
  3808  000B86  5195               	movf	__doprnt@c& (0+255),w,b
  3809  000B88  0D04               	mullw	4
  3810  000B8A  0EDD               	movlw	low _dpowers
  3811  000B8C  24F3               	addwf	prodl,w,c
  3812  000B8E  6EF6               	movwf	tblptrl,c
  3813  000B90  0E7E               	movlw	high _dpowers
  3814  000B92  20F4               	addwfc	prodh,w,c
  3815  000B94  6EF7               	movwf	tblptrh,c
  3816  000B96                     	if	0	;There are less than 3 active tblptr bytes
  3817  000B96                     	endif
  3818  000B96  0009               	tblrd		*+
  3819  000B98  CFF5 F013          	movff	tablat,___lldiv@divisor
  3820  000B9C  0009               	tblrd		*+
  3821  000B9E  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3822  000BA2  0009               	tblrd		*+
  3823  000BA4  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3824  000BA8  000A               	tblrd		*-
  3825  000BAA  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3826  000BAE  ECDA  F013         	call	___lldiv	;wreg free
  3827  000BB2  C00F  F07E         	movff	?___lldiv,__doprnt@vd_1974
  3828  000BB6  C010  F07F         	movff	?___lldiv+1,__doprnt@vd_1974+1
  3829  000BBA  C011  F080         	movff	?___lldiv+2,__doprnt@vd_1974+2
  3830  000BBE  C012  F081         	movff	?___lldiv+3,__doprnt@vd_1974+3
  3831                           
  3832                           ;doprnt.c: 1239: vd %= 10;
  3833  000BC2  C07E  F01C         	movff	__doprnt@vd_1974,___llmod@dividend
  3834  000BC6  C07F  F01D         	movff	__doprnt@vd_1974+1,___llmod@dividend+1
  3835  000BCA  C080  F01E         	movff	__doprnt@vd_1974+2,___llmod@dividend+2
  3836  000BCE  C081  F01F         	movff	__doprnt@vd_1974+3,___llmod@dividend+3
  3837  000BD2  0E0A               	movlw	10
  3838  000BD4  6E20               	movwf	___llmod@divisor,c
  3839  000BD6  0E00               	movlw	0
  3840  000BD8  6E21               	movwf	___llmod@divisor+1,c
  3841  000BDA  0E00               	movlw	0
  3842  000BDC  6E22               	movwf	___llmod@divisor+2,c
  3843  000BDE  0E00               	movlw	0
  3844  000BE0  6E23               	movwf	___llmod@divisor+3,c
  3845  000BE2  ECC9  F014         	call	___llmod	;wreg free
  3846  000BE6  C01C  F07E         	movff	?___llmod,__doprnt@vd_1974
  3847  000BEA  C01D  F07F         	movff	?___llmod+1,__doprnt@vd_1974+1
  3848  000BEE  C01E  F080         	movff	?___llmod+2,__doprnt@vd_1974+2
  3849  000BF2  C01F  F081         	movff	?___llmod+3,__doprnt@vd_1974+3
  3850                           
  3851                           ;doprnt.c: 1240: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
  3852  000BF6  0100               	movlb	0	; () banked
  3853  000BF8  EE20 F002          	lfsr	2,2
  3854  000BFC  0100               	movlb	0	; () banked
  3855  000BFE  5166               	movf	__doprnt@pb& (0+255),w,b
  3856  000C00  26D9               	addwf	fsr2l,f,c
  3857  000C02  0100               	movlb	0	; () banked
  3858  000C04  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3859  000C06  22DA               	addwfc	fsr2h,f,c
  3860  000C08  50DE               	movf	postinc2,w,c
  3861  000C0A  10DD               	iorwf	postdec2,w,c
  3862  000C0C  B4D8               	btfsc	status,2,c
  3863  000C0E  D018               	goto	l4855
  3864                           
  3865                           ; BSR set to: 0
  3866  000C10  0100               	movlb	0	; () banked
  3867  000C12  EE20 F002          	lfsr	2,2
  3868  000C16  0100               	movlb	0	; () banked
  3869  000C18  5166               	movf	__doprnt@pb& (0+255),w,b
  3870  000C1A  26D9               	addwf	fsr2l,f,c
  3871  000C1C  0100               	movlb	0	; () banked
  3872  000C1E  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3873  000C20  22DA               	addwfc	fsr2h,f,c
  3874  000C22  D801               	call	u5868
  3875  000C24  D024               	goto	l4857
  3876  000C26                     u5868:
  3877  000C26  0005               	push	
  3878  000C28  6EFA               	movwf	pclath,c
  3879  000C2A  50DE               	movf	postinc2,w,c
  3880  000C2C  6EFD               	movwf	tosl,c
  3881  000C2E  50DE               	movf	postinc2,w,c
  3882  000C30  6EFE               	movwf	tosh,c
  3883  000C32  50F8               	movf	tblptru,w,c
  3884  000C34  6EFF               	movwf	tosu,c
  3885  000C36  50FA               	movf	pclath,w,c
  3886  000C38  0100               	movlb	0	; () banked
  3887  000C3A  517E               	movf	__doprnt@vd_1974& (0+255),w,b
  3888  000C3C  0F30               	addlw	48
  3889  000C3E  0012               	return		;indir
  3890  000C40                     l4855:
  3891  000C40  0100               	movlb	0	; () banked
  3892  000C42  517E               	movf	__doprnt@vd_1974& (0+255),w,b
  3893  000C44  0F30               	addlw	48
  3894  000C46  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3895  000C4A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3896  000C4E  CFDE F06C          	movff	postinc2,??__doprnt
  3897  000C52  CFDD F06D          	movff	postdec2,??__doprnt+1
  3898  000C56  C06C  FFD9         	movff	??__doprnt,fsr2l
  3899  000C5A  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3900  000C5E  6EDF               	movwf	indf2,c
  3901  000C60  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3902  000C64  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3903  000C68  2ADE               	incf	postinc2,f,c
  3904  000C6A  0E00               	movlw	0
  3905  000C6C  22DD               	addwfc	postdec2,f,c
  3906  000C6E                     l4857:
  3907                           
  3908                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3909  000C6E  C08B  F01C         	movff	__doprnt@_val,___llmod@dividend
  3910  000C72  C08C  F01D         	movff	__doprnt@_val+1,___llmod@dividend+1
  3911  000C76  C08D  F01E         	movff	__doprnt@_val+2,___llmod@dividend+2
  3912  000C7A  C08E  F01F         	movff	__doprnt@_val+3,___llmod@dividend+3
  3913  000C7E  0100               	movlb	0	; () banked
  3914  000C80  5195               	movf	__doprnt@c& (0+255),w,b
  3915  000C82  0D04               	mullw	4
  3916  000C84  0EDD               	movlw	low _dpowers
  3917  000C86  24F3               	addwf	prodl,w,c
  3918  000C88  6EF6               	movwf	tblptrl,c
  3919  000C8A  0E7E               	movlw	high _dpowers
  3920  000C8C  20F4               	addwfc	prodh,w,c
  3921  000C8E  6EF7               	movwf	tblptrh,c
  3922  000C90                     	if	0	;There are less than 3 active tblptr bytes
  3923  000C90                     	endif
  3924  000C90  0009               	tblrd		*+
  3925  000C92  CFF5 F020          	movff	tablat,___llmod@divisor
  3926  000C96  0009               	tblrd		*+
  3927  000C98  CFF5 F021          	movff	tablat,___llmod@divisor+1
  3928  000C9C  0009               	tblrd		*+
  3929  000C9E  CFF5 F022          	movff	tablat,___llmod@divisor+2
  3930  000CA2  000A               	tblrd		*-
  3931  000CA4  CFF5 F023          	movff	tablat,___llmod@divisor+3
  3932  000CA8  ECC9  F014         	call	___llmod
  3933  000CAC  C01C  F08B         	movff	?___llmod,__doprnt@_val
  3934  000CB0  C01D  F08C         	movff	?___llmod+1,__doprnt@_val+1
  3935  000CB4  C01E  F08D         	movff	?___llmod+2,__doprnt@_val+2
  3936  000CB8  C01F  F08E         	movff	?___llmod+3,__doprnt@_val+3
  3937  000CBC                     l4859:
  3938  000CBC  0100               	movlb	0	; () banked
  3939  000CBE  0795               	decf	__doprnt@c& (0+255),f,b
  3940  000CC0  0100               	movlb	0	; () banked
  3941  000CC2  2995               	incf	__doprnt@c& (0+255),w,b
  3942  000CC4  B4D8               	btfsc	status,2,c
  3943  000CC6  D03D               	goto	l4871
  3944  000CC8  D755               	goto	l4847
  3945  000CCA                     l4861:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;doprnt.c: 1245: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3949  000CCA  0100               	movlb	0	; () banked
  3950  000CCC  EE20 F002          	lfsr	2,2
  3951  000CD0  0100               	movlb	0	; () banked
  3952  000CD2  5166               	movf	__doprnt@pb& (0+255),w,b
  3953  000CD4  26D9               	addwf	fsr2l,f,c
  3954  000CD6  0100               	movlb	0	; () banked
  3955  000CD8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3956  000CDA  22DA               	addwfc	fsr2h,f,c
  3957  000CDC  50DE               	movf	postinc2,w,c
  3958  000CDE  10DD               	iorwf	postdec2,w,c
  3959  000CE0  B4D8               	btfsc	status,2,c
  3960  000CE2  D016               	goto	l4865
  3961                           
  3962                           ; BSR set to: 0
  3963  000CE4  0100               	movlb	0	; () banked
  3964  000CE6  EE20 F002          	lfsr	2,2
  3965  000CEA  0100               	movlb	0	; () banked
  3966  000CEC  5166               	movf	__doprnt@pb& (0+255),w,b
  3967  000CEE  26D9               	addwf	fsr2l,f,c
  3968  000CF0  0100               	movlb	0	; () banked
  3969  000CF2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3970  000CF4  22DA               	addwfc	fsr2h,f,c
  3971  000CF6  D801               	call	u5898
  3972  000CF8  D020               	goto	l4869
  3973  000CFA                     u5898:
  3974  000CFA  0005               	push	
  3975  000CFC  6EFA               	movwf	pclath,c
  3976  000CFE  50DE               	movf	postinc2,w,c
  3977  000D00  6EFD               	movwf	tosl,c
  3978  000D02  50DE               	movf	postinc2,w,c
  3979  000D04  6EFE               	movwf	tosh,c
  3980  000D06  50F8               	movf	tblptru,w,c
  3981  000D08  6EFF               	movwf	tosu,c
  3982  000D0A  50FA               	movf	pclath,w,c
  3983  000D0C  0E30               	movlw	48
  3984  000D0E  0012               	return		;indir
  3985  000D10                     l4865:
  3986  000D10  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3987  000D14  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3988  000D18  CFDE F06C          	movff	postinc2,??__doprnt
  3989  000D1C  CFDD F06D          	movff	postdec2,??__doprnt+1
  3990  000D20  C06C  FFD9         	movff	??__doprnt,fsr2l
  3991  000D24  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3992  000D28  0E30               	movlw	48
  3993  000D2A  6EDF               	movwf	indf2,c
  3994  000D2C  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3995  000D30  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3996  000D34  2ADE               	incf	postinc2,f,c
  3997  000D36  0E00               	movlw	0
  3998  000D38  22DD               	addwfc	postdec2,f,c
  3999  000D3A                     l4869:
  4000                           
  4001                           ;doprnt.c: 1246: prec--;
  4002  000D3A  0100               	movlb	0	; () banked
  4003  000D3C  0785               	decf	__doprnt@prec& (0+255),f,b
  4004  000D3E  A0D8               	btfss	status,0,c
  4005  000D40  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4006  000D42                     l4871:
  4007                           
  4008                           ; BSR set to: 0
  4009  000D42  0100               	movlb	0	; () banked
  4010  000D44  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  4011  000D46  1185               	iorwf	__doprnt@prec& (0+255),w,b
  4012  000D48  B4D8               	btfsc	status,2,c
  4013  000D4A  D2F8               	goto	l4995
  4014  000D4C  D7BE               	goto	l4861
  4015  000D4E                     l501:
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;doprnt.c: 1255: }
  4019                           ;doprnt.c: 1260: if((flag & 0x80) == 0x00)
  4020  000D4E  0100               	movlb	0	; () banked
  4021  000D50  BF90               	btfsc	__doprnt@flag& (0+255),7,b
  4022  000D52  D044               	goto	l4881
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;doprnt.c: 1262: {
  4026                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4027  000D54  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  4028  000D58  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4029  000D5C  CFDF F06C          	movff	indf2,??__doprnt
  4030  000D60  0E02               	movlw	2
  4031  000D62  26DE               	addwf	postinc2,f,c
  4032  000D64  CFDF F06D          	movff	indf2,??__doprnt+1
  4033  000D68  0E00               	movlw	0
  4034  000D6A  22DD               	addwfc	postdec2,f,c
  4035  000D6C  C06C  FFD9         	movff	??__doprnt,fsr2l
  4036  000D70  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4037  000D74  0100               	movlb	0	; () banked
  4038  000D76  CFDE F08B          	movff	postinc2,__doprnt@_val
  4039  000D7A  0100               	movlb	0	; () banked
  4040  000D7C  CFDD F08C          	movff	postdec2,__doprnt@_val+1
  4041  000D80  0100               	movlb	0	; () banked
  4042  000D82  0E00               	movlw	0
  4043  000D84  0100               	movlb	0	; () banked
  4044  000D86  BF8C               	btfsc	(__doprnt@_val+1)& (0+255),7,b
  4045  000D88  0EFF               	movlw	-1
  4046  000D8A  0100               	movlb	0	; () banked
  4047  000D8C  6F8D               	movwf	(__doprnt@_val+2)& (0+255),b
  4048  000D8E  0100               	movlb	0	; () banked
  4049  000D90  6F8E               	movwf	(__doprnt@_val+3)& (0+255),b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  4053  000D92  0100               	movlb	0	; () banked
  4054  000D94  518E               	movf	(__doprnt@_val+3)& (0+255),w,b
  4055  000D96  0A80               	xorlw	128
  4056  000D98  0F80               	addlw	128
  4057  000D9A  E10B               	bnz	u5925
  4058  000D9C  0E00               	movlw	0
  4059  000D9E  0100               	movlb	0	; () banked
  4060  000DA0  5D8D               	subwf	(__doprnt@_val+2)& (0+255),w,b
  4061  000DA2  E107               	bnz	u5925
  4062  000DA4  0E00               	movlw	0
  4063  000DA6  0100               	movlb	0	; () banked
  4064  000DA8  5D8C               	subwf	(__doprnt@_val+1)& (0+255),w,b
  4065  000DAA  E103               	bnz	u5925
  4066  000DAC  0E00               	movlw	0
  4067  000DAE  0100               	movlb	0	; () banked
  4068  000DB0  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4069  000DB2                     u5925:
  4070  000DB2  B0D8               	btfsc	status,0,c
  4071  000DB4  D07E               	goto	l4913
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;doprnt.c: 1271: flag |= 0x03;
  4075  000DB6  0E03               	movlw	3
  4076  000DB8  0100               	movlb	0	; () banked
  4077  000DBA  1390               	iorwf	__doprnt@flag& (0+255),f,b
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1272: _val._val = -_val._val;
  4081  000DBC  0100               	movlb	0	; () banked
  4082  000DBE  1F8E               	comf	(__doprnt@_val+3)& (0+255),f,b
  4083  000DC0  0100               	movlb	0	; () banked
  4084  000DC2  1F8D               	comf	(__doprnt@_val+2)& (0+255),f,b
  4085  000DC4  0100               	movlb	0	; () banked
  4086  000DC6  1F8C               	comf	(__doprnt@_val+1)& (0+255),f,b
  4087  000DC8  0100               	movlb	0	; () banked
  4088  000DCA  6D8B               	negf	__doprnt@_val& (0+255),b
  4089  000DCC  0E00               	movlw	0
  4090  000DCE  0100               	movlb	0	; () banked
  4091  000DD0  238C               	addwfc	(__doprnt@_val+1)& (0+255),f,b
  4092  000DD2  0100               	movlb	0	; () banked
  4093  000DD4  238D               	addwfc	(__doprnt@_val+2)& (0+255),f,b
  4094  000DD6  0100               	movlb	0	; () banked
  4095  000DD8  238E               	addwfc	(__doprnt@_val+3)& (0+255),f,b
  4096  000DDA  D06B               	goto	l4913
  4097  000DDC                     l4881:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;doprnt.c: 1277: else
  4101                           ;doprnt.c: 1282: {
  4102                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4103  000DDC  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  4104  000DE0  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4105  000DE4  CFDF F06C          	movff	indf2,??__doprnt
  4106  000DE8  0E02               	movlw	2
  4107  000DEA  26DE               	addwf	postinc2,f,c
  4108  000DEC  CFDF F06D          	movff	indf2,??__doprnt+1
  4109  000DF0  0E00               	movlw	0
  4110  000DF2  22DD               	addwfc	postdec2,f,c
  4111  000DF4  C06C  FFD9         	movff	??__doprnt,fsr2l
  4112  000DF8  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4113  000DFC  CFDE F06E          	movff	postinc2,??__doprnt+2
  4114  000E00  CFDD F06F          	movff	postdec2,??__doprnt+3
  4115  000E04  0100               	movlb	0	; () banked
  4116  000E06  C06E  F08B         	movff	??__doprnt+2,__doprnt@_val
  4117  000E0A  0100               	movlb	0	; () banked
  4118  000E0C  C06F  F08C         	movff	??__doprnt+3,__doprnt@_val+1
  4119  000E10  0100               	movlb	0	; () banked
  4120  000E12  6B8D               	clrf	(__doprnt@_val+2)& (0+255),b
  4121  000E14  0100               	movlb	0	; () banked
  4122  000E16  6B8E               	clrf	(__doprnt@_val+3)& (0+255),b
  4123  000E18  D04C               	goto	l4913
  4124  000E1A                     l4883:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4128  000E1A  0E01               	movlw	1
  4129  000E1C  0100               	movlb	0	; () banked
  4130  000E1E  6F95               	movwf	__doprnt@c& (0+255),b
  4131  000E20                     
  4132                           ; BSR set to: 0
  4133  000E20  0100               	movlb	0	; () banked
  4134  000E22  5195               	movf	__doprnt@c& (0+255),w,b
  4135  000E24  0A0A               	xorlw	10
  4136  000E26  B4D8               	btfsc	status,2,c
  4137  000E28  D04D               	goto	l4915
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4141                           
  4142                           ; BSR set to: 0
  4143                           
  4144                           ; BSR set to: 0
  4145  000E2A  0100               	movlb	0	; () banked
  4146  000E2C  5195               	movf	__doprnt@c& (0+255),w,b
  4147  000E2E  0D04               	mullw	4
  4148  000E30  0EDD               	movlw	low _dpowers
  4149  000E32  24F3               	addwf	prodl,w,c
  4150  000E34  6EF6               	movwf	tblptrl,c
  4151  000E36  0E7E               	movlw	high _dpowers
  4152  000E38  20F4               	addwfc	prodh,w,c
  4153  000E3A  6EF7               	movwf	tblptrh,c
  4154  000E3C                     	if	0	;There are less than 3 active tblptr bytes
  4155  000E3C                     	endif
  4156  000E3C  0009               	tblrd		*+
  4157  000E3E  50F5               	movf	tablat,w,c
  4158  000E40  0100               	movlb	0	; () banked
  4159  000E42  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4160  000E44  0009               	tblrd		*+
  4161  000E46  50F5               	movf	tablat,w,c
  4162  000E48  0100               	movlb	0	; () banked
  4163  000E4A  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  4164  000E4C  0009               	tblrd		*+
  4165  000E4E  50F5               	movf	tablat,w,c
  4166  000E50  0100               	movlb	0	; () banked
  4167  000E52  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  4168  000E54  0009               	tblrd		*+
  4169  000E56  50F5               	movf	tablat,w,c
  4170  000E58  0100               	movlb	0	; () banked
  4171  000E5A  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  4172  000E5C  A0D8               	btfss	status,0,c
  4173  000E5E  D032               	goto	l4915
  4174                           
  4175                           ; BSR set to: 0
  4176                           
  4177                           ; BSR set to: 0
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;doprnt.c: 1316: break;
  4181  000E60  0100               	movlb	0	; () banked
  4182  000E62  2B95               	incf	__doprnt@c& (0+255),f,b
  4183  000E64  D7DD               	goto	L4
  4184  000E66                     l4897:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4188  000E66  0E01               	movlw	1
  4189  000E68  0100               	movlb	0	; () banked
  4190  000E6A  6F95               	movwf	__doprnt@c& (0+255),b
  4191  000E6C                     
  4192                           ; BSR set to: 0
  4193  000E6C  0100               	movlb	0	; () banked
  4194  000E6E  5195               	movf	__doprnt@c& (0+255),w,b
  4195  000E70  0A08               	xorlw	8
  4196  000E72  B4D8               	btfsc	status,2,c
  4197  000E74  D027               	goto	l4915
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  4201                           
  4202                           ; BSR set to: 0
  4203                           
  4204                           ; BSR set to: 0
  4205  000E76  0100               	movlb	0	; () banked
  4206  000E78  5195               	movf	__doprnt@c& (0+255),w,b
  4207  000E7A  0D04               	mullw	4
  4208  000E7C  0E53               	movlw	low _hexpowers
  4209  000E7E  24F3               	addwf	prodl,w,c
  4210  000E80  6EF6               	movwf	tblptrl,c
  4211  000E82  0E7F               	movlw	high _hexpowers
  4212  000E84  20F4               	addwfc	prodh,w,c
  4213  000E86  6EF7               	movwf	tblptrh,c
  4214  000E88                     	if	0	;There are less than 3 active tblptr bytes
  4215  000E88                     	endif
  4216  000E88  0009               	tblrd		*+
  4217  000E8A  50F5               	movf	tablat,w,c
  4218  000E8C  0100               	movlb	0	; () banked
  4219  000E8E  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4220  000E90  0009               	tblrd		*+
  4221  000E92  50F5               	movf	tablat,w,c
  4222  000E94  0100               	movlb	0	; () banked
  4223  000E96  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  4224  000E98  0009               	tblrd		*+
  4225  000E9A  50F5               	movf	tablat,w,c
  4226  000E9C  0100               	movlb	0	; () banked
  4227  000E9E  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  4228  000EA0  0009               	tblrd		*+
  4229  000EA2  50F5               	movf	tablat,w,c
  4230  000EA4  0100               	movlb	0	; () banked
  4231  000EA6  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  4232  000EA8  A0D8               	btfss	status,0,c
  4233  000EAA  D00C               	goto	l4915
  4234                           
  4235                           ; BSR set to: 0
  4236                           
  4237                           ; BSR set to: 0
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;doprnt.c: 1327: break;
  4241  000EAC  0100               	movlb	0	; () banked
  4242  000EAE  2B95               	incf	__doprnt@c& (0+255),f,b
  4243  000EB0  D7DD               	goto	L5
  4244  000EB2                     l4913:
  4245                           
  4246                           ; BSR set to: 0
  4247  000EB2  0100               	movlb	0	; () banked
  4248  000EB4  5190               	movf	__doprnt@flag& (0+255),w,b
  4249  000EB6  0B80               	andlw	128
  4250                           
  4251                           ; Switch size 1, requested type "space"
  4252                           ; Number of cases is 2, Range of values is 0 to 128
  4253                           ; switch strategies available:
  4254                           ; Name         Instructions Cycles
  4255                           ; simple_byte            7     4 (average)
  4256                           ;	Chosen strategy is simple_byte
  4257  000EB8  0A00               	xorlw	0	; case 0
  4258  000EBA  B4D8               	btfsc	status,2,c
  4259  000EBC  D7AE               	goto	l4883
  4260  000EBE  0A80               	xorlw	128	; case 128
  4261  000EC0  B4D8               	btfsc	status,2,c
  4262  000EC2  D7D1               	goto	l4897
  4263  000EC4                     l4915:
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4267  000EC4  0100               	movlb	0	; () banked
  4268  000EC6  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4269  000EC8  1187               	iorwf	__doprnt@width& (0+255),w,b
  4270  000ECA  B4D8               	btfsc	status,2,c
  4271  000ECC  D013               	goto	l4921
  4272                           
  4273                           ; BSR set to: 0
  4274  000ECE  0E03               	movlw	3
  4275  000ED0  0100               	movlb	0	; () banked
  4276  000ED2  1590               	andwf	__doprnt@flag& (0+255),w,b
  4277  000ED4  0100               	movlb	0	; () banked
  4278  000ED6  6F6C               	movwf	??__doprnt& (0+255),b
  4279  000ED8  0E00               	movlw	0
  4280  000EDA  0100               	movlb	0	; () banked
  4281  000EDC  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4282  000EDE  0100               	movlb	0	; () banked
  4283  000EE0  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4284  000EE2  0100               	movlb	0	; () banked
  4285  000EE4  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4286  000EE6  116C               	iorwf	??__doprnt& (0+255),w,b
  4287  000EE8  B4D8               	btfsc	status,2,c
  4288  000EEA  D004               	goto	l4921
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;doprnt.c: 1355: width--;
  4292  000EEC  0100               	movlb	0	; () banked
  4293  000EEE  0787               	decf	__doprnt@width& (0+255),f,b
  4294  000EF0  A0D8               	btfss	status,0,c
  4295  000EF2  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4296  000EF4                     l4921:
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;doprnt.c: 1390: if(width > c)
  4300  000EF4  0E80               	movlw	128
  4301  000EF6  0100               	movlb	0	; () banked
  4302  000EF8  BF95               	btfsc	__doprnt@c& (0+255),7,b
  4303  000EFA  0E7F               	movlw	127
  4304  000EFC  0100               	movlb	0	; () banked
  4305  000EFE  6F6C               	movwf	??__doprnt& (0+255),b
  4306  000F00  0100               	movlb	0	; () banked
  4307  000F02  5187               	movf	__doprnt@width& (0+255),w,b
  4308  000F04  0100               	movlb	0	; () banked
  4309  000F06  5D95               	subwf	__doprnt@c& (0+255),w,b
  4310  000F08  0100               	movlb	0	; () banked
  4311  000F0A  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4312  000F0C  0A80               	xorlw	128
  4313  000F0E  0100               	movlb	0	; () banked
  4314  000F10  596C               	subwfb	??__doprnt& (0+255),w,b
  4315  000F12  B0D8               	btfsc	status,0,c
  4316  000F14  D00B               	goto	l4925
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1391: width -= c;
  4320  000F16  0100               	movlb	0	; () banked
  4321  000F18  5195               	movf	__doprnt@c& (0+255),w,b
  4322  000F1A  0100               	movlb	0	; () banked
  4323  000F1C  5F87               	subwf	__doprnt@width& (0+255),f,b
  4324  000F1E  0E00               	movlw	0
  4325  000F20  0100               	movlb	0	; () banked
  4326  000F22  BF95               	btfsc	__doprnt@c& (0+255),7,b
  4327  000F24  0EFF               	movlw	255
  4328  000F26  0100               	movlb	0	; () banked
  4329  000F28  5B88               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4330  000F2A  D006               	goto	l4927
  4331  000F2C                     l4925:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;doprnt.c: 1392: else
  4335                           ;doprnt.c: 1393: width = 0;
  4336  000F2C  0E00               	movlw	0
  4337  000F2E  0100               	movlb	0	; () banked
  4338  000F30  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  4339  000F32  0E00               	movlw	0
  4340  000F34  0100               	movlb	0	; () banked
  4341  000F36  6F87               	movwf	__doprnt@width& (0+255),b
  4342  000F38                     l4927:
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;doprnt.c: 1396: if(flag & 0x04) {
  4346  000F38  0100               	movlb	0	; () banked
  4347  000F3A  A590               	btfss	__doprnt@flag& (0+255),2,b
  4348  000F3C  D08A               	goto	l4951
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;doprnt.c: 1401: if(flag & 0x03)
  4352  000F3E  0E03               	movlw	3
  4353  000F40  0100               	movlb	0	; () banked
  4354  000F42  1590               	andwf	__doprnt@flag& (0+255),w,b
  4355  000F44  0100               	movlb	0	; () banked
  4356  000F46  6F6C               	movwf	??__doprnt& (0+255),b
  4357  000F48  0E00               	movlw	0
  4358  000F4A  0100               	movlb	0	; () banked
  4359  000F4C  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4360  000F4E  0100               	movlb	0	; () banked
  4361  000F50  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4362  000F52  0100               	movlb	0	; () banked
  4363  000F54  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4364  000F56  116C               	iorwf	??__doprnt& (0+255),w,b
  4365  000F58  B4D8               	btfsc	status,2,c
  4366  000F5A  D038               	goto	l4939
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;doprnt.c: 1402: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4370  000F5C  0100               	movlb	0	; () banked
  4371  000F5E  EE20 F002          	lfsr	2,2
  4372  000F62  0100               	movlb	0	; () banked
  4373  000F64  5166               	movf	__doprnt@pb& (0+255),w,b
  4374  000F66  26D9               	addwf	fsr2l,f,c
  4375  000F68  0100               	movlb	0	; () banked
  4376  000F6A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4377  000F6C  22DA               	addwfc	fsr2h,f,c
  4378  000F6E  50DE               	movf	postinc2,w,c
  4379  000F70  10DD               	iorwf	postdec2,w,c
  4380  000F72  B4D8               	btfsc	status,2,c
  4381  000F74  D016               	goto	l4935
  4382                           
  4383                           ; BSR set to: 0
  4384  000F76  0100               	movlb	0	; () banked
  4385  000F78  EE20 F002          	lfsr	2,2
  4386  000F7C  0100               	movlb	0	; () banked
  4387  000F7E  5166               	movf	__doprnt@pb& (0+255),w,b
  4388  000F80  26D9               	addwf	fsr2l,f,c
  4389  000F82  0100               	movlb	0	; () banked
  4390  000F84  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4391  000F86  22DA               	addwfc	fsr2h,f,c
  4392  000F88  D801               	call	u6058
  4393  000F8A  D020               	goto	l4939
  4394  000F8C                     u6058:
  4395  000F8C  0005               	push	
  4396  000F8E  6EFA               	movwf	pclath,c
  4397  000F90  50DE               	movf	postinc2,w,c
  4398  000F92  6EFD               	movwf	tosl,c
  4399  000F94  50DE               	movf	postinc2,w,c
  4400  000F96  6EFE               	movwf	tosh,c
  4401  000F98  50F8               	movf	tblptru,w,c
  4402  000F9A  6EFF               	movwf	tosu,c
  4403  000F9C  50FA               	movf	pclath,w,c
  4404  000F9E  0E2D               	movlw	45
  4405  000FA0  0012               	return		;indir
  4406  000FA2                     l4935:
  4407  000FA2  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4408  000FA6  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4409  000FAA  CFDE F06C          	movff	postinc2,??__doprnt
  4410  000FAE  CFDD F06D          	movff	postdec2,??__doprnt+1
  4411  000FB2  C06C  FFD9         	movff	??__doprnt,fsr2l
  4412  000FB6  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4413  000FBA  0E2D               	movlw	45
  4414  000FBC  6EDF               	movwf	indf2,c
  4415  000FBE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4416  000FC2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4417  000FC6  2ADE               	incf	postinc2,f,c
  4418  000FC8  0E00               	movlw	0
  4419  000FCA  22DD               	addwfc	postdec2,f,c
  4420  000FCC                     l4939:
  4421                           
  4422                           ;doprnt.c: 1424: if(width)
  4423  000FCC  0100               	movlb	0	; () banked
  4424  000FCE  0100               	movlb	0	; () banked
  4425  000FD0  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4426  000FD2  1187               	iorwf	__doprnt@width& (0+255),w,b
  4427  000FD4  B4D8               	btfsc	status,2,c
  4428  000FD6  D0CA               	goto	l4973
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;doprnt.c: 1426: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ;doprnt.c: 1425: do
  4436  000FD8  0100               	movlb	0	; () banked
  4437  000FDA  EE20 F002          	lfsr	2,2
  4438  000FDE  0100               	movlb	0	; () banked
  4439  000FE0  5166               	movf	__doprnt@pb& (0+255),w,b
  4440  000FE2  26D9               	addwf	fsr2l,f,c
  4441  000FE4  0100               	movlb	0	; () banked
  4442  000FE6  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4443  000FE8  22DA               	addwfc	fsr2h,f,c
  4444  000FEA  50DE               	movf	postinc2,w,c
  4445  000FEC  10DD               	iorwf	postdec2,w,c
  4446  000FEE  B4D8               	btfsc	status,2,c
  4447  000FF0  D016               	goto	l4945
  4448                           
  4449                           ; BSR set to: 0
  4450  000FF2  0100               	movlb	0	; () banked
  4451  000FF4  EE20 F002          	lfsr	2,2
  4452  000FF8  0100               	movlb	0	; () banked
  4453  000FFA  5166               	movf	__doprnt@pb& (0+255),w,b
  4454  000FFC  26D9               	addwf	fsr2l,f,c
  4455  000FFE  0100               	movlb	0	; () banked
  4456  001000  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4457  001002  22DA               	addwfc	fsr2h,f,c
  4458  001004  D801               	call	u6088
  4459  001006  D020               	goto	l4949
  4460  001008                     u6088:
  4461  001008  0005               	push	
  4462  00100A  6EFA               	movwf	pclath,c
  4463  00100C  50DE               	movf	postinc2,w,c
  4464  00100E  6EFD               	movwf	tosl,c
  4465  001010  50DE               	movf	postinc2,w,c
  4466  001012  6EFE               	movwf	tosh,c
  4467  001014  50F8               	movf	tblptru,w,c
  4468  001016  6EFF               	movwf	tosu,c
  4469  001018  50FA               	movf	pclath,w,c
  4470  00101A  0E30               	movlw	48
  4471  00101C  0012               	return		;indir
  4472  00101E                     l4945:
  4473  00101E  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4474  001022  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4475  001026  CFDE F06C          	movff	postinc2,??__doprnt
  4476  00102A  CFDD F06D          	movff	postdec2,??__doprnt+1
  4477  00102E  C06C  FFD9         	movff	??__doprnt,fsr2l
  4478  001032  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4479  001036  0E30               	movlw	48
  4480  001038  6EDF               	movwf	indf2,c
  4481  00103A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4482  00103E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4483  001042  2ADE               	incf	postinc2,f,c
  4484  001044  0E00               	movlw	0
  4485  001046  22DD               	addwfc	postdec2,f,c
  4486  001048                     l4949:
  4487                           
  4488                           ;doprnt.c: 1427: while(--width);
  4489  001048  0100               	movlb	0	; () banked
  4490  00104A  0787               	decf	__doprnt@width& (0+255),f,b
  4491  00104C  A0D8               	btfss	status,0,c
  4492  00104E  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4493  001050  D7BE               	goto	L6
  4494  001052                     l4951:
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;doprnt.c: 1431: {
  4498                           ;doprnt.c: 1433: if(width
  4499                           ;doprnt.c: 1437: )
  4500  001052  0100               	movlb	0	; () banked
  4501  001054  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4502  001056  1187               	iorwf	__doprnt@width& (0+255),w,b
  4503  001058  B4D8               	btfsc	status,2,c
  4504  00105A  D041               	goto	l4963
  4505  00105C                     l4953:
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;doprnt.c: 1439: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4509  00105C  0100               	movlb	0	; () banked
  4510  00105E  EE20 F002          	lfsr	2,2
  4511  001062  0100               	movlb	0	; () banked
  4512  001064  5166               	movf	__doprnt@pb& (0+255),w,b
  4513  001066  26D9               	addwf	fsr2l,f,c
  4514  001068  0100               	movlb	0	; () banked
  4515  00106A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4516  00106C  22DA               	addwfc	fsr2h,f,c
  4517  00106E  50DE               	movf	postinc2,w,c
  4518  001070  10DD               	iorwf	postdec2,w,c
  4519  001072  B4D8               	btfsc	status,2,c
  4520  001074  D016               	goto	l4957
  4521                           
  4522                           ; BSR set to: 0
  4523  001076  0100               	movlb	0	; () banked
  4524  001078  EE20 F002          	lfsr	2,2
  4525  00107C  0100               	movlb	0	; () banked
  4526  00107E  5166               	movf	__doprnt@pb& (0+255),w,b
  4527  001080  26D9               	addwf	fsr2l,f,c
  4528  001082  0100               	movlb	0	; () banked
  4529  001084  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4530  001086  22DA               	addwfc	fsr2h,f,c
  4531  001088  D801               	call	u6128
  4532  00108A  D020               	goto	l4961
  4533  00108C                     u6128:
  4534  00108C  0005               	push	
  4535  00108E  6EFA               	movwf	pclath,c
  4536  001090  50DE               	movf	postinc2,w,c
  4537  001092  6EFD               	movwf	tosl,c
  4538  001094  50DE               	movf	postinc2,w,c
  4539  001096  6EFE               	movwf	tosh,c
  4540  001098  50F8               	movf	tblptru,w,c
  4541  00109A  6EFF               	movwf	tosu,c
  4542  00109C  50FA               	movf	pclath,w,c
  4543  00109E  0E20               	movlw	32
  4544  0010A0  0012               	return		;indir
  4545  0010A2                     l4957:
  4546  0010A2  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4547  0010A6  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4548  0010AA  CFDE F06C          	movff	postinc2,??__doprnt
  4549  0010AE  CFDD F06D          	movff	postdec2,??__doprnt+1
  4550  0010B2  C06C  FFD9         	movff	??__doprnt,fsr2l
  4551  0010B6  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4552  0010BA  0E20               	movlw	32
  4553  0010BC  6EDF               	movwf	indf2,c
  4554  0010BE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4555  0010C2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4556  0010C6  2ADE               	incf	postinc2,f,c
  4557  0010C8  0E00               	movlw	0
  4558  0010CA  22DD               	addwfc	postdec2,f,c
  4559  0010CC                     l4961:
  4560                           
  4561                           ;doprnt.c: 1440: while(--width);
  4562  0010CC  0100               	movlb	0	; () banked
  4563  0010CE  0787               	decf	__doprnt@width& (0+255),f,b
  4564  0010D0  A0D8               	btfss	status,0,c
  4565  0010D2  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4566  0010D4  0100               	movlb	0	; () banked
  4567  0010D6  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4568  0010D8  1187               	iorwf	__doprnt@width& (0+255),w,b
  4569  0010DA  A4D8               	btfss	status,2,c
  4570  0010DC  D7BF               	goto	l4953
  4571  0010DE                     l4963:
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 1447: if(flag & 0x03)
  4575  0010DE  0E03               	movlw	3
  4576  0010E0  0100               	movlb	0	; () banked
  4577  0010E2  1590               	andwf	__doprnt@flag& (0+255),w,b
  4578  0010E4  0100               	movlb	0	; () banked
  4579  0010E6  6F6C               	movwf	??__doprnt& (0+255),b
  4580  0010E8  0E00               	movlw	0
  4581  0010EA  0100               	movlb	0	; () banked
  4582  0010EC  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4583  0010EE  0100               	movlb	0	; () banked
  4584  0010F0  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4585  0010F2  0100               	movlb	0	; () banked
  4586  0010F4  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4587  0010F6  116C               	iorwf	??__doprnt& (0+255),w,b
  4588  0010F8  B4D8               	btfsc	status,2,c
  4589  0010FA  D038               	goto	l4973
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 1448: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4593  0010FC  0100               	movlb	0	; () banked
  4594  0010FE  EE20 F002          	lfsr	2,2
  4595  001102  0100               	movlb	0	; () banked
  4596  001104  5166               	movf	__doprnt@pb& (0+255),w,b
  4597  001106  26D9               	addwf	fsr2l,f,c
  4598  001108  0100               	movlb	0	; () banked
  4599  00110A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4600  00110C  22DA               	addwfc	fsr2h,f,c
  4601  00110E  50DE               	movf	postinc2,w,c
  4602  001110  10DD               	iorwf	postdec2,w,c
  4603  001112  B4D8               	btfsc	status,2,c
  4604  001114  D016               	goto	l4969
  4605                           
  4606                           ; BSR set to: 0
  4607  001116  0100               	movlb	0	; () banked
  4608  001118  EE20 F002          	lfsr	2,2
  4609  00111C  0100               	movlb	0	; () banked
  4610  00111E  5166               	movf	__doprnt@pb& (0+255),w,b
  4611  001120  26D9               	addwf	fsr2l,f,c
  4612  001122  0100               	movlb	0	; () banked
  4613  001124  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4614  001126  22DA               	addwfc	fsr2h,f,c
  4615  001128  D801               	call	u6168
  4616  00112A  D020               	goto	l4973
  4617  00112C                     u6168:
  4618  00112C  0005               	push	
  4619  00112E  6EFA               	movwf	pclath,c
  4620  001130  50DE               	movf	postinc2,w,c
  4621  001132  6EFD               	movwf	tosl,c
  4622  001134  50DE               	movf	postinc2,w,c
  4623  001136  6EFE               	movwf	tosh,c
  4624  001138  50F8               	movf	tblptru,w,c
  4625  00113A  6EFF               	movwf	tosu,c
  4626  00113C  50FA               	movf	pclath,w,c
  4627  00113E  0E2D               	movlw	45
  4628  001140  0012               	return		;indir
  4629  001142                     l4969:
  4630  001142  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4631  001146  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4632  00114A  CFDE F06C          	movff	postinc2,??__doprnt
  4633  00114E  CFDD F06D          	movff	postdec2,??__doprnt+1
  4634  001152  C06C  FFD9         	movff	??__doprnt,fsr2l
  4635  001156  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4636  00115A  0E2D               	movlw	45
  4637  00115C  6EDF               	movwf	indf2,c
  4638  00115E  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4639  001162  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4640  001166  2ADE               	incf	postinc2,f,c
  4641  001168  0E00               	movlw	0
  4642  00116A  22DD               	addwfc	postdec2,f,c
  4643  00116C                     l4973:
  4644                           
  4645                           ;doprnt.c: 1478: }
  4646                           ;doprnt.c: 1481: prec = c;
  4647  00116C  0100               	movlb	0	; () banked
  4648  00116E  5195               	movf	__doprnt@c& (0+255),w,b
  4649  001170  0100               	movlb	0	; () banked
  4650  001172  6F85               	movwf	__doprnt@prec& (0+255),b
  4651  001174  0100               	movlb	0	; () banked
  4652  001176  6B86               	clrf	(__doprnt@prec+1)& (0+255),b
  4653  001178  0100               	movlb	0	; () banked
  4654  00117A  BF85               	btfsc	__doprnt@prec& (0+255),7,b
  4655  00117C  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4656                           
  4657                           ;doprnt.c: 1483: while(prec--) {
  4658  00117E  D0D4               	goto	l4993
  4659  001180                     l4975:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4663  001180  0100               	movlb	0	; () banked
  4664  001182  C085  F06C         	movff	__doprnt@prec,??__doprnt
  4665  001186  0100               	movlb	0	; () banked
  4666  001188  C086  F06D         	movff	__doprnt@prec+1,??__doprnt+1
  4667  00118C  0100               	movlb	0	; () banked
  4668  00118E  90D8               	bcf	status,0,c
  4669  001190  376C               	rlcf	??__doprnt& (0+255),f,b
  4670  001192  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4671  001194  0100               	movlb	0	; () banked
  4672  001196  90D8               	bcf	status,0,c
  4673  001198  376C               	rlcf	??__doprnt& (0+255),f,b
  4674  00119A  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4675  00119C  0EDD               	movlw	low _dpowers
  4676  00119E  0100               	movlb	0	; () banked
  4677  0011A0  256C               	addwf	??__doprnt& (0+255),w,b
  4678  0011A2  6EF6               	movwf	tblptrl,c
  4679  0011A4  0E7E               	movlw	high _dpowers
  4680  0011A6  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4681  0011A8  6EF7               	movwf	tblptrh,c
  4682  0011AA                     	if	0	;There are less than 3 active tblptr bytes
  4683  0011AA                     	endif
  4684  0011AA  0009               	tblrd		*+
  4685  0011AC  CFF5 F013          	movff	tablat,___lldiv@divisor
  4686  0011B0  0009               	tblrd		*+
  4687  0011B2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  4688  0011B6  0009               	tblrd		*+
  4689  0011B8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  4690  0011BC  000A               	tblrd		*-
  4691  0011BE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  4692  0011C2  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  4693  0011C6  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  4694  0011CA  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  4695  0011CE  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  4696  0011D2  ECDA  F013         	call	___lldiv
  4697  0011D6  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  4698  0011DA  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  4699  0011DE  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  4700  0011E2  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  4701  0011E6  0E0A               	movlw	10
  4702  0011E8  6E20               	movwf	___llmod@divisor,c
  4703  0011EA  0E00               	movlw	0
  4704  0011EC  6E21               	movwf	___llmod@divisor+1,c
  4705  0011EE  0E00               	movlw	0
  4706  0011F0  6E22               	movwf	___llmod@divisor+2,c
  4707  0011F2  0E00               	movlw	0
  4708  0011F4  6E23               	movwf	___llmod@divisor+3,c
  4709  0011F6  ECC9  F014         	call	___llmod	;wreg free
  4710  0011FA  C01C  F06E         	movff	?___llmod,??__doprnt+2
  4711  0011FE  C01D  F06F         	movff	?___llmod+1,??__doprnt+3
  4712  001202  C01E  F070         	movff	?___llmod+2,??__doprnt+4
  4713  001206  C01F  F071         	movff	?___llmod+3,??__doprnt+5
  4714  00120A  0100               	movlb	0	; () banked
  4715  00120C  516E               	movf	(??__doprnt+2)& (0+255),w,b
  4716  00120E  0F30               	addlw	48
  4717  001210  0100               	movlb	0	; () banked
  4718  001212  6F95               	movwf	__doprnt@c& (0+255),b
  4719                           
  4720                           ;doprnt.c: 1500: break;
  4721  001214  D04F               	goto	l4985
  4722  001216                     l4977:
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;doprnt.c: 1508: {
  4726                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  4727  001216  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  4728  00121A  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  4729  00121E  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  4730  001222  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  4731  001226  0100               	movlb	0	; () banked
  4732  001228  C085  F06C         	movff	__doprnt@prec,??__doprnt
  4733  00122C  0100               	movlb	0	; () banked
  4734  00122E  C086  F06D         	movff	__doprnt@prec+1,??__doprnt+1
  4735  001232  0100               	movlb	0	; () banked
  4736  001234  90D8               	bcf	status,0,c
  4737  001236  376C               	rlcf	??__doprnt& (0+255),f,b
  4738  001238  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4739  00123A  0100               	movlb	0	; () banked
  4740  00123C  90D8               	bcf	status,0,c
  4741  00123E  376C               	rlcf	??__doprnt& (0+255),f,b
  4742  001240  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4743  001242  0E53               	movlw	low _hexpowers
  4744  001244  0100               	movlb	0	; () banked
  4745  001246  256C               	addwf	??__doprnt& (0+255),w,b
  4746  001248  6EF6               	movwf	tblptrl,c
  4747  00124A  0E7F               	movlw	high _hexpowers
  4748  00124C  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4749  00124E  6EF7               	movwf	tblptrh,c
  4750  001250                     	if	0	;There are less than 3 active tblptr bytes
  4751  001250                     	endif
  4752  001250  0009               	tblrd		*+
  4753  001252  CFF5 F013          	movff	tablat,___lldiv@divisor
  4754  001256  0009               	tblrd		*+
  4755  001258  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  4756  00125C  0009               	tblrd		*+
  4757  00125E  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  4758  001262  000A               	tblrd		*-
  4759  001264  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  4760  001268  ECDA  F013         	call	___lldiv	;wreg free
  4761  00126C  C00F  F06E         	movff	?___lldiv,??__doprnt+2
  4762  001270  C010  F06F         	movff	?___lldiv+1,??__doprnt+3
  4763  001274  C011  F070         	movff	?___lldiv+2,??__doprnt+4
  4764  001278  C012  F071         	movff	?___lldiv+3,??__doprnt+5
  4765  00127C  0100               	movlb	0	; () banked
  4766  00127E  516E               	movf	(??__doprnt+2)& (0+255),w,b
  4767  001280  0B0F               	andlw	15
  4768  001282  0100               	movlb	0	; () banked
  4769  001284  6F79               	movwf	__doprnt@idx& (0+255),b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
  4773  001286  0100               	movlb	0	; () banked
  4774  001288  5179               	movf	__doprnt@idx& (0+255),w,b
  4775  00128A  0D01               	mullw	1
  4776  00128C  0EDB               	movlw	low STR_5
  4777  00128E  24F3               	addwf	prodl,w,c
  4778  001290  6EF6               	movwf	tblptrl,c
  4779  001292  0E7F               	movlw	high STR_5
  4780  001294  20F4               	addwfc	prodh,w,c
  4781  001296  6EF7               	movwf	tblptrh,c
  4782  001298                     	if	0	;There are less than 3 active tblptr bytes
  4783  001298                     	endif
  4784  001298  0008               	tblrd		*
  4785  00129A  0100               	movlb	0	; () banked
  4786  00129C  CFF5 F095          	movff	tablat,__doprnt@c
  4787                           
  4788                           ;doprnt.c: 1517: }
  4789                           ;doprnt.c: 1519: break;
  4790  0012A0  D009               	goto	l4985
  4791  0012A2                     l4983:
  4792                           
  4793                           ; BSR set to: 0
  4794  0012A2  0100               	movlb	0	; () banked
  4795  0012A4  5190               	movf	__doprnt@flag& (0+255),w,b
  4796  0012A6  0B80               	andlw	128
  4797                           
  4798                           ; Switch size 1, requested type "space"
  4799                           ; Number of cases is 2, Range of values is 0 to 128
  4800                           ; switch strategies available:
  4801                           ; Name         Instructions Cycles
  4802                           ; simple_byte            7     4 (average)
  4803                           ;	Chosen strategy is simple_byte
  4804  0012A8  0A00               	xorlw	0	; case 0
  4805  0012AA  B4D8               	btfsc	status,2,c
  4806  0012AC  D769               	goto	l4975
  4807  0012AE  0A80               	xorlw	128	; case 128
  4808  0012B0  B4D8               	btfsc	status,2,c
  4809  0012B2  D7B1               	goto	l4977
  4810  0012B4                     l4985:
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;doprnt.c: 1533: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4814  0012B4  0100               	movlb	0	; () banked
  4815  0012B6  EE20 F002          	lfsr	2,2
  4816  0012BA  0100               	movlb	0	; () banked
  4817  0012BC  5166               	movf	__doprnt@pb& (0+255),w,b
  4818  0012BE  26D9               	addwf	fsr2l,f,c
  4819  0012C0  0100               	movlb	0	; () banked
  4820  0012C2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4821  0012C4  22DA               	addwfc	fsr2h,f,c
  4822  0012C6  50DE               	movf	postinc2,w,c
  4823  0012C8  10DD               	iorwf	postdec2,w,c
  4824  0012CA  B4D8               	btfsc	status,2,c
  4825  0012CC  D017               	goto	l4989
  4826                           
  4827                           ; BSR set to: 0
  4828  0012CE  0100               	movlb	0	; () banked
  4829  0012D0  EE20 F002          	lfsr	2,2
  4830  0012D4  0100               	movlb	0	; () banked
  4831  0012D6  5166               	movf	__doprnt@pb& (0+255),w,b
  4832  0012D8  26D9               	addwf	fsr2l,f,c
  4833  0012DA  0100               	movlb	0	; () banked
  4834  0012DC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4835  0012DE  22DA               	addwfc	fsr2h,f,c
  4836  0012E0  D801               	call	u6188
  4837  0012E2  D022               	goto	l4993
  4838  0012E4                     u6188:
  4839  0012E4  0005               	push	
  4840  0012E6  6EFA               	movwf	pclath,c
  4841  0012E8  50DE               	movf	postinc2,w,c
  4842  0012EA  6EFD               	movwf	tosl,c
  4843  0012EC  50DE               	movf	postinc2,w,c
  4844  0012EE  6EFE               	movwf	tosh,c
  4845  0012F0  50F8               	movf	tblptru,w,c
  4846  0012F2  6EFF               	movwf	tosu,c
  4847  0012F4  50FA               	movf	pclath,w,c
  4848  0012F6  0100               	movlb	0	; () banked
  4849  0012F8  5195               	movf	__doprnt@c& (0+255),w,b
  4850  0012FA  0012               	return		;indir
  4851  0012FC                     l4989:
  4852  0012FC  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4853  001300  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4854  001304  CFDE F06C          	movff	postinc2,??__doprnt
  4855  001308  CFDD F06D          	movff	postdec2,??__doprnt+1
  4856  00130C  C06C  FFD9         	movff	??__doprnt,fsr2l
  4857  001310  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4858  001314  0100               	movlb	0	; () banked
  4859  001316  C095  FFDF         	movff	__doprnt@c,indf2
  4860                           
  4861                           ; BSR set to: 0
  4862  00131A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4863  00131E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4864  001322  2ADE               	incf	postinc2,f,c
  4865  001324  0E00               	movlw	0
  4866  001326  22DD               	addwfc	postdec2,f,c
  4867  001328                     l4993:
  4868  001328  0100               	movlb	0	; () banked
  4869  00132A  0785               	decf	__doprnt@prec& (0+255),f,b
  4870  00132C  A0D8               	btfss	status,0,c
  4871  00132E  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4872  001330  0100               	movlb	0	; () banked
  4873  001332  2985               	incf	__doprnt@prec& (0+255),w,b
  4874  001334  B4D8               	btfsc	status,2,c
  4875  001336  2986               	incf	(__doprnt@prec+1)& (0+255),w,b
  4876  001338  A4D8               	btfss	status,2,c
  4877  00133A  D7B3               	goto	l4983
  4878  00133C                     l4995:
  4879  00133C  0100               	movlb	0	; () banked
  4880  00133E  C068  FFF6         	movff	__doprnt@f,tblptrl
  4881  001342  0100               	movlb	0	; () banked
  4882  001344  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  4883  001348  0100               	movlb	0	; () banked
  4884  00134A  4B68               	infsnz	__doprnt@f& (0+255),f,b
  4885  00134C  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  4886  00134E                     	if	0	;tblptru may be non-zero
  4887  00134E                     	endif
  4888  00134E                     	if	0	;tblptru may be non-zero
  4889  00134E                     	endif
  4890  00134E  0008               	tblrd		*
  4891  001350  0100               	movlb	0	; () banked
  4892  001352  CFF5 F095          	movff	tablat,__doprnt@c
  4893  001356  0100               	movlb	0	; () banked
  4894  001358  6795               	tstfsz	__doprnt@c& (0+255),b
  4895  00135A  EF5A  F000         	goto	l4625
  4896  00135E                     l4997:
  4897                           
  4898                           ;doprnt.c: 1549: return 0;
  4899  00135E  0E00               	movlw	0
  4900  001360  0100               	movlb	0	; () banked
  4901  001362  6F67               	movwf	(?__doprnt+1)& (0+255),b
  4902  001364  0E00               	movlw	0
  4903  001366  0100               	movlb	0	; () banked
  4904  001368  6F66               	movwf	?__doprnt& (0+255),b
  4905  00136A  0012               	return	
  4906  00136C                     __end_of__doprnt:
  4907                           	opt stack 0
  4908                           tosu	equ	0xFFF
  4909                           tosh	equ	0xFFE
  4910                           tosl	equ	0xFFD
  4911                           pclath	equ	0xFFA
  4912                           tblptru	equ	0xFF8
  4913                           tblptrh	equ	0xFF7
  4914                           tblptrl	equ	0xFF6
  4915                           tablat	equ	0xFF5
  4916                           prodh	equ	0xFF4
  4917                           prodl	equ	0xFF3
  4918                           intcon	equ	0xFF2
  4919                           intcon2	equ	0xFF1
  4920                           postinc0	equ	0xFEE
  4921                           wreg	equ	0xFE8
  4922                           postdec1	equ	0xFE5
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _scale *****************
  4932 ;; Defined at:
  4933 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  scl             1    wreg     char 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;  scl             1   62[COMRAM] char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  3   56[COMRAM] char 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4947 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4948 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4950 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4951 ;;Total ram usage:        7 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    3
  4954 ;; This function calls:
  4955 ;;		___awdiv
  4956 ;;		___awmod
  4957 ;;		___ftmul
  4958 ;;		___wmul
  4959 ;; This function is called by:
  4960 ;;		__doprnt
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text9
  4965  00136C                     __ptext9:
  4966                           	opt stack 0
  4967  00136C                     _scale:
  4968                           	opt stack 24
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;incstack = 0
  4972                           ;scale@scl stored from wreg
  4973  00136C  6E3F               	movwf	scale@scl,c
  4974                           
  4975                           ;doprnt.c: 428: if(scl < 0) {
  4976  00136E  AE3F               	btfss	scale@scl,7,c
  4977  001370  D101               	goto	l4495
  4978                           
  4979                           ;doprnt.c: 429: scl = -scl;
  4980  001372  6C3F               	negf	scale@scl,c
  4981                           
  4982                           ;doprnt.c: 430: if(scl>=110)
  4983  001374  503F               	movf	scale@scl,w,c
  4984  001376  0A80               	xorlw	128
  4985  001378  0F12               	addlw	-238
  4986  00137A  A0D8               	btfss	status,0,c
  4987  00137C  D091               	goto	l4485
  4988                           
  4989                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4990  00137E  0E00               	movlw	0
  4991  001380  6E20               	movwf	___wmul@multiplicand+1,c
  4992  001382  0E03               	movlw	3
  4993  001384  6E1F               	movwf	___wmul@multiplicand,c
  4994  001386  0E00               	movlw	0
  4995  001388  6E18               	movwf	___awdiv@divisor+1,c
  4996  00138A  0E0A               	movlw	10
  4997  00138C  6E17               	movwf	___awdiv@divisor,c
  4998  00138E  0E00               	movlw	0
  4999  001390  6E12               	movwf	___awmod@divisor+1,c
  5000  001392  0E64               	movlw	100
  5001  001394  6E11               	movwf	___awmod@divisor,c
  5002  001396  503F               	movf	scale@scl,w,c
  5003  001398  6E0F               	movwf	___awmod@dividend,c
  5004  00139A  6A10               	clrf	___awmod@dividend+1,c
  5005  00139C  BE0F               	btfsc	___awmod@dividend,7,c
  5006  00139E  0610               	decf	___awmod@dividend+1,f,c
  5007  0013A0  ECC3  F012         	call	___awmod
  5008  0013A4  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5009  0013A8  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5010  0013AC  EC71  F012         	call	___awdiv	;wreg free
  5011  0013B0  0E09               	movlw	9
  5012  0013B2  2415               	addwf	?___awdiv,w,c
  5013  0013B4  6E1D               	movwf	___wmul@multiplier,c
  5014  0013B6  0E00               	movlw	0
  5015  0013B8  2016               	addwfc	?___awdiv+1,w,c
  5016  0013BA  6E1E               	movwf	___wmul@multiplier+1,c
  5017  0013BC  EC16  F017         	call	___wmul	;wreg free
  5018  0013C0  0E05               	movlw	low __npowers_
  5019  0013C2  241D               	addwf	?___wmul,w,c
  5020  0013C4  6EF6               	movwf	tblptrl,c
  5021  0013C6  0E7F               	movlw	high __npowers_
  5022  0013C8  201E               	addwfc	?___wmul+1,w,c
  5023  0013CA  6EF7               	movwf	tblptrh,c
  5024  0013CC                     	if	0	;There are less than 3 active tblptr bytes
  5025  0013CC                     	endif
  5026  0013CC  0009               	tblrd		*+
  5027  0013CE  CFF5 F02D          	movff	tablat,___ftmul@f2
  5028  0013D2  0009               	tblrd		*+
  5029  0013D4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5030  0013D8  000A               	tblrd		*-
  5031  0013DA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5032  0013DE  0E00               	movlw	0
  5033  0013E0  6E18               	movwf	___awdiv@divisor+1,c
  5034  0013E2  0E64               	movlw	100
  5035  0013E4  6E17               	movwf	___awdiv@divisor,c
  5036  0013E6  503F               	movf	scale@scl,w,c
  5037  0013E8  6E15               	movwf	___awdiv@dividend,c
  5038  0013EA  6A16               	clrf	___awdiv@dividend+1,c
  5039  0013EC  BE15               	btfsc	___awdiv@dividend,7,c
  5040  0013EE  0616               	decf	___awdiv@dividend+1,f,c
  5041  0013F0  EC71  F012         	call	___awdiv	;wreg free
  5042  0013F4  0E12               	movlw	18
  5043  0013F6  2415               	addwf	?___awdiv,w,c
  5044  0013F8  6E1D               	movwf	___wmul@multiplier,c
  5045  0013FA  0E00               	movlw	0
  5046  0013FC  2016               	addwfc	?___awdiv+1,w,c
  5047  0013FE  6E1E               	movwf	___wmul@multiplier+1,c
  5048  001400  0E00               	movlw	0
  5049  001402  6E20               	movwf	___wmul@multiplicand+1,c
  5050  001404  0E03               	movlw	3
  5051  001406  6E1F               	movwf	___wmul@multiplicand,c
  5052  001408  EC16  F017         	call	___wmul	;wreg free
  5053  00140C  0E05               	movlw	low __npowers_
  5054  00140E  241D               	addwf	?___wmul,w,c
  5055  001410  6EF6               	movwf	tblptrl,c
  5056  001412  0E7F               	movlw	high __npowers_
  5057  001414  201E               	addwfc	?___wmul+1,w,c
  5058  001416  6EF7               	movwf	tblptrh,c
  5059  001418                     	if	0	;There are less than 3 active tblptr bytes
  5060  001418                     	endif
  5061  001418  0009               	tblrd		*+
  5062  00141A  CFF5 F02A          	movff	tablat,___ftmul@f1
  5063  00141E  0009               	tblrd		*+
  5064  001420  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5065  001424  000A               	tblrd		*-
  5066  001426  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5067  00142A  EC6E  F010         	call	___ftmul	;wreg free
  5068  00142E  C02A  F03C         	movff	?___ftmul,_scale$2566
  5069  001432  C02B  F03D         	movff	?___ftmul+1,_scale$2566+1
  5070  001436  C02C  F03E         	movff	?___ftmul+2,_scale$2566+2
  5071                           
  5072                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5073  00143A  C03C  F02A         	movff	_scale$2566,___ftmul@f1
  5074  00143E  C03D  F02B         	movff	_scale$2566+1,___ftmul@f1+1
  5075  001442  C03E  F02C         	movff	_scale$2566+2,___ftmul@f1+2
  5076  001446  0E00               	movlw	0
  5077  001448  6E20               	movwf	___wmul@multiplicand+1,c
  5078  00144A  0E03               	movlw	3
  5079  00144C  6E1F               	movwf	___wmul@multiplicand,c
  5080  00144E  0E00               	movlw	0
  5081  001450  6E12               	movwf	___awmod@divisor+1,c
  5082  001452  0E0A               	movlw	10
  5083  001454  6E11               	movwf	___awmod@divisor,c
  5084  001456  503F               	movf	scale@scl,w,c
  5085  001458  6E0F               	movwf	___awmod@dividend,c
  5086  00145A  6A10               	clrf	___awmod@dividend+1,c
  5087  00145C  BE0F               	btfsc	___awmod@dividend,7,c
  5088  00145E  0610               	decf	___awmod@dividend+1,f,c
  5089  001460  ECC3  F012         	call	___awmod	;wreg free
  5090  001464  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5091  001468  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5092  00146C  EC16  F017         	call	___wmul	;wreg free
  5093  001470  0E05               	movlw	low __npowers_
  5094  001472  241D               	addwf	?___wmul,w,c
  5095  001474  6EF6               	movwf	tblptrl,c
  5096  001476  0E7F               	movlw	high __npowers_
  5097  001478  201E               	addwfc	?___wmul+1,w,c
  5098  00147A  6EF7               	movwf	tblptrh,c
  5099  00147C                     	if	0	;There are less than 3 active tblptr bytes
  5100  00147C                     	endif
  5101  00147C  0009               	tblrd		*+
  5102  00147E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5103  001482  0009               	tblrd		*+
  5104  001484  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5105  001488  000A               	tblrd		*-
  5106  00148A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5107  00148E  EC6E  F010         	call	___ftmul	;wreg free
  5108  001492  C02A  F039         	movff	?___ftmul,?_scale
  5109  001496  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5110  00149A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5111  00149E  0012               	return	
  5112  0014A0                     l4485:
  5113                           
  5114                           ;doprnt.c: 432: else if(scl > 10)
  5115  0014A0  503F               	movf	scale@scl,w,c
  5116  0014A2  0A80               	xorlw	128
  5117  0014A4  0F75               	addlw	-139
  5118  0014A6  A0D8               	btfss	status,0,c
  5119  0014A8  D053               	goto	l4491
  5120                           
  5121                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5122  0014AA  0E00               	movlw	0
  5123  0014AC  6E18               	movwf	___awdiv@divisor+1,c
  5124  0014AE  0E0A               	movlw	10
  5125  0014B0  6E17               	movwf	___awdiv@divisor,c
  5126  0014B2  503F               	movf	scale@scl,w,c
  5127  0014B4  6E15               	movwf	___awdiv@dividend,c
  5128  0014B6  6A16               	clrf	___awdiv@dividend+1,c
  5129  0014B8  BE15               	btfsc	___awdiv@dividend,7,c
  5130  0014BA  0616               	decf	___awdiv@dividend+1,f,c
  5131  0014BC  EC71  F012         	call	___awdiv	;wreg free
  5132  0014C0  0E09               	movlw	9
  5133  0014C2  2415               	addwf	?___awdiv,w,c
  5134  0014C4  6E1D               	movwf	___wmul@multiplier,c
  5135  0014C6  0E00               	movlw	0
  5136  0014C8  2016               	addwfc	?___awdiv+1,w,c
  5137  0014CA  6E1E               	movwf	___wmul@multiplier+1,c
  5138  0014CC  0E00               	movlw	0
  5139  0014CE  6E20               	movwf	___wmul@multiplicand+1,c
  5140  0014D0  0E03               	movlw	3
  5141  0014D2  6E1F               	movwf	___wmul@multiplicand,c
  5142  0014D4  EC16  F017         	call	___wmul	;wreg free
  5143  0014D8  0E05               	movlw	low __npowers_
  5144  0014DA  241D               	addwf	?___wmul,w,c
  5145  0014DC  6EF6               	movwf	tblptrl,c
  5146  0014DE  0E7F               	movlw	high __npowers_
  5147  0014E0  201E               	addwfc	?___wmul+1,w,c
  5148  0014E2  6EF7               	movwf	tblptrh,c
  5149  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  5150  0014E4                     	endif
  5151  0014E4  0009               	tblrd		*+
  5152  0014E6  CFF5 F02A          	movff	tablat,___ftmul@f1
  5153  0014EA  0009               	tblrd		*+
  5154  0014EC  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5155  0014F0  000A               	tblrd		*-
  5156  0014F2  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5157  0014F6  0E00               	movlw	0
  5158  0014F8  6E20               	movwf	___wmul@multiplicand+1,c
  5159  0014FA  0E03               	movlw	3
  5160  0014FC  6E1F               	movwf	___wmul@multiplicand,c
  5161  0014FE  0E00               	movlw	0
  5162  001500  6E12               	movwf	___awmod@divisor+1,c
  5163  001502  0E0A               	movlw	10
  5164  001504  6E11               	movwf	___awmod@divisor,c
  5165  001506  503F               	movf	scale@scl,w,c
  5166  001508  6E0F               	movwf	___awmod@dividend,c
  5167  00150A  6A10               	clrf	___awmod@dividend+1,c
  5168  00150C  BE0F               	btfsc	___awmod@dividend,7,c
  5169  00150E  0610               	decf	___awmod@dividend+1,f,c
  5170  001510  ECC3  F012         	call	___awmod	;wreg free
  5171  001514  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5172  001518  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5173  00151C  EC16  F017         	call	___wmul	;wreg free
  5174  001520  0E05               	movlw	low __npowers_
  5175  001522  241D               	addwf	?___wmul,w,c
  5176  001524  6EF6               	movwf	tblptrl,c
  5177  001526  0E7F               	movlw	high __npowers_
  5178  001528  201E               	addwfc	?___wmul+1,w,c
  5179  00152A  6EF7               	movwf	tblptrh,c
  5180  00152C                     	if	0	;There are less than 3 active tblptr bytes
  5181  00152C                     	endif
  5182  00152C  0009               	tblrd		*+
  5183  00152E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5184  001532  0009               	tblrd		*+
  5185  001534  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5186  001538  000A               	tblrd		*-
  5187  00153A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5188  00153E  EC6E  F010         	call	___ftmul	;wreg free
  5189  001542  C02A  F039         	movff	?___ftmul,?_scale
  5190  001546  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5191  00154A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5192  00154E  0012               	return	
  5193  001550                     l4491:
  5194                           
  5195                           ;doprnt.c: 434: return _npowers_[scl];
  5196  001550  503F               	movf	scale@scl,w,c
  5197  001552  0D03               	mullw	3
  5198  001554  0E05               	movlw	low __npowers_
  5199  001556  24F3               	addwf	prodl,w,c
  5200  001558  6EF6               	movwf	tblptrl,c
  5201  00155A  0E7F               	movlw	high __npowers_
  5202  00155C  20F4               	addwfc	prodh,w,c
  5203  00155E  6EF7               	movwf	tblptrh,c
  5204  001560                     	if	0	;There are less than 3 active tblptr bytes
  5205  001560                     	endif
  5206  001560  0009               	tblrd		*+
  5207  001562  CFF5 F039          	movff	tablat,?_scale
  5208  001566  0009               	tblrd		*+
  5209  001568  CFF5 F03A          	movff	tablat,?_scale+1
  5210  00156C  000A               	tblrd		*-
  5211  00156E  CFF5 F03B          	movff	tablat,?_scale+2
  5212  001572  0012               	return	
  5213  001574                     l4495:
  5214                           
  5215                           ;doprnt.c: 435: }
  5216                           ;doprnt.c: 436: if(scl>=110)
  5217  001574  503F               	movf	scale@scl,w,c
  5218  001576  0A80               	xorlw	128
  5219  001578  0F12               	addlw	-238
  5220  00157A  A0D8               	btfss	status,0,c
  5221  00157C  D091               	goto	l4503
  5222                           
  5223                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5224  00157E  0E00               	movlw	0
  5225  001580  6E20               	movwf	___wmul@multiplicand+1,c
  5226  001582  0E03               	movlw	3
  5227  001584  6E1F               	movwf	___wmul@multiplicand,c
  5228  001586  0E00               	movlw	0
  5229  001588  6E18               	movwf	___awdiv@divisor+1,c
  5230  00158A  0E0A               	movlw	10
  5231  00158C  6E17               	movwf	___awdiv@divisor,c
  5232  00158E  0E00               	movlw	0
  5233  001590  6E12               	movwf	___awmod@divisor+1,c
  5234  001592  0E64               	movlw	100
  5235  001594  6E11               	movwf	___awmod@divisor,c
  5236  001596  503F               	movf	scale@scl,w,c
  5237  001598  6E0F               	movwf	___awmod@dividend,c
  5238  00159A  6A10               	clrf	___awmod@dividend+1,c
  5239  00159C  BE0F               	btfsc	___awmod@dividend,7,c
  5240  00159E  0610               	decf	___awmod@dividend+1,f,c
  5241  0015A0  ECC3  F012         	call	___awmod	;wreg free
  5242  0015A4  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5243  0015A8  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5244  0015AC  EC71  F012         	call	___awdiv	;wreg free
  5245  0015B0  0E09               	movlw	9
  5246  0015B2  2415               	addwf	?___awdiv,w,c
  5247  0015B4  6E1D               	movwf	___wmul@multiplier,c
  5248  0015B6  0E00               	movlw	0
  5249  0015B8  2016               	addwfc	?___awdiv+1,w,c
  5250  0015BA  6E1E               	movwf	___wmul@multiplier+1,c
  5251  0015BC  EC16  F017         	call	___wmul	;wreg free
  5252  0015C0  0E2C               	movlw	low __powers_
  5253  0015C2  241D               	addwf	?___wmul,w,c
  5254  0015C4  6EF6               	movwf	tblptrl,c
  5255  0015C6  0E7F               	movlw	high __powers_
  5256  0015C8  201E               	addwfc	?___wmul+1,w,c
  5257  0015CA  6EF7               	movwf	tblptrh,c
  5258  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  5259  0015CC                     	endif
  5260  0015CC  0009               	tblrd		*+
  5261  0015CE  CFF5 F02D          	movff	tablat,___ftmul@f2
  5262  0015D2  0009               	tblrd		*+
  5263  0015D4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5264  0015D8  000A               	tblrd		*-
  5265  0015DA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5266  0015DE  0E00               	movlw	0
  5267  0015E0  6E18               	movwf	___awdiv@divisor+1,c
  5268  0015E2  0E64               	movlw	100
  5269  0015E4  6E17               	movwf	___awdiv@divisor,c
  5270  0015E6  503F               	movf	scale@scl,w,c
  5271  0015E8  6E15               	movwf	___awdiv@dividend,c
  5272  0015EA  6A16               	clrf	___awdiv@dividend+1,c
  5273  0015EC  BE15               	btfsc	___awdiv@dividend,7,c
  5274  0015EE  0616               	decf	___awdiv@dividend+1,f,c
  5275  0015F0  EC71  F012         	call	___awdiv	;wreg free
  5276  0015F4  0E12               	movlw	18
  5277  0015F6  2415               	addwf	?___awdiv,w,c
  5278  0015F8  6E1D               	movwf	___wmul@multiplier,c
  5279  0015FA  0E00               	movlw	0
  5280  0015FC  2016               	addwfc	?___awdiv+1,w,c
  5281  0015FE  6E1E               	movwf	___wmul@multiplier+1,c
  5282  001600  0E00               	movlw	0
  5283  001602  6E20               	movwf	___wmul@multiplicand+1,c
  5284  001604  0E03               	movlw	3
  5285  001606  6E1F               	movwf	___wmul@multiplicand,c
  5286  001608  EC16  F017         	call	___wmul	;wreg free
  5287  00160C  0E2C               	movlw	low __powers_
  5288  00160E  241D               	addwf	?___wmul,w,c
  5289  001610  6EF6               	movwf	tblptrl,c
  5290  001612  0E7F               	movlw	high __powers_
  5291  001614  201E               	addwfc	?___wmul+1,w,c
  5292  001616  6EF7               	movwf	tblptrh,c
  5293  001618                     	if	0	;There are less than 3 active tblptr bytes
  5294  001618                     	endif
  5295  001618  0009               	tblrd		*+
  5296  00161A  CFF5 F02A          	movff	tablat,___ftmul@f1
  5297  00161E  0009               	tblrd		*+
  5298  001620  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5299  001624  000A               	tblrd		*-
  5300  001626  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5301  00162A  EC6E  F010         	call	___ftmul	;wreg free
  5302  00162E  C02A  F03C         	movff	?___ftmul,_scale$2566
  5303  001632  C02B  F03D         	movff	?___ftmul+1,_scale$2566+1
  5304  001636  C02C  F03E         	movff	?___ftmul+2,_scale$2566+2
  5305                           
  5306                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5307  00163A  C03C  F02A         	movff	_scale$2566,___ftmul@f1
  5308  00163E  C03D  F02B         	movff	_scale$2566+1,___ftmul@f1+1
  5309  001642  C03E  F02C         	movff	_scale$2566+2,___ftmul@f1+2
  5310  001646  0E00               	movlw	0
  5311  001648  6E20               	movwf	___wmul@multiplicand+1,c
  5312  00164A  0E03               	movlw	3
  5313  00164C  6E1F               	movwf	___wmul@multiplicand,c
  5314  00164E  0E00               	movlw	0
  5315  001650  6E12               	movwf	___awmod@divisor+1,c
  5316  001652  0E0A               	movlw	10
  5317  001654  6E11               	movwf	___awmod@divisor,c
  5318  001656  503F               	movf	scale@scl,w,c
  5319  001658  6E0F               	movwf	___awmod@dividend,c
  5320  00165A  6A10               	clrf	___awmod@dividend+1,c
  5321  00165C  BE0F               	btfsc	___awmod@dividend,7,c
  5322  00165E  0610               	decf	___awmod@dividend+1,f,c
  5323  001660  ECC3  F012         	call	___awmod	;wreg free
  5324  001664  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5325  001668  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5326  00166C  EC16  F017         	call	___wmul	;wreg free
  5327  001670  0E2C               	movlw	low __powers_
  5328  001672  241D               	addwf	?___wmul,w,c
  5329  001674  6EF6               	movwf	tblptrl,c
  5330  001676  0E7F               	movlw	high __powers_
  5331  001678  201E               	addwfc	?___wmul+1,w,c
  5332  00167A  6EF7               	movwf	tblptrh,c
  5333  00167C                     	if	0	;There are less than 3 active tblptr bytes
  5334  00167C                     	endif
  5335  00167C  0009               	tblrd		*+
  5336  00167E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5337  001682  0009               	tblrd		*+
  5338  001684  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5339  001688  000A               	tblrd		*-
  5340  00168A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5341  00168E  EC6E  F010         	call	___ftmul	;wreg free
  5342  001692  C02A  F039         	movff	?___ftmul,?_scale
  5343  001696  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5344  00169A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5345  00169E  0012               	return	
  5346  0016A0                     l4503:
  5347                           
  5348                           ;doprnt.c: 438: else if(scl > 10)
  5349  0016A0  503F               	movf	scale@scl,w,c
  5350  0016A2  0A80               	xorlw	128
  5351  0016A4  0F75               	addlw	-139
  5352  0016A6  A0D8               	btfss	status,0,c
  5353  0016A8  D053               	goto	l4509
  5354                           
  5355                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5356  0016AA  0E00               	movlw	0
  5357  0016AC  6E18               	movwf	___awdiv@divisor+1,c
  5358  0016AE  0E0A               	movlw	10
  5359  0016B0  6E17               	movwf	___awdiv@divisor,c
  5360  0016B2  503F               	movf	scale@scl,w,c
  5361  0016B4  6E15               	movwf	___awdiv@dividend,c
  5362  0016B6  6A16               	clrf	___awdiv@dividend+1,c
  5363  0016B8  BE15               	btfsc	___awdiv@dividend,7,c
  5364  0016BA  0616               	decf	___awdiv@dividend+1,f,c
  5365  0016BC  EC71  F012         	call	___awdiv	;wreg free
  5366  0016C0  0E09               	movlw	9
  5367  0016C2  2415               	addwf	?___awdiv,w,c
  5368  0016C4  6E1D               	movwf	___wmul@multiplier,c
  5369  0016C6  0E00               	movlw	0
  5370  0016C8  2016               	addwfc	?___awdiv+1,w,c
  5371  0016CA  6E1E               	movwf	___wmul@multiplier+1,c
  5372  0016CC  0E00               	movlw	0
  5373  0016CE  6E20               	movwf	___wmul@multiplicand+1,c
  5374  0016D0  0E03               	movlw	3
  5375  0016D2  6E1F               	movwf	___wmul@multiplicand,c
  5376  0016D4  EC16  F017         	call	___wmul	;wreg free
  5377  0016D8  0E2C               	movlw	low __powers_
  5378  0016DA  241D               	addwf	?___wmul,w,c
  5379  0016DC  6EF6               	movwf	tblptrl,c
  5380  0016DE  0E7F               	movlw	high __powers_
  5381  0016E0  201E               	addwfc	?___wmul+1,w,c
  5382  0016E2  6EF7               	movwf	tblptrh,c
  5383  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  5384  0016E4                     	endif
  5385  0016E4  0009               	tblrd		*+
  5386  0016E6  CFF5 F02A          	movff	tablat,___ftmul@f1
  5387  0016EA  0009               	tblrd		*+
  5388  0016EC  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5389  0016F0  000A               	tblrd		*-
  5390  0016F2  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5391  0016F6  0E00               	movlw	0
  5392  0016F8  6E20               	movwf	___wmul@multiplicand+1,c
  5393  0016FA  0E03               	movlw	3
  5394  0016FC  6E1F               	movwf	___wmul@multiplicand,c
  5395  0016FE  0E00               	movlw	0
  5396  001700  6E12               	movwf	___awmod@divisor+1,c
  5397  001702  0E0A               	movlw	10
  5398  001704  6E11               	movwf	___awmod@divisor,c
  5399  001706  503F               	movf	scale@scl,w,c
  5400  001708  6E0F               	movwf	___awmod@dividend,c
  5401  00170A  6A10               	clrf	___awmod@dividend+1,c
  5402  00170C  BE0F               	btfsc	___awmod@dividend,7,c
  5403  00170E  0610               	decf	___awmod@dividend+1,f,c
  5404  001710  ECC3  F012         	call	___awmod	;wreg free
  5405  001714  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5406  001718  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5407  00171C  EC16  F017         	call	___wmul	;wreg free
  5408  001720  0E2C               	movlw	low __powers_
  5409  001722  241D               	addwf	?___wmul,w,c
  5410  001724  6EF6               	movwf	tblptrl,c
  5411  001726  0E7F               	movlw	high __powers_
  5412  001728  201E               	addwfc	?___wmul+1,w,c
  5413  00172A  6EF7               	movwf	tblptrh,c
  5414  00172C                     	if	0	;There are less than 3 active tblptr bytes
  5415  00172C                     	endif
  5416  00172C  0009               	tblrd		*+
  5417  00172E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5418  001732  0009               	tblrd		*+
  5419  001734  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5420  001738  000A               	tblrd		*-
  5421  00173A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5422  00173E  EC6E  F010         	call	___ftmul	;wreg free
  5423  001742  C02A  F039         	movff	?___ftmul,?_scale
  5424  001746  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5425  00174A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5426  00174E  0012               	return	
  5427  001750                     l4509:
  5428                           
  5429                           ;doprnt.c: 440: return _powers_[scl];
  5430  001750  503F               	movf	scale@scl,w,c
  5431  001752  0D03               	mullw	3
  5432  001754  0E2C               	movlw	low __powers_
  5433  001756  24F3               	addwf	prodl,w,c
  5434  001758  6EF6               	movwf	tblptrl,c
  5435  00175A  0E7F               	movlw	high __powers_
  5436  00175C  20F4               	addwfc	prodh,w,c
  5437  00175E  6EF7               	movwf	tblptrh,c
  5438  001760                     	if	0	;There are less than 3 active tblptr bytes
  5439  001760                     	endif
  5440  001760  0009               	tblrd		*+
  5441  001762  CFF5 F039          	movff	tablat,?_scale
  5442  001766  0009               	tblrd		*+
  5443  001768  CFF5 F03A          	movff	tablat,?_scale+1
  5444  00176C  000A               	tblrd		*-
  5445  00176E  CFF5 F03B          	movff	tablat,?_scale+2
  5446  001772  0012               	return	
  5447  001774                     __end_of_scale:
  5448                           	opt stack 0
  5449                           tosu	equ	0xFFF
  5450                           tosh	equ	0xFFE
  5451                           tosl	equ	0xFFD
  5452                           pclath	equ	0xFFA
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           intcon	equ	0xFF2
  5460                           intcon2	equ	0xFF1
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           postdec1	equ	0xFE5
  5464                           fsr1l	equ	0xFE1
  5465                           indf2	equ	0xFDF
  5466                           postinc2	equ	0xFDE
  5467                           postdec2	equ	0xFDD
  5468                           fsr2h	equ	0xFDA
  5469                           fsr2l	equ	0xFD9
  5470                           status	equ	0xFD8
  5471                           
  5472 ;; *************** function _putch *****************
  5473 ;; Defined at:
  5474 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\putch.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  c               1    wreg     unsigned char 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  c               1    0[COMRAM] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;		None               void
  5481 ;; Registers used:
  5482 ;;		wreg
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5492 ;;Total ram usage:        0 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    1
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		__doprnt
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           	psect	text10
  5503  002FB0                     __ptext10:
  5504                           	opt stack 0
  5505  002FB0                     _putch:
  5506                           	opt stack 26
  5507                           
  5508                           ;incstack = 0
  5509  002FB0  0012               	return	
  5510  002FB2                     __end_of_putch:
  5511                           	opt stack 0
  5512                           tosu	equ	0xFFF
  5513                           tosh	equ	0xFFE
  5514                           tosl	equ	0xFFD
  5515                           pclath	equ	0xFFA
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           postinc0	equ	0xFEE
  5525                           wreg	equ	0xFE8
  5526                           postdec1	equ	0xFE5
  5527                           fsr1l	equ	0xFE1
  5528                           indf2	equ	0xFDF
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _isdigit *****************
  5536 ;; Defined at:
  5537 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  c               1    wreg     unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  c               1   16[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;		None               void
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5554 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5555 ;;Total ram usage:        3 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    1
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		__doprnt
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text11
  5566  002EE2                     __ptext11:
  5567                           	opt stack 0
  5568  002EE2                     _isdigit:
  5569                           	opt stack 26
  5570                           
  5571                           ;incstack = 0
  5572                           ;isdigit@c stored from wreg
  5573  002EE2  6E11               	movwf	isdigit@c,c
  5574  002EE4  0E00               	movlw	0
  5575  002EE6  6E10               	movwf	_isdigit$2257,c
  5576  002EE8  0E3A               	movlw	58
  5577  002EEA  5C11               	subwf	isdigit@c,w,c
  5578  002EEC  B0D8               	btfsc	status,0,c
  5579  002EEE  D005               	goto	l3137
  5580  002EF0  0E2F               	movlw	47
  5581  002EF2  6411               	cpfsgt	isdigit@c,c
  5582  002EF4  D002               	goto	l3137
  5583  002EF6  0E01               	movlw	1
  5584  002EF8  6E10               	movwf	_isdigit$2257,c
  5585  002EFA                     l3137:
  5586  002EFA  C010  F00F         	movff	_isdigit$2257,??_isdigit
  5587  002EFE  300F               	rrcf	??_isdigit,w,c
  5588  002F00  0012               	return	
  5589  002F02                     __end_of_isdigit:
  5590                           	opt stack 0
  5591                           tosu	equ	0xFFF
  5592                           tosh	equ	0xFFE
  5593                           tosl	equ	0xFFD
  5594                           pclath	equ	0xFFA
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           prodh	equ	0xFF4
  5600                           prodl	equ	0xFF3
  5601                           intcon	equ	0xFF2
  5602                           intcon2	equ	0xFF1
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           fsr2h	equ	0xFDA
  5611                           fsr2l	equ	0xFD9
  5612                           status	equ	0xFD8
  5613                           
  5614 ;; *************** function _fround *****************
  5615 ;; Defined at:
  5616 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5617 ;; Parameters:    Size  Location     Type
  5618 ;;  prec            1    wreg     unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  prec            1   65[COMRAM] unsigned char 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  3   56[COMRAM] unsigned char 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5630 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5631 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5633 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5634 ;;Total ram usage:       10 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    3
  5637 ;; This function calls:
  5638 ;;		___awdiv
  5639 ;;		___awmod
  5640 ;;		___ftmul
  5641 ;;		___wmul
  5642 ;; This function is called by:
  5643 ;;		__doprnt
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text12
  5648  001774                     __ptext12:
  5649                           	opt stack 0
  5650  001774                     _fround:
  5651                           	opt stack 24
  5652                           
  5653                           ;incstack = 0
  5654                           ;fround@prec stored from wreg
  5655  001774  6E42               	movwf	fround@prec,c
  5656                           
  5657                           ;doprnt.c: 413: if(prec>=110)
  5658  001776  0E6D               	movlw	109
  5659  001778  6442               	cpfsgt	fround@prec,c
  5660  00177A  D09F               	goto	l4463
  5661                           
  5662                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5663  00177C  0E00               	movlw	0
  5664  00177E  6E20               	movwf	___wmul@multiplicand+1,c
  5665  001780  0E03               	movlw	3
  5666  001782  6E1F               	movwf	___wmul@multiplicand,c
  5667  001784  0E00               	movlw	0
  5668  001786  6E18               	movwf	___awdiv@divisor+1,c
  5669  001788  0E0A               	movlw	10
  5670  00178A  6E17               	movwf	___awdiv@divisor,c
  5671  00178C  0E00               	movlw	0
  5672  00178E  6E12               	movwf	___awmod@divisor+1,c
  5673  001790  0E64               	movlw	100
  5674  001792  6E11               	movwf	___awmod@divisor,c
  5675  001794  C042  F00F         	movff	fround@prec,___awmod@dividend
  5676  001798  6A10               	clrf	___awmod@dividend+1,c
  5677  00179A  ECC3  F012         	call	___awmod	;wreg free
  5678  00179E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5679  0017A2  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5680  0017A6  EC71  F012         	call	___awdiv	;wreg free
  5681  0017AA  0E09               	movlw	9
  5682  0017AC  2415               	addwf	?___awdiv,w,c
  5683  0017AE  6E1D               	movwf	___wmul@multiplier,c
  5684  0017B0  0E00               	movlw	0
  5685  0017B2  2016               	addwfc	?___awdiv+1,w,c
  5686  0017B4  6E1E               	movwf	___wmul@multiplier+1,c
  5687  0017B6  EC16  F017         	call	___wmul	;wreg free
  5688  0017BA  0E05               	movlw	low __npowers_
  5689  0017BC  241D               	addwf	?___wmul,w,c
  5690  0017BE  6EF6               	movwf	tblptrl,c
  5691  0017C0  0E7F               	movlw	high __npowers_
  5692  0017C2  201E               	addwfc	?___wmul+1,w,c
  5693  0017C4  6EF7               	movwf	tblptrh,c
  5694  0017C6                     	if	0	;There are less than 3 active tblptr bytes
  5695  0017C6                     	endif
  5696  0017C6  0009               	tblrd		*+
  5697  0017C8  CFF5 F02D          	movff	tablat,___ftmul@f2
  5698  0017CC  0009               	tblrd		*+
  5699  0017CE  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5700  0017D2  000A               	tblrd		*-
  5701  0017D4  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5702  0017D8  0E00               	movlw	0
  5703  0017DA  6E18               	movwf	___awdiv@divisor+1,c
  5704  0017DC  0E64               	movlw	100
  5705  0017DE  6E17               	movwf	___awdiv@divisor,c
  5706  0017E0  C042  F015         	movff	fround@prec,___awdiv@dividend
  5707  0017E4  6A16               	clrf	___awdiv@dividend+1,c
  5708  0017E6  EC71  F012         	call	___awdiv	;wreg free
  5709  0017EA  0E12               	movlw	18
  5710  0017EC  2415               	addwf	?___awdiv,w,c
  5711  0017EE  6E1D               	movwf	___wmul@multiplier,c
  5712  0017F0  0E00               	movlw	0
  5713  0017F2  2016               	addwfc	?___awdiv+1,w,c
  5714  0017F4  6E1E               	movwf	___wmul@multiplier+1,c
  5715  0017F6  0E00               	movlw	0
  5716  0017F8  6E20               	movwf	___wmul@multiplicand+1,c
  5717  0017FA  0E03               	movlw	3
  5718  0017FC  6E1F               	movwf	___wmul@multiplicand,c
  5719  0017FE  EC16  F017         	call	___wmul	;wreg free
  5720  001802  0E05               	movlw	low __npowers_
  5721  001804  241D               	addwf	?___wmul,w,c
  5722  001806  6EF6               	movwf	tblptrl,c
  5723  001808  0E7F               	movlw	high __npowers_
  5724  00180A  201E               	addwfc	?___wmul+1,w,c
  5725  00180C  6EF7               	movwf	tblptrh,c
  5726  00180E                     	if	0	;There are less than 3 active tblptr bytes
  5727  00180E                     	endif
  5728  00180E  0009               	tblrd		*+
  5729  001810  CFF5 F02A          	movff	tablat,___ftmul@f1
  5730  001814  0009               	tblrd		*+
  5731  001816  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5732  00181A  000A               	tblrd		*-
  5733  00181C  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5734  001820  EC6E  F010         	call	___ftmul	;wreg free
  5735  001824  C02A  F03F         	movff	?___ftmul,_fround$2564
  5736  001828  C02B  F040         	movff	?___ftmul+1,_fround$2564+1
  5737  00182C  C02C  F041         	movff	?___ftmul+2,_fround$2564+2
  5738                           
  5739                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5740  001830  0E00               	movlw	0
  5741  001832  6E20               	movwf	___wmul@multiplicand+1,c
  5742  001834  0E03               	movlw	3
  5743  001836  6E1F               	movwf	___wmul@multiplicand,c
  5744  001838  0E00               	movlw	0
  5745  00183A  6E12               	movwf	___awmod@divisor+1,c
  5746  00183C  0E0A               	movlw	10
  5747  00183E  6E11               	movwf	___awmod@divisor,c
  5748  001840  C042  F00F         	movff	fround@prec,___awmod@dividend
  5749  001844  6A10               	clrf	___awmod@dividend+1,c
  5750  001846  ECC3  F012         	call	___awmod	;wreg free
  5751  00184A  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5752  00184E  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5753  001852  EC16  F017         	call	___wmul	;wreg free
  5754  001856  0E05               	movlw	low __npowers_
  5755  001858  241D               	addwf	?___wmul,w,c
  5756  00185A  6EF6               	movwf	tblptrl,c
  5757  00185C  0E7F               	movlw	high __npowers_
  5758  00185E  201E               	addwfc	?___wmul+1,w,c
  5759  001860  6EF7               	movwf	tblptrh,c
  5760  001862                     	if	0	;There are less than 3 active tblptr bytes
  5761  001862                     	endif
  5762  001862  0009               	tblrd		*+
  5763  001864  CFF5 F02D          	movff	tablat,___ftmul@f2
  5764  001868  0009               	tblrd		*+
  5765  00186A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5766  00186E  000A               	tblrd		*-
  5767  001870  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5768  001874  C03F  F02A         	movff	_fround$2564,___ftmul@f1
  5769  001878  C040  F02B         	movff	_fround$2564+1,___ftmul@f1+1
  5770  00187C  C041  F02C         	movff	_fround$2564+2,___ftmul@f1+2
  5771  001880  EC6E  F010         	call	___ftmul	;wreg free
  5772  001884  C02A  F03C         	movff	?___ftmul,_fround$2565
  5773  001888  C02B  F03D         	movff	?___ftmul+1,_fround$2565+1
  5774  00188C  C02C  F03E         	movff	?___ftmul+2,_fround$2565+2
  5775                           
  5776                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5777  001890  C03C  F02A         	movff	_fround$2565,___ftmul@f1
  5778  001894  C03D  F02B         	movff	_fround$2565+1,___ftmul@f1+1
  5779  001898  C03E  F02C         	movff	_fround$2565+2,___ftmul@f1+2
  5780  00189C  0E00               	movlw	0
  5781  00189E  6E2D               	movwf	___ftmul@f2,c
  5782  0018A0  0E00               	movlw	0
  5783  0018A2  6E2E               	movwf	___ftmul@f2+1,c
  5784  0018A4  0E3F               	movlw	63
  5785  0018A6  6E2F               	movwf	___ftmul@f2+2,c
  5786  0018A8  EC6E  F010         	call	___ftmul	;wreg free
  5787  0018AC  C02A  F039         	movff	?___ftmul,?_fround
  5788  0018B0  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5789  0018B4  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5790  0018B8  0012               	return	
  5791  0018BA                     l4463:
  5792                           
  5793                           ;doprnt.c: 415: else if(prec > 10)
  5794  0018BA  0E0A               	movlw	10
  5795  0018BC  6442               	cpfsgt	fround@prec,c
  5796  0018BE  D063               	goto	l4471
  5797                           
  5798                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5799  0018C0  0E00               	movlw	0
  5800  0018C2  6E20               	movwf	___wmul@multiplicand+1,c
  5801  0018C4  0E03               	movlw	3
  5802  0018C6  6E1F               	movwf	___wmul@multiplicand,c
  5803  0018C8  0E00               	movlw	0
  5804  0018CA  6E12               	movwf	___awmod@divisor+1,c
  5805  0018CC  0E0A               	movlw	10
  5806  0018CE  6E11               	movwf	___awmod@divisor,c
  5807  0018D0  C042  F00F         	movff	fround@prec,___awmod@dividend
  5808  0018D4  6A10               	clrf	___awmod@dividend+1,c
  5809  0018D6  ECC3  F012         	call	___awmod	;wreg free
  5810  0018DA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5811  0018DE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5812  0018E2  EC16  F017         	call	___wmul	;wreg free
  5813  0018E6  0E05               	movlw	low __npowers_
  5814  0018E8  241D               	addwf	?___wmul,w,c
  5815  0018EA  6EF6               	movwf	tblptrl,c
  5816  0018EC  0E7F               	movlw	high __npowers_
  5817  0018EE  201E               	addwfc	?___wmul+1,w,c
  5818  0018F0  6EF7               	movwf	tblptrh,c
  5819  0018F2                     	if	0	;There are less than 3 active tblptr bytes
  5820  0018F2                     	endif
  5821  0018F2  0009               	tblrd		*+
  5822  0018F4  CFF5 F02D          	movff	tablat,___ftmul@f2
  5823  0018F8  0009               	tblrd		*+
  5824  0018FA  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5825  0018FE  000A               	tblrd		*-
  5826  001900  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5827  001904  0E00               	movlw	0
  5828  001906  6E18               	movwf	___awdiv@divisor+1,c
  5829  001908  0E0A               	movlw	10
  5830  00190A  6E17               	movwf	___awdiv@divisor,c
  5831  00190C  C042  F015         	movff	fround@prec,___awdiv@dividend
  5832  001910  6A16               	clrf	___awdiv@dividend+1,c
  5833  001912  EC71  F012         	call	___awdiv	;wreg free
  5834  001916  0E09               	movlw	9
  5835  001918  2415               	addwf	?___awdiv,w,c
  5836  00191A  6E1D               	movwf	___wmul@multiplier,c
  5837  00191C  0E00               	movlw	0
  5838  00191E  2016               	addwfc	?___awdiv+1,w,c
  5839  001920  6E1E               	movwf	___wmul@multiplier+1,c
  5840  001922  0E00               	movlw	0
  5841  001924  6E20               	movwf	___wmul@multiplicand+1,c
  5842  001926  0E03               	movlw	3
  5843  001928  6E1F               	movwf	___wmul@multiplicand,c
  5844  00192A  EC16  F017         	call	___wmul	;wreg free
  5845  00192E  0E05               	movlw	low __npowers_
  5846  001930  241D               	addwf	?___wmul,w,c
  5847  001932  6EF6               	movwf	tblptrl,c
  5848  001934  0E7F               	movlw	high __npowers_
  5849  001936  201E               	addwfc	?___wmul+1,w,c
  5850  001938  6EF7               	movwf	tblptrh,c
  5851  00193A                     	if	0	;There are less than 3 active tblptr bytes
  5852  00193A                     	endif
  5853  00193A  0009               	tblrd		*+
  5854  00193C  CFF5 F02A          	movff	tablat,___ftmul@f1
  5855  001940  0009               	tblrd		*+
  5856  001942  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5857  001946  000A               	tblrd		*-
  5858  001948  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5859  00194C  EC6E  F010         	call	___ftmul	;wreg free
  5860  001950  C02A  F03F         	movff	?___ftmul,_fround$2564
  5861  001954  C02B  F040         	movff	?___ftmul+1,_fround$2564+1
  5862  001958  C02C  F041         	movff	?___ftmul+2,_fround$2564+2
  5863                           
  5864                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5865  00195C  C03F  F02A         	movff	_fround$2564,___ftmul@f1
  5866  001960  C040  F02B         	movff	_fround$2564+1,___ftmul@f1+1
  5867  001964  C041  F02C         	movff	_fround$2564+2,___ftmul@f1+2
  5868  001968  0E00               	movlw	0
  5869  00196A  6E2D               	movwf	___ftmul@f2,c
  5870  00196C  0E00               	movlw	0
  5871  00196E  6E2E               	movwf	___ftmul@f2+1,c
  5872  001970  0E3F               	movlw	63
  5873  001972  6E2F               	movwf	___ftmul@f2+2,c
  5874  001974  EC6E  F010         	call	___ftmul	;wreg free
  5875  001978  C02A  F039         	movff	?___ftmul,?_fround
  5876  00197C  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5877  001980  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5878  001984  0012               	return	
  5879  001986                     l4471:
  5880                           
  5881                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5882  001986  5042               	movf	fround@prec,w,c
  5883  001988  0D03               	mullw	3
  5884  00198A  0E05               	movlw	low __npowers_
  5885  00198C  24F3               	addwf	prodl,w,c
  5886  00198E  6EF6               	movwf	tblptrl,c
  5887  001990  0E7F               	movlw	high __npowers_
  5888  001992  20F4               	addwfc	prodh,w,c
  5889  001994  6EF7               	movwf	tblptrh,c
  5890  001996                     	if	0	;There are less than 3 active tblptr bytes
  5891  001996                     	endif
  5892  001996  0009               	tblrd		*+
  5893  001998  CFF5 F02A          	movff	tablat,___ftmul@f1
  5894  00199C  0009               	tblrd		*+
  5895  00199E  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5896  0019A2  000A               	tblrd		*-
  5897  0019A4  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5898  0019A8  0E00               	movlw	0
  5899  0019AA  6E2D               	movwf	___ftmul@f2,c
  5900  0019AC  0E00               	movlw	0
  5901  0019AE  6E2E               	movwf	___ftmul@f2+1,c
  5902  0019B0  0E3F               	movlw	63
  5903  0019B2  6E2F               	movwf	___ftmul@f2+2,c
  5904  0019B4  EC6E  F010         	call	___ftmul	;wreg free
  5905  0019B8  C02A  F039         	movff	?___ftmul,?_fround
  5906  0019BC  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5907  0019C0  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5908  0019C4  0012               	return	
  5909  0019C6                     __end_of_fround:
  5910                           	opt stack 0
  5911                           tosu	equ	0xFFF
  5912                           tosh	equ	0xFFE
  5913                           tosl	equ	0xFFD
  5914                           pclath	equ	0xFFA
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           intcon	equ	0xFF2
  5922                           intcon2	equ	0xFF1
  5923                           postinc0	equ	0xFEE
  5924                           wreg	equ	0xFE8
  5925                           postdec1	equ	0xFE5
  5926                           fsr1l	equ	0xFE1
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function ___wmul *****************
  5935 ;; Defined at:
  5936 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  multiplier      2   28[COMRAM] unsigned int 
  5939 ;;  multiplicand    2   30[COMRAM] unsigned int 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  product         2   32[COMRAM] unsigned int 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2   28[COMRAM] unsigned int 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, prodl, prodh
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5954 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5955 ;;Total ram usage:        6 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    1
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_fround
  5962 ;;		_scale
  5963 ;;		__doprnt
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text13
  5968  002E2C                     __ptext13:
  5969                           	opt stack 0
  5970  002E2C                     ___wmul:
  5971                           	opt stack 25
  5972                           
  5973                           ;incstack = 0
  5974  002E2C  501D               	movf	___wmul@multiplier,w,c
  5975  002E2E  021F               	mulwf	___wmul@multiplicand,c
  5976  002E30  CFF3 F021          	movff	prodl,___wmul@product
  5977  002E34  CFF4 F022          	movff	prodh,___wmul@product+1
  5978  002E38  501D               	movf	___wmul@multiplier,w,c
  5979  002E3A  0220               	mulwf	___wmul@multiplicand+1,c
  5980  002E3C  50F3               	movf	prodl,w,c
  5981  002E3E  2622               	addwf	___wmul@product+1,f,c
  5982  002E40  501E               	movf	___wmul@multiplier+1,w,c
  5983  002E42  021F               	mulwf	___wmul@multiplicand,c
  5984  002E44  50F3               	movf	prodl,w,c
  5985  002E46  2622               	addwf	___wmul@product+1,f,c
  5986  002E48  C021  F01D         	movff	___wmul@product,?___wmul
  5987  002E4C  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  5988  002E50  0012               	return	
  5989  002E52                     __end_of___wmul:
  5990                           	opt stack 0
  5991                           tosu	equ	0xFFF
  5992                           tosh	equ	0xFFE
  5993                           tosl	equ	0xFFD
  5994                           pclath	equ	0xFFA
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           postdec1	equ	0xFE5
  6006                           fsr1l	equ	0xFE1
  6007                           indf2	equ	0xFDF
  6008                           postinc2	equ	0xFDE
  6009                           postdec2	equ	0xFDD
  6010                           fsr2h	equ	0xFDA
  6011                           fsr2l	equ	0xFD9
  6012                           status	equ	0xFD8
  6013                           
  6014 ;; *************** function ___awmod *****************
  6015 ;; Defined at:
  6016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  dividend        2   14[COMRAM] int 
  6019 ;;  divisor         2   16[COMRAM] int 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  sign            1   19[COMRAM] unsigned char 
  6022 ;;  counter         1   18[COMRAM] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  2   14[COMRAM] int 
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, prodl
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6032 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6033 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6035 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6036 ;;Total ram usage:        6 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    1
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_fround
  6043 ;;		_scale
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text14
  6048  002586                     __ptext14:
  6049                           	opt stack 0
  6050  002586                     ___awmod:
  6051                           	opt stack 25
  6052                           
  6053                           ;incstack = 0
  6054  002586  0E00               	movlw	0
  6055  002588  6E14               	movwf	___awmod@sign,c
  6056  00258A  5010               	movf	___awmod@dividend+1,w,c
  6057  00258C  0A80               	xorlw	128
  6058  00258E  6EF3               	movwf	prodl,c
  6059  002590  0E80               	movlw	128
  6060  002592  5CF3               	subwf	prodl,w,c
  6061  002594  0E00               	movlw	0
  6062  002596  B4D8               	btfsc	status,2,c
  6063  002598  5C0F               	subwf	___awmod@dividend,w,c
  6064  00259A  B0D8               	btfsc	status,0,c
  6065  00259C  D006               	goto	l3015
  6066  00259E  6C0F               	negf	___awmod@dividend,c
  6067  0025A0  1E10               	comf	___awmod@dividend+1,f,c
  6068  0025A2  B0D8               	btfsc	status,0,c
  6069  0025A4  2A10               	incf	___awmod@dividend+1,f,c
  6070  0025A6  0E01               	movlw	1
  6071  0025A8  6E14               	movwf	___awmod@sign,c
  6072  0025AA                     l3015:
  6073  0025AA  5012               	movf	___awmod@divisor+1,w,c
  6074  0025AC  0A80               	xorlw	128
  6075  0025AE  6EF3               	movwf	prodl,c
  6076  0025B0  0E80               	movlw	128
  6077  0025B2  5CF3               	subwf	prodl,w,c
  6078  0025B4  0E00               	movlw	0
  6079  0025B6  B4D8               	btfsc	status,2,c
  6080  0025B8  5C11               	subwf	___awmod@divisor,w,c
  6081  0025BA  B0D8               	btfsc	status,0,c
  6082  0025BC  D004               	goto	l3019
  6083  0025BE  6C11               	negf	___awmod@divisor,c
  6084  0025C0  1E12               	comf	___awmod@divisor+1,f,c
  6085  0025C2  B0D8               	btfsc	status,0,c
  6086  0025C4  2A12               	incf	___awmod@divisor+1,f,c
  6087  0025C6                     l3019:
  6088  0025C6  5012               	movf	___awmod@divisor+1,w,c
  6089  0025C8  1011               	iorwf	___awmod@divisor,w,c
  6090  0025CA  B4D8               	btfsc	status,2,c
  6091  0025CC  D018               	goto	l3035
  6092  0025CE  0E01               	movlw	1
  6093  0025D0  6E13               	movwf	___awmod@counter,c
  6094  0025D2  D004               	goto	l3025
  6095  0025D4                     l3023:
  6096  0025D4  90D8               	bcf	status,0,c
  6097  0025D6  3611               	rlcf	___awmod@divisor,f,c
  6098  0025D8  3612               	rlcf	___awmod@divisor+1,f,c
  6099  0025DA  2A13               	incf	___awmod@counter,f,c
  6100  0025DC                     l3025:
  6101  0025DC  AE12               	btfss	___awmod@divisor+1,7,c
  6102  0025DE  D7FA               	goto	l3023
  6103  0025E0                     l3027:
  6104  0025E0  5011               	movf	___awmod@divisor,w,c
  6105  0025E2  5C0F               	subwf	___awmod@dividend,w,c
  6106  0025E4  5012               	movf	___awmod@divisor+1,w,c
  6107  0025E6  5810               	subwfb	___awmod@dividend+1,w,c
  6108  0025E8  A0D8               	btfss	status,0,c
  6109  0025EA  D004               	goto	l3031
  6110  0025EC  5011               	movf	___awmod@divisor,w,c
  6111  0025EE  5E0F               	subwf	___awmod@dividend,f,c
  6112  0025F0  5012               	movf	___awmod@divisor+1,w,c
  6113  0025F2  5A10               	subwfb	___awmod@dividend+1,f,c
  6114  0025F4                     l3031:
  6115  0025F4  90D8               	bcf	status,0,c
  6116  0025F6  3212               	rrcf	___awmod@divisor+1,f,c
  6117  0025F8  3211               	rrcf	___awmod@divisor,f,c
  6118  0025FA  2E13               	decfsz	___awmod@counter,f,c
  6119  0025FC  D7F1               	goto	l3027
  6120  0025FE                     l3035:
  6121  0025FE  5014               	movf	___awmod@sign,w,c
  6122  002600  B4D8               	btfsc	status,2,c
  6123  002602  D004               	goto	l3039
  6124  002604  6C0F               	negf	___awmod@dividend,c
  6125  002606  1E10               	comf	___awmod@dividend+1,f,c
  6126  002608  B0D8               	btfsc	status,0,c
  6127  00260A  2A10               	incf	___awmod@dividend+1,f,c
  6128  00260C                     l3039:
  6129  00260C  C00F  F00F         	movff	___awmod@dividend,?___awmod
  6130  002610  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  6131  002614  0012               	return	
  6132  002616                     __end_of___awmod:
  6133                           	opt stack 0
  6134                           tosu	equ	0xFFF
  6135                           tosh	equ	0xFFE
  6136                           tosl	equ	0xFFD
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           intcon2	equ	0xFF1
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           postdec1	equ	0xFE5
  6149                           fsr1l	equ	0xFE1
  6150                           indf2	equ	0xFDF
  6151                           postinc2	equ	0xFDE
  6152                           postdec2	equ	0xFDD
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function ___awdiv *****************
  6158 ;; Defined at:
  6159 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  dividend        2   20[COMRAM] int 
  6162 ;;  divisor         2   22[COMRAM] int 
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  quotient        2   26[COMRAM] int 
  6165 ;;  sign            1   25[COMRAM] unsigned char 
  6166 ;;  counter         1   24[COMRAM] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  2   20[COMRAM] int 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0, prodl
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6177 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6179 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6180 ;;Total ram usage:        8 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    1
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_fround
  6187 ;;		_scale
  6188 ;;		__doprnt
  6189 ;;		_dectobcd
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text15
  6194  0024E2                     __ptext15:
  6195                           	opt stack 0
  6196  0024E2                     ___awdiv:
  6197                           	opt stack 25
  6198                           
  6199                           ;incstack = 0
  6200  0024E2  0E00               	movlw	0
  6201  0024E4  6E1A               	movwf	___awdiv@sign,c
  6202  0024E6  5018               	movf	___awdiv@divisor+1,w,c
  6203  0024E8  0A80               	xorlw	128
  6204  0024EA  6EF3               	movwf	prodl,c
  6205  0024EC  0E80               	movlw	128
  6206  0024EE  5CF3               	subwf	prodl,w,c
  6207  0024F0  0E00               	movlw	0
  6208  0024F2  B4D8               	btfsc	status,2,c
  6209  0024F4  5C17               	subwf	___awdiv@divisor,w,c
  6210  0024F6  B0D8               	btfsc	status,0,c
  6211  0024F8  D006               	goto	l2971
  6212  0024FA  6C17               	negf	___awdiv@divisor,c
  6213  0024FC  1E18               	comf	___awdiv@divisor+1,f,c
  6214  0024FE  B0D8               	btfsc	status,0,c
  6215  002500  2A18               	incf	___awdiv@divisor+1,f,c
  6216  002502  0E01               	movlw	1
  6217  002504  6E1A               	movwf	___awdiv@sign,c
  6218  002506                     l2971:
  6219  002506  5016               	movf	___awdiv@dividend+1,w,c
  6220  002508  0A80               	xorlw	128
  6221  00250A  6EF3               	movwf	prodl,c
  6222  00250C  0E80               	movlw	128
  6223  00250E  5CF3               	subwf	prodl,w,c
  6224  002510  0E00               	movlw	0
  6225  002512  B4D8               	btfsc	status,2,c
  6226  002514  5C15               	subwf	___awdiv@dividend,w,c
  6227  002516  B0D8               	btfsc	status,0,c
  6228  002518  D006               	goto	l2977
  6229  00251A  6C15               	negf	___awdiv@dividend,c
  6230  00251C  1E16               	comf	___awdiv@dividend+1,f,c
  6231  00251E  B0D8               	btfsc	status,0,c
  6232  002520  2A16               	incf	___awdiv@dividend+1,f,c
  6233  002522  0E01               	movlw	1
  6234  002524  1A1A               	xorwf	___awdiv@sign,f,c
  6235  002526                     l2977:
  6236  002526  0E00               	movlw	0
  6237  002528  6E1C               	movwf	___awdiv@quotient+1,c
  6238  00252A  0E00               	movlw	0
  6239  00252C  6E1B               	movwf	___awdiv@quotient,c
  6240  00252E  5018               	movf	___awdiv@divisor+1,w,c
  6241  002530  1017               	iorwf	___awdiv@divisor,w,c
  6242  002532  B4D8               	btfsc	status,2,c
  6243  002534  D01C               	goto	l2999
  6244  002536  0E01               	movlw	1
  6245  002538  6E19               	movwf	___awdiv@counter,c
  6246  00253A  D004               	goto	l2985
  6247  00253C                     l2983:
  6248  00253C  90D8               	bcf	status,0,c
  6249  00253E  3617               	rlcf	___awdiv@divisor,f,c
  6250  002540  3618               	rlcf	___awdiv@divisor+1,f,c
  6251  002542  2A19               	incf	___awdiv@counter,f,c
  6252  002544                     l2985:
  6253  002544  AE18               	btfss	___awdiv@divisor+1,7,c
  6254  002546  D7FA               	goto	l2983
  6255  002548                     l2987:
  6256  002548  90D8               	bcf	status,0,c
  6257  00254A  361B               	rlcf	___awdiv@quotient,f,c
  6258  00254C  361C               	rlcf	___awdiv@quotient+1,f,c
  6259  00254E  5017               	movf	___awdiv@divisor,w,c
  6260  002550  5C15               	subwf	___awdiv@dividend,w,c
  6261  002552  5018               	movf	___awdiv@divisor+1,w,c
  6262  002554  5816               	subwfb	___awdiv@dividend+1,w,c
  6263  002556  A0D8               	btfss	status,0,c
  6264  002558  D005               	goto	l2995
  6265  00255A  5017               	movf	___awdiv@divisor,w,c
  6266  00255C  5E15               	subwf	___awdiv@dividend,f,c
  6267  00255E  5018               	movf	___awdiv@divisor+1,w,c
  6268  002560  5A16               	subwfb	___awdiv@dividend+1,f,c
  6269  002562  801B               	bsf	___awdiv@quotient,0,c
  6270  002564                     l2995:
  6271  002564  90D8               	bcf	status,0,c
  6272  002566  3218               	rrcf	___awdiv@divisor+1,f,c
  6273  002568  3217               	rrcf	___awdiv@divisor,f,c
  6274  00256A  2E19               	decfsz	___awdiv@counter,f,c
  6275  00256C  D7ED               	goto	l2987
  6276  00256E                     l2999:
  6277  00256E  501A               	movf	___awdiv@sign,w,c
  6278  002570  B4D8               	btfsc	status,2,c
  6279  002572  D004               	goto	l3003
  6280  002574  6C1B               	negf	___awdiv@quotient,c
  6281  002576  1E1C               	comf	___awdiv@quotient+1,f,c
  6282  002578  B0D8               	btfsc	status,0,c
  6283  00257A  2A1C               	incf	___awdiv@quotient+1,f,c
  6284  00257C                     l3003:
  6285  00257C  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  6286  002580  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  6287  002584  0012               	return	
  6288  002586                     __end_of___awdiv:
  6289                           	opt stack 0
  6290                           tosu	equ	0xFFF
  6291                           tosh	equ	0xFFE
  6292                           tosl	equ	0xFFD
  6293                           pclath	equ	0xFFA
  6294                           tblptru	equ	0xFF8
  6295                           tblptrh	equ	0xFF7
  6296                           tblptrl	equ	0xFF6
  6297                           tablat	equ	0xFF5
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           intcon	equ	0xFF2
  6301                           intcon2	equ	0xFF1
  6302                           postinc0	equ	0xFEE
  6303                           wreg	equ	0xFE8
  6304                           postdec1	equ	0xFE5
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           fsr2h	equ	0xFDA
  6310                           fsr2l	equ	0xFD9
  6311                           status	equ	0xFD8
  6312                           
  6313 ;; *************** function __tdiv_to_l_ *****************
  6314 ;; Defined at:
  6315 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  f1              3   14[COMRAM] float 
  6318 ;;  f2              3   17[COMRAM] float 
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;  quot            4   23[COMRAM] unsigned long 
  6321 ;;  exp1            1   28[COMRAM] unsigned char 
  6322 ;;  cntr            1   27[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  4   14[COMRAM] unsigned long 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6332 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6333 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6335 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;Total ram usage:       15 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    1
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		__doprnt
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text16
  6347  001FAA                     __ptext16:
  6348                           	opt stack 0
  6349  001FAA                     __tdiv_to_l_:
  6350                           	opt stack 26
  6351                           
  6352                           ;incstack = 0
  6353  001FAA  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6354  001FAE  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6355  001FB0  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6356  001FB2  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  6357  001FB4  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6358  001FB6  E301               	bnc	u3031
  6359  001FB8  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6360  001FBA                     u3031:
  6361  001FBA  5015               	movf	??__tdiv_to_l_,w,c
  6362  001FBC  6E1D               	movwf	__tdiv_to_l_@exp1,c
  6363  001FBE  661D               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  6364  001FC0  D009               	goto	l3147
  6365  001FC2  0E00               	movlw	0
  6366  001FC4  6E0F               	movwf	?__tdiv_to_l_,c
  6367  001FC6  0E00               	movlw	0
  6368  001FC8  6E10               	movwf	?__tdiv_to_l_+1,c
  6369  001FCA  0E00               	movlw	0
  6370  001FCC  6E11               	movwf	?__tdiv_to_l_+2,c
  6371  001FCE  0E00               	movlw	0
  6372  001FD0  6E12               	movwf	?__tdiv_to_l_+3,c
  6373  001FD2  0012               	return	
  6374  001FD4                     l3147:
  6375  001FD4  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6376  001FD8  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6377  001FDA  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6378  001FDC  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  6379  001FDE  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6380  001FE0  E301               	bnc	u3051
  6381  001FE2  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6382  001FE4                     u3051:
  6383  001FE4  5015               	movf	??__tdiv_to_l_,w,c
  6384  001FE6  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6385  001FE8  661C               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  6386  001FEA  D009               	goto	l3153
  6387  001FEC  0E00               	movlw	0
  6388  001FEE  6E0F               	movwf	?__tdiv_to_l_,c
  6389  001FF0  0E00               	movlw	0
  6390  001FF2  6E10               	movwf	?__tdiv_to_l_+1,c
  6391  001FF4  0E00               	movlw	0
  6392  001FF6  6E11               	movwf	?__tdiv_to_l_+2,c
  6393  001FF8  0E00               	movlw	0
  6394  001FFA  6E12               	movwf	?__tdiv_to_l_+3,c
  6395  001FFC  0012               	return	
  6396  001FFE                     l3153:
  6397  001FFE  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  6398  002000  0EFF               	movlw	255
  6399  002002  160F               	andwf	__tdiv_to_l_@f1,f,c
  6400  002004  0EFF               	movlw	255
  6401  002006  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  6402  002008  0E00               	movlw	0
  6403  00200A  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  6404  00200C  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  6405  00200E  0EFF               	movlw	255
  6406  002010  1612               	andwf	__tdiv_to_l_@f2,f,c
  6407  002012  0EFF               	movlw	255
  6408  002014  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  6409  002016  0E00               	movlw	0
  6410  002018  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  6411  00201A  0E00               	movlw	0
  6412  00201C  6E18               	movwf	__tdiv_to_l_@quot,c
  6413  00201E  0E00               	movlw	0
  6414  002020  6E19               	movwf	__tdiv_to_l_@quot+1,c
  6415  002022  0E00               	movlw	0
  6416  002024  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  6417  002026  0E00               	movlw	0
  6418  002028  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  6419  00202A  0E7F               	movlw	127
  6420  00202C  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6421  00202E  501C               	movf	__tdiv_to_l_@cntr,w,c
  6422  002030  0F98               	addlw	152
  6423  002032  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6424  002034  0E18               	movlw	24
  6425  002036  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6426  002038                     l1016:
  6427  002038  90D8               	bcf	status,0,c
  6428  00203A  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6429  00203C  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6430  00203E  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6431  002040  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6432  002042  5012               	movf	__tdiv_to_l_@f2,w,c
  6433  002044  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  6434  002046  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6435  002048  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  6436  00204A  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6437  00204C  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  6438  00204E  A0D8               	btfss	status,0,c
  6439  002050  D007               	goto	l1017
  6440  002052  5012               	movf	__tdiv_to_l_@f2,w,c
  6441  002054  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  6442  002056  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6443  002058  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  6444  00205A  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6445  00205C  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  6446  00205E  8018               	bsf	__tdiv_to_l_@quot,0,c
  6447  002060                     l1017:
  6448  002060  90D8               	bcf	status,0,c
  6449  002062  360F               	rlcf	__tdiv_to_l_@f1,f,c
  6450  002064  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  6451  002066  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  6452  002068  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  6453  00206A  D7E6               	goto	l1016
  6454  00206C  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  6455  00206E  D019               	goto	l3185
  6456  002070  501D               	movf	__tdiv_to_l_@exp1,w,c
  6457  002072  0A80               	xorlw	128
  6458  002074  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  6459  002076  0EE9               	movlw	233
  6460  002078  0A80               	xorlw	128
  6461  00207A  5C15               	subwf	??__tdiv_to_l_,w,c
  6462  00207C  B0D8               	btfsc	status,0,c
  6463  00207E  D009               	goto	l3181
  6464  002080  0E00               	movlw	0
  6465  002082  6E0F               	movwf	?__tdiv_to_l_,c
  6466  002084  0E00               	movlw	0
  6467  002086  6E10               	movwf	?__tdiv_to_l_+1,c
  6468  002088  0E00               	movlw	0
  6469  00208A  6E11               	movwf	?__tdiv_to_l_+2,c
  6470  00208C  0E00               	movlw	0
  6471  00208E  6E12               	movwf	?__tdiv_to_l_+3,c
  6472  002090  0012               	return	
  6473  002092                     l3181:
  6474  002092  90D8               	bcf	status,0,c
  6475  002094  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  6476  002096  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  6477  002098  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  6478  00209A  3218               	rrcf	__tdiv_to_l_@quot,f,c
  6479  00209C  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  6480  00209E  D7F9               	goto	l3181
  6481  0020A0  D014               	goto	l1023
  6482  0020A2                     l3185:
  6483  0020A2  0E17               	movlw	23
  6484  0020A4  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  6485  0020A6  D00F               	goto	l3193
  6486  0020A8  0E00               	movlw	0
  6487  0020AA  6E0F               	movwf	?__tdiv_to_l_,c
  6488  0020AC  0E00               	movlw	0
  6489  0020AE  6E10               	movwf	?__tdiv_to_l_+1,c
  6490  0020B0  0E00               	movlw	0
  6491  0020B2  6E11               	movwf	?__tdiv_to_l_+2,c
  6492  0020B4  0E00               	movlw	0
  6493  0020B6  6E12               	movwf	?__tdiv_to_l_+3,c
  6494  0020B8  0012               	return	
  6495  0020BA                     l3191:
  6496  0020BA  90D8               	bcf	status,0,c
  6497  0020BC  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6498  0020BE  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6499  0020C0  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6500  0020C2  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6501  0020C4  061D               	decf	__tdiv_to_l_@exp1,f,c
  6502  0020C6                     l3193:
  6503  0020C6  661D               	tstfsz	__tdiv_to_l_@exp1,c
  6504  0020C8  D7F8               	goto	l3191
  6505  0020CA                     l1023:
  6506  0020CA  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6507  0020CE  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6508  0020D2  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6509  0020D6  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6510  0020DA  0012               	return	
  6511  0020DC                     __end_of__tdiv_to_l_:
  6512                           	opt stack 0
  6513                           tosu	equ	0xFFF
  6514                           tosh	equ	0xFFE
  6515                           tosl	equ	0xFFD
  6516                           pclath	equ	0xFFA
  6517                           tblptru	equ	0xFF8
  6518                           tblptrh	equ	0xFF7
  6519                           tblptrl	equ	0xFF6
  6520                           tablat	equ	0xFF5
  6521                           prodh	equ	0xFF4
  6522                           prodl	equ	0xFF3
  6523                           intcon	equ	0xFF2
  6524                           intcon2	equ	0xFF1
  6525                           postinc0	equ	0xFEE
  6526                           wreg	equ	0xFE8
  6527                           postdec1	equ	0xFE5
  6528                           fsr1l	equ	0xFE1
  6529                           indf2	equ	0xFDF
  6530                           postinc2	equ	0xFDE
  6531                           postdec2	equ	0xFDD
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function __div_to_l_ *****************
  6537 ;; Defined at:
  6538 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  f1              3   14[COMRAM] unsigned long 
  6541 ;;  f2              3   17[COMRAM] unsigned long 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;  quot            4   24[COMRAM] unsigned long 
  6544 ;;  exp1            1   29[COMRAM] unsigned char 
  6545 ;;  cntr            1   28[COMRAM] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  4   14[COMRAM] unsigned long 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6555 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6556 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6557 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6558 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6559 ;;Total ram usage:       16 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    1
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		__doprnt
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text17
  6570  001D0C                     __ptext17:
  6571                           	opt stack 0
  6572  001D0C                     __div_to_l_:
  6573                           	opt stack 26
  6574                           
  6575                           ;incstack = 0
  6576  001D0C  C00F  F015         	movff	__div_to_l_@f1,??__div_to_l_
  6577  001D10  C010  F016         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  6578  001D14  C011  F017         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  6579  001D18  C012  F018         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  6580  001D1C  0E18               	movlw	24
  6581  001D1E  D005               	goto	u3120
  6582  001D20                     u3125:
  6583  001D20  90D8               	bcf	status,0,c
  6584  001D22  3218               	rrcf	??__div_to_l_+3,f,c
  6585  001D24  3217               	rrcf	??__div_to_l_+2,f,c
  6586  001D26  3216               	rrcf	??__div_to_l_+1,f,c
  6587  001D28  3215               	rrcf	??__div_to_l_,f,c
  6588  001D2A                     u3120:
  6589  001D2A  2EE8               	decfsz	wreg,f,c
  6590  001D2C  D7F9               	goto	u3125
  6591  001D2E  5015               	movf	??__div_to_l_,w,c
  6592  001D30  6E1E               	movwf	__div_to_l_@exp1,c
  6593  001D32  661E               	tstfsz	__div_to_l_@exp1& (0+255),c
  6594  001D34  D009               	goto	l3201
  6595  001D36  0E00               	movlw	0
  6596  001D38  6E0F               	movwf	?__div_to_l_,c
  6597  001D3A  0E00               	movlw	0
  6598  001D3C  6E10               	movwf	?__div_to_l_+1,c
  6599  001D3E  0E00               	movlw	0
  6600  001D40  6E11               	movwf	?__div_to_l_+2,c
  6601  001D42  0E00               	movlw	0
  6602  001D44  6E12               	movwf	?__div_to_l_+3,c
  6603  001D46  0012               	return	
  6604  001D48                     l3201:
  6605  001D48  C012  F015         	movff	__div_to_l_@f2,??__div_to_l_
  6606  001D4C  C013  F016         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  6607  001D50  C014  F017         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  6608  001D54  C015  F018         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  6609  001D58  0E18               	movlw	24
  6610  001D5A  D005               	goto	u3140
  6611  001D5C                     u3145:
  6612  001D5C  90D8               	bcf	status,0,c
  6613  001D5E  3218               	rrcf	??__div_to_l_+3,f,c
  6614  001D60  3217               	rrcf	??__div_to_l_+2,f,c
  6615  001D62  3216               	rrcf	??__div_to_l_+1,f,c
  6616  001D64  3215               	rrcf	??__div_to_l_,f,c
  6617  001D66                     u3140:
  6618  001D66  2EE8               	decfsz	wreg,f,c
  6619  001D68  D7F9               	goto	u3145
  6620  001D6A  5015               	movf	??__div_to_l_,w,c
  6621  001D6C  6E1D               	movwf	__div_to_l_@cntr,c
  6622  001D6E  661D               	tstfsz	__div_to_l_@cntr& (0+255),c
  6623  001D70  D009               	goto	l3207
  6624  001D72  0E00               	movlw	0
  6625  001D74  6E0F               	movwf	?__div_to_l_,c
  6626  001D76  0E00               	movlw	0
  6627  001D78  6E10               	movwf	?__div_to_l_+1,c
  6628  001D7A  0E00               	movlw	0
  6629  001D7C  6E11               	movwf	?__div_to_l_+2,c
  6630  001D7E  0E00               	movlw	0
  6631  001D80  6E12               	movwf	?__div_to_l_+3,c
  6632  001D82  0012               	return	
  6633  001D84                     l3207:
  6634  001D84  8E11               	bsf	__div_to_l_@f1+2,7,c
  6635  001D86  0EFF               	movlw	255
  6636  001D88  160F               	andwf	__div_to_l_@f1,f,c
  6637  001D8A  0EFF               	movlw	255
  6638  001D8C  1610               	andwf	__div_to_l_@f1+1,f,c
  6639  001D8E  0EFF               	movlw	255
  6640  001D90  1611               	andwf	__div_to_l_@f1+2,f,c
  6641  001D92  0E00               	movlw	0
  6642  001D94  1612               	andwf	__div_to_l_@f1+3,f,c
  6643  001D96  8E14               	bsf	__div_to_l_@f2+2,7,c
  6644  001D98  0EFF               	movlw	255
  6645  001D9A  1612               	andwf	__div_to_l_@f2,f,c
  6646  001D9C  0EFF               	movlw	255
  6647  001D9E  1613               	andwf	__div_to_l_@f2+1,f,c
  6648  001DA0  0EFF               	movlw	255
  6649  001DA2  1614               	andwf	__div_to_l_@f2+2,f,c
  6650  001DA4  0E00               	movlw	0
  6651  001DA6  1615               	andwf	__div_to_l_@f2+3,f,c
  6652  001DA8  0E00               	movlw	0
  6653  001DAA  6E19               	movwf	__div_to_l_@quot,c
  6654  001DAC  0E00               	movlw	0
  6655  001DAE  6E1A               	movwf	__div_to_l_@quot+1,c
  6656  001DB0  0E00               	movlw	0
  6657  001DB2  6E1B               	movwf	__div_to_l_@quot+2,c
  6658  001DB4  0E00               	movlw	0
  6659  001DB6  6E1C               	movwf	__div_to_l_@quot+3,c
  6660  001DB8  0E7F               	movlw	127
  6661  001DBA  5E1E               	subwf	__div_to_l_@exp1,f,c
  6662  001DBC  501D               	movf	__div_to_l_@cntr,w,c
  6663  001DBE  0FA0               	addlw	160
  6664  001DC0  5E1E               	subwf	__div_to_l_@exp1,f,c
  6665  001DC2  0E20               	movlw	32
  6666  001DC4  6E1D               	movwf	__div_to_l_@cntr,c
  6667  001DC6                     l3221:
  6668  001DC6  90D8               	bcf	status,0,c
  6669  001DC8  3619               	rlcf	__div_to_l_@quot,f,c
  6670  001DCA  361A               	rlcf	__div_to_l_@quot+1,f,c
  6671  001DCC  361B               	rlcf	__div_to_l_@quot+2,f,c
  6672  001DCE  361C               	rlcf	__div_to_l_@quot+3,f,c
  6673  001DD0  5012               	movf	__div_to_l_@f2,w,c
  6674  001DD2  5C0F               	subwf	__div_to_l_@f1,w,c
  6675  001DD4  5013               	movf	__div_to_l_@f2+1,w,c
  6676  001DD6  5810               	subwfb	__div_to_l_@f1+1,w,c
  6677  001DD8  5014               	movf	__div_to_l_@f2+2,w,c
  6678  001DDA  5811               	subwfb	__div_to_l_@f1+2,w,c
  6679  001DDC  5015               	movf	__div_to_l_@f2+3,w,c
  6680  001DDE  5812               	subwfb	__div_to_l_@f1+3,w,c
  6681  001DE0  A0D8               	btfss	status,0,c
  6682  001DE2  D009               	goto	l3229
  6683  001DE4  5012               	movf	__div_to_l_@f2,w,c
  6684  001DE6  5E0F               	subwf	__div_to_l_@f1,f,c
  6685  001DE8  5013               	movf	__div_to_l_@f2+1,w,c
  6686  001DEA  5A10               	subwfb	__div_to_l_@f1+1,f,c
  6687  001DEC  5014               	movf	__div_to_l_@f2+2,w,c
  6688  001DEE  5A11               	subwfb	__div_to_l_@f1+2,f,c
  6689  001DF0  5015               	movf	__div_to_l_@f2+3,w,c
  6690  001DF2  5A12               	subwfb	__div_to_l_@f1+3,f,c
  6691  001DF4  8019               	bsf	__div_to_l_@quot,0,c
  6692  001DF6                     l3229:
  6693  001DF6  90D8               	bcf	status,0,c
  6694  001DF8  360F               	rlcf	__div_to_l_@f1,f,c
  6695  001DFA  3610               	rlcf	__div_to_l_@f1+1,f,c
  6696  001DFC  3611               	rlcf	__div_to_l_@f1+2,f,c
  6697  001DFE  3612               	rlcf	__div_to_l_@f1+3,f,c
  6698  001E00  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6699  001E02  D7E1               	goto	l3221
  6700  001E04  AE1E               	btfss	__div_to_l_@exp1,7,c
  6701  001E06  D019               	goto	l3243
  6702  001E08  501E               	movf	__div_to_l_@exp1,w,c
  6703  001E0A  0A80               	xorlw	128
  6704  001E0C  6E15               	movwf	??__div_to_l_& (0+255),c
  6705  001E0E  0EE1               	movlw	225
  6706  001E10  0A80               	xorlw	128
  6707  001E12  5C15               	subwf	??__div_to_l_,w,c
  6708  001E14  B0D8               	btfsc	status,0,c
  6709  001E16  D009               	goto	l3239
  6710  001E18  0E00               	movlw	0
  6711  001E1A  6E0F               	movwf	?__div_to_l_,c
  6712  001E1C  0E00               	movlw	0
  6713  001E1E  6E10               	movwf	?__div_to_l_+1,c
  6714  001E20  0E00               	movlw	0
  6715  001E22  6E11               	movwf	?__div_to_l_+2,c
  6716  001E24  0E00               	movlw	0
  6717  001E26  6E12               	movwf	?__div_to_l_+3,c
  6718  001E28  0012               	return	
  6719  001E2A                     l3239:
  6720  001E2A  90D8               	bcf	status,0,c
  6721  001E2C  321C               	rrcf	__div_to_l_@quot+3,f,c
  6722  001E2E  321B               	rrcf	__div_to_l_@quot+2,f,c
  6723  001E30  321A               	rrcf	__div_to_l_@quot+1,f,c
  6724  001E32  3219               	rrcf	__div_to_l_@quot,f,c
  6725  001E34  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6726  001E36  D7F9               	goto	l3239
  6727  001E38  D014               	goto	l905
  6728  001E3A                     l3243:
  6729  001E3A  0E1F               	movlw	31
  6730  001E3C  641E               	cpfsgt	__div_to_l_@exp1,c
  6731  001E3E  D00F               	goto	l3251
  6732  001E40  0E00               	movlw	0
  6733  001E42  6E0F               	movwf	?__div_to_l_,c
  6734  001E44  0E00               	movlw	0
  6735  001E46  6E10               	movwf	?__div_to_l_+1,c
  6736  001E48  0E00               	movlw	0
  6737  001E4A  6E11               	movwf	?__div_to_l_+2,c
  6738  001E4C  0E00               	movlw	0
  6739  001E4E  6E12               	movwf	?__div_to_l_+3,c
  6740  001E50  0012               	return	
  6741  001E52                     l3249:
  6742  001E52  90D8               	bcf	status,0,c
  6743  001E54  3619               	rlcf	__div_to_l_@quot,f,c
  6744  001E56  361A               	rlcf	__div_to_l_@quot+1,f,c
  6745  001E58  361B               	rlcf	__div_to_l_@quot+2,f,c
  6746  001E5A  361C               	rlcf	__div_to_l_@quot+3,f,c
  6747  001E5C  061E               	decf	__div_to_l_@exp1,f,c
  6748  001E5E                     l3251:
  6749  001E5E  661E               	tstfsz	__div_to_l_@exp1,c
  6750  001E60  D7F8               	goto	l3249
  6751  001E62                     l905:
  6752  001E62  C019  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  6753  001E66  C01A  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6754  001E6A  C01B  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6755  001E6E  C01C  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6756  001E72  0012               	return	
  6757  001E74                     __end_of__div_to_l_:
  6758                           	opt stack 0
  6759                           tosu	equ	0xFFF
  6760                           tosh	equ	0xFFE
  6761                           tosl	equ	0xFFD
  6762                           pclath	equ	0xFFA
  6763                           tblptru	equ	0xFF8
  6764                           tblptrh	equ	0xFF7
  6765                           tblptrl	equ	0xFF6
  6766                           tablat	equ	0xFF5
  6767                           prodh	equ	0xFF4
  6768                           prodl	equ	0xFF3
  6769                           intcon	equ	0xFF2
  6770                           intcon2	equ	0xFF1
  6771                           postinc0	equ	0xFEE
  6772                           wreg	equ	0xFE8
  6773                           postdec1	equ	0xFE5
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function ___lltoft *****************
  6783 ;; Defined at:
  6784 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  c               4   22[COMRAM] unsigned long 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  exp             1   30[COMRAM] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  3   22[COMRAM] float 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6800 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6801 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6802 ;;Total ram usage:        9 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    2
  6805 ;; This function calls:
  6806 ;;		___ftpack
  6807 ;; This function is called by:
  6808 ;;		__doprnt
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text18
  6813  002B20                     __ptext18:
  6814                           	opt stack 0
  6815  002B20                     ___lltoft:
  6816                           	opt stack 25
  6817                           
  6818                           ;incstack = 0
  6819  002B20  0E8E               	movlw	142
  6820  002B22  6E1F               	movwf	___lltoft@exp,c
  6821  002B24  D006               	goto	l4573
  6822  002B26                     l4571:
  6823  002B26  90D8               	bcf	status,0,c
  6824  002B28  321A               	rrcf	___lltoft@c+3,f,c
  6825  002B2A  3219               	rrcf	___lltoft@c+2,f,c
  6826  002B2C  3218               	rrcf	___lltoft@c+1,f,c
  6827  002B2E  3217               	rrcf	___lltoft@c,f,c
  6828  002B30  2A1F               	incf	___lltoft@exp,f,c
  6829  002B32                     l4573:
  6830  002B32  0E00               	movlw	0
  6831  002B34  1417               	andwf	___lltoft@c,w,c
  6832  002B36  6E1B               	movwf	??___lltoft& (0+255),c
  6833  002B38  0E00               	movlw	0
  6834  002B3A  1418               	andwf	___lltoft@c+1,w,c
  6835  002B3C  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  6836  002B3E  0E00               	movlw	0
  6837  002B40  1419               	andwf	___lltoft@c+2,w,c
  6838  002B42  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  6839  002B44  0EFF               	movlw	255
  6840  002B46  141A               	andwf	___lltoft@c+3,w,c
  6841  002B48  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  6842  002B4A  501E               	movf	??___lltoft+3,w,c
  6843  002B4C  101B               	iorwf	??___lltoft,w,c
  6844  002B4E  101C               	iorwf	??___lltoft+1,w,c
  6845  002B50  101D               	iorwf	??___lltoft+2,w,c
  6846  002B52  A4D8               	btfss	status,2,c
  6847  002B54  D7E8               	goto	l4571
  6848  002B56  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  6849  002B5A  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  6850  002B5E  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  6851  002B62  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  6852  002B66  0E00               	movlw	0
  6853  002B68  6E13               	movwf	___ftpack@sign,c
  6854  002B6A  EC1D  F012         	call	___ftpack	;wreg free
  6855  002B6E  C00F  F017         	movff	?___ftpack,?___lltoft
  6856  002B72  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  6857  002B76  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  6858  002B7A  0012               	return	
  6859  002B7C                     __end_of___lltoft:
  6860                           	opt stack 0
  6861                           tosu	equ	0xFFF
  6862                           tosh	equ	0xFFE
  6863                           tosl	equ	0xFFD
  6864                           pclath	equ	0xFFA
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           intcon2	equ	0xFF1
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function ___llmod *****************
  6885 ;; Defined at:
  6886 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  dividend        4   27[COMRAM] unsigned long 
  6889 ;;  divisor         4   31[COMRAM] unsigned long 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  counter         1   35[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  4   27[COMRAM] unsigned long 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6901 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6904 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6905 ;;Total ram usage:        9 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    1
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		__doprnt
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text19
  6916  002992                     __ptext19:
  6917                           	opt stack 0
  6918  002992                     ___llmod:
  6919                           	opt stack 26
  6920                           
  6921                           ;incstack = 0
  6922  002992  5023               	movf	___llmod@divisor+3,w,c
  6923  002994  1020               	iorwf	___llmod@divisor,w,c
  6924  002996  1021               	iorwf	___llmod@divisor+1,w,c
  6925  002998  1022               	iorwf	___llmod@divisor+2,w,c
  6926  00299A  B4D8               	btfsc	status,2,c
  6927  00299C  D024               	goto	l1112
  6928  00299E  0E01               	movlw	1
  6929  0029A0  6E24               	movwf	___llmod@counter,c
  6930  0029A2  D006               	goto	l3355
  6931  0029A4                     l3353:
  6932  0029A4  90D8               	bcf	status,0,c
  6933  0029A6  3620               	rlcf	___llmod@divisor,f,c
  6934  0029A8  3621               	rlcf	___llmod@divisor+1,f,c
  6935  0029AA  3622               	rlcf	___llmod@divisor+2,f,c
  6936  0029AC  3623               	rlcf	___llmod@divisor+3,f,c
  6937  0029AE  2A24               	incf	___llmod@counter,f,c
  6938  0029B0                     l3355:
  6939  0029B0  AE23               	btfss	___llmod@divisor+3,7,c
  6940  0029B2  D7F8               	goto	l3353
  6941  0029B4                     l3357:
  6942  0029B4  5020               	movf	___llmod@divisor,w,c
  6943  0029B6  5C1C               	subwf	___llmod@dividend,w,c
  6944  0029B8  5021               	movf	___llmod@divisor+1,w,c
  6945  0029BA  581D               	subwfb	___llmod@dividend+1,w,c
  6946  0029BC  5022               	movf	___llmod@divisor+2,w,c
  6947  0029BE  581E               	subwfb	___llmod@dividend+2,w,c
  6948  0029C0  5023               	movf	___llmod@divisor+3,w,c
  6949  0029C2  581F               	subwfb	___llmod@dividend+3,w,c
  6950  0029C4  A0D8               	btfss	status,0,c
  6951  0029C6  D008               	goto	l3361
  6952  0029C8  5020               	movf	___llmod@divisor,w,c
  6953  0029CA  5E1C               	subwf	___llmod@dividend,f,c
  6954  0029CC  5021               	movf	___llmod@divisor+1,w,c
  6955  0029CE  5A1D               	subwfb	___llmod@dividend+1,f,c
  6956  0029D0  5022               	movf	___llmod@divisor+2,w,c
  6957  0029D2  5A1E               	subwfb	___llmod@dividend+2,f,c
  6958  0029D4  5023               	movf	___llmod@divisor+3,w,c
  6959  0029D6  5A1F               	subwfb	___llmod@dividend+3,f,c
  6960  0029D8                     l3361:
  6961  0029D8  90D8               	bcf	status,0,c
  6962  0029DA  3223               	rrcf	___llmod@divisor+3,f,c
  6963  0029DC  3222               	rrcf	___llmod@divisor+2,f,c
  6964  0029DE  3221               	rrcf	___llmod@divisor+1,f,c
  6965  0029E0  3220               	rrcf	___llmod@divisor,f,c
  6966  0029E2  2E24               	decfsz	___llmod@counter,f,c
  6967  0029E4  D7E7               	goto	l3357
  6968  0029E6                     l1112:
  6969  0029E6  C01C  F01C         	movff	___llmod@dividend,?___llmod
  6970  0029EA  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  6971  0029EE  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  6972  0029F2  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  6973  0029F6  0012               	return	
  6974  0029F8                     __end_of___llmod:
  6975                           	opt stack 0
  6976                           tosu	equ	0xFFF
  6977                           tosh	equ	0xFFE
  6978                           tosl	equ	0xFFD
  6979                           pclath	equ	0xFFA
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           intcon2	equ	0xFF1
  6988                           postinc0	equ	0xFEE
  6989                           wreg	equ	0xFE8
  6990                           postdec1	equ	0xFE5
  6991                           fsr1l	equ	0xFE1
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           fsr2h	equ	0xFDA
  6996                           fsr2l	equ	0xFD9
  6997                           status	equ	0xFD8
  6998                           
  6999 ;; *************** function ___lldiv *****************
  7000 ;; Defined at:
  7001 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;  dividend        4   14[COMRAM] unsigned long 
  7004 ;;  divisor         4   18[COMRAM] unsigned long 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  quotient        4   22[COMRAM] unsigned long 
  7007 ;;  counter         1   26[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  4   14[COMRAM] unsigned long 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7017 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7018 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7020 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7021 ;;Total ram usage:       13 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    1
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		__I2CInit
  7028 ;;		__UART1Init
  7029 ;;		__UART2Init
  7030 ;;		__doprnt
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text20
  7035  0027B4                     __ptext20:
  7036                           	opt stack 0
  7037  0027B4                     ___lldiv:
  7038                           	opt stack 27
  7039                           
  7040                           ;incstack = 0
  7041  0027B4  0E00               	movlw	0
  7042  0027B6  6E17               	movwf	___lldiv@quotient,c
  7043  0027B8  0E00               	movlw	0
  7044  0027BA  6E18               	movwf	___lldiv@quotient+1,c
  7045  0027BC  0E00               	movlw	0
  7046  0027BE  6E19               	movwf	___lldiv@quotient+2,c
  7047  0027C0  0E00               	movlw	0
  7048  0027C2  6E1A               	movwf	___lldiv@quotient+3,c
  7049  0027C4  5016               	movf	___lldiv@divisor+3,w,c
  7050  0027C6  1013               	iorwf	___lldiv@divisor,w,c
  7051  0027C8  1014               	iorwf	___lldiv@divisor+1,w,c
  7052  0027CA  1015               	iorwf	___lldiv@divisor+2,w,c
  7053  0027CC  B4D8               	btfsc	status,2,c
  7054  0027CE  D02A               	goto	l1102
  7055  0027D0  0E01               	movlw	1
  7056  0027D2  6E1B               	movwf	___lldiv@counter,c
  7057  0027D4  D006               	goto	l3335
  7058  0027D6                     l3333:
  7059  0027D6  90D8               	bcf	status,0,c
  7060  0027D8  3613               	rlcf	___lldiv@divisor,f,c
  7061  0027DA  3614               	rlcf	___lldiv@divisor+1,f,c
  7062  0027DC  3615               	rlcf	___lldiv@divisor+2,f,c
  7063  0027DE  3616               	rlcf	___lldiv@divisor+3,f,c
  7064  0027E0  2A1B               	incf	___lldiv@counter,f,c
  7065  0027E2                     l3335:
  7066  0027E2  AE16               	btfss	___lldiv@divisor+3,7,c
  7067  0027E4  D7F8               	goto	l3333
  7068  0027E6                     l3337:
  7069  0027E6  90D8               	bcf	status,0,c
  7070  0027E8  3617               	rlcf	___lldiv@quotient,f,c
  7071  0027EA  3618               	rlcf	___lldiv@quotient+1,f,c
  7072  0027EC  3619               	rlcf	___lldiv@quotient+2,f,c
  7073  0027EE  361A               	rlcf	___lldiv@quotient+3,f,c
  7074  0027F0  5013               	movf	___lldiv@divisor,w,c
  7075  0027F2  5C0F               	subwf	___lldiv@dividend,w,c
  7076  0027F4  5014               	movf	___lldiv@divisor+1,w,c
  7077  0027F6  5810               	subwfb	___lldiv@dividend+1,w,c
  7078  0027F8  5015               	movf	___lldiv@divisor+2,w,c
  7079  0027FA  5811               	subwfb	___lldiv@dividend+2,w,c
  7080  0027FC  5016               	movf	___lldiv@divisor+3,w,c
  7081  0027FE  5812               	subwfb	___lldiv@dividend+3,w,c
  7082  002800  A0D8               	btfss	status,0,c
  7083  002802  D009               	goto	l3345
  7084  002804  5013               	movf	___lldiv@divisor,w,c
  7085  002806  5E0F               	subwf	___lldiv@dividend,f,c
  7086  002808  5014               	movf	___lldiv@divisor+1,w,c
  7087  00280A  5A10               	subwfb	___lldiv@dividend+1,f,c
  7088  00280C  5015               	movf	___lldiv@divisor+2,w,c
  7089  00280E  5A11               	subwfb	___lldiv@dividend+2,f,c
  7090  002810  5016               	movf	___lldiv@divisor+3,w,c
  7091  002812  5A12               	subwfb	___lldiv@dividend+3,f,c
  7092  002814  8017               	bsf	___lldiv@quotient,0,c
  7093  002816                     l3345:
  7094  002816  90D8               	bcf	status,0,c
  7095  002818  3216               	rrcf	___lldiv@divisor+3,f,c
  7096  00281A  3215               	rrcf	___lldiv@divisor+2,f,c
  7097  00281C  3214               	rrcf	___lldiv@divisor+1,f,c
  7098  00281E  3213               	rrcf	___lldiv@divisor,f,c
  7099  002820  2E1B               	decfsz	___lldiv@counter,f,c
  7100  002822  D7E1               	goto	l3337
  7101  002824                     l1102:
  7102  002824  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  7103  002828  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  7104  00282C  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  7105  002830  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  7106  002834  0012               	return	
  7107  002836                     __end_of___lldiv:
  7108                           	opt stack 0
  7109                           tosu	equ	0xFFF
  7110                           tosh	equ	0xFFE
  7111                           tosl	equ	0xFFD
  7112                           pclath	equ	0xFFA
  7113                           tblptru	equ	0xFF8
  7114                           tblptrh	equ	0xFF7
  7115                           tblptrl	equ	0xFF6
  7116                           tablat	equ	0xFF5
  7117                           prodh	equ	0xFF4
  7118                           prodl	equ	0xFF3
  7119                           intcon	equ	0xFF2
  7120                           intcon2	equ	0xFF1
  7121                           postinc0	equ	0xFEE
  7122                           wreg	equ	0xFE8
  7123                           postdec1	equ	0xFE5
  7124                           fsr1l	equ	0xFE1
  7125                           indf2	equ	0xFDF
  7126                           postinc2	equ	0xFDE
  7127                           postdec2	equ	0xFDD
  7128                           fsr2h	equ	0xFDA
  7129                           fsr2l	equ	0xFD9
  7130                           status	equ	0xFD8
  7131                           
  7132 ;; *************** function ___fttol *****************
  7133 ;; Defined at:
  7134 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  f1              3   63[COMRAM] float 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  lval            4    1[BANK0 ] unsigned long 
  7139 ;;  exp1            1    5[BANK0 ] unsigned char 
  7140 ;;  sign1           1    0[BANK0 ] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  4   63[COMRAM] long 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0
  7145 ;; Tracked objects:
  7146 ;;		On entry : 0/0
  7147 ;;		On exit  : 0/0
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7151 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7152 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7153 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7154 ;;Total ram usage:       15 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    1
  7157 ;; This function calls:
  7158 ;;		Nothing
  7159 ;; This function is called by:
  7160 ;;		_timer0init
  7161 ;;		__doprnt
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text21
  7166  001E74                     __ptext21:
  7167                           	opt stack 0
  7168  001E74                     ___fttol:
  7169                           	opt stack 27
  7170                           
  7171                           ;incstack = 0
  7172  001E74  C042  F044         	movff	___fttol@f1+2,??___fttol
  7173  001E78  6A45               	clrf	(??___fttol+1)& (0+255),c
  7174  001E7A  6A46               	clrf	(??___fttol+2)& (0+255),c
  7175  001E7C  3441               	rlcf	___fttol@f1+1,w,c
  7176  001E7E  3644               	rlcf	??___fttol& (0+255),f,c
  7177  001E80  E301               	bnc	u5241
  7178  001E82  8045               	bsf	(??___fttol+1)& (0+255),0,c
  7179  001E84                     u5241:
  7180  001E84  5044               	movf	??___fttol,w,c
  7181  001E86  0100               	movlb	0	; () banked
  7182  001E88  6F65               	movwf	___fttol@exp1& (0+255),b
  7183  001E8A  0100               	movlb	0	; () banked
  7184  001E8C  6765               	tstfsz	___fttol@exp1& (0+255),b
  7185  001E8E  D009               	goto	l4529
  7186                           
  7187                           ; BSR set to: 0
  7188  001E90  0E00               	movlw	0
  7189  001E92  6E40               	movwf	?___fttol,c
  7190  001E94  0E00               	movlw	0
  7191  001E96  6E41               	movwf	?___fttol+1,c
  7192  001E98  0E00               	movlw	0
  7193  001E9A  6E42               	movwf	?___fttol+2,c
  7194  001E9C  0E00               	movlw	0
  7195  001E9E  6E43               	movwf	?___fttol+3,c
  7196  001EA0  0012               	return	
  7197  001EA2                     l4529:
  7198                           
  7199                           ; BSR set to: 0
  7200  001EA2  0E17               	movlw	23
  7201  001EA4  6E44               	movwf	??___fttol& (0+255),c
  7202  001EA6  C040  F045         	movff	___fttol@f1,??___fttol+1
  7203  001EAA  C041  F046         	movff	___fttol@f1+1,??___fttol+2
  7204  001EAE  C042  F047         	movff	___fttol@f1+2,??___fttol+3
  7205  001EB2  2844               	incf	??___fttol,w,c
  7206  001EB4  6E48               	movwf	(??___fttol+4)& (0+255),c
  7207  001EB6  D004               	goto	u5260
  7208  001EB8                     u5265:
  7209  001EB8  90D8               	bcf	status,0,c
  7210  001EBA  3247               	rrcf	??___fttol+3,f,c
  7211  001EBC  3246               	rrcf	??___fttol+2,f,c
  7212  001EBE  3245               	rrcf	??___fttol+1,f,c
  7213  001EC0                     u5260:
  7214  001EC0  2E48               	decfsz	(??___fttol+4)& (0+255),f,c
  7215  001EC2  D7FA               	goto	u5265
  7216  001EC4  5045               	movf	??___fttol+1,w,c
  7217  001EC6  0100               	movlb	0	; () banked
  7218  001EC8  6F60               	movwf	___fttol@sign1& (0+255),b
  7219                           
  7220                           ; BSR set to: 0
  7221  001ECA  8E41               	bsf	___fttol@f1+1,7,c
  7222                           
  7223                           ; BSR set to: 0
  7224  001ECC  0EFF               	movlw	255
  7225  001ECE  1640               	andwf	___fttol@f1,f,c
  7226  001ED0  0EFF               	movlw	255
  7227  001ED2  1641               	andwf	___fttol@f1+1,f,c
  7228  001ED4  0E00               	movlw	0
  7229  001ED6  1642               	andwf	___fttol@f1+2,f,c
  7230                           
  7231                           ; BSR set to: 0
  7232  001ED8  5040               	movf	___fttol@f1,w,c
  7233  001EDA  0100               	movlb	0	; () banked
  7234  001EDC  6F61               	movwf	___fttol@lval& (0+255),b
  7235  001EDE  5041               	movf	___fttol@f1+1,w,c
  7236  001EE0  0100               	movlb	0	; () banked
  7237  001EE2  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  7238  001EE4  5042               	movf	___fttol@f1+2,w,c
  7239  001EE6  0100               	movlb	0	; () banked
  7240  001EE8  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  7241  001EEA  0100               	movlb	0	; () banked
  7242  001EEC  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  7243                           
  7244                           ; BSR set to: 0
  7245  001EEE  0E8E               	movlw	142
  7246  001EF0  0100               	movlb	0	; () banked
  7247  001EF2  5F65               	subwf	___fttol@exp1& (0+255),f,b
  7248                           
  7249                           ; BSR set to: 0
  7250  001EF4  0100               	movlb	0	; () banked
  7251  001EF6  AF65               	btfss	___fttol@exp1& (0+255),7,b
  7252  001EF8  D020               	goto	l4551
  7253                           
  7254                           ; BSR set to: 0
  7255  001EFA  0100               	movlb	0	; () banked
  7256  001EFC  5165               	movf	___fttol@exp1& (0+255),w,b
  7257  001EFE  0A80               	xorlw	128
  7258  001F00  6E44               	movwf	??___fttol& (0+255),c
  7259  001F02  0EF1               	movlw	241
  7260  001F04  0A80               	xorlw	128
  7261  001F06  5C44               	subwf	??___fttol,w,c
  7262  001F08  B0D8               	btfsc	status,0,c
  7263  001F0A  D009               	goto	l4547
  7264                           
  7265                           ; BSR set to: 0
  7266  001F0C  0E00               	movlw	0
  7267  001F0E  6E40               	movwf	?___fttol,c
  7268  001F10  0E00               	movlw	0
  7269  001F12  6E41               	movwf	?___fttol+1,c
  7270  001F14  0E00               	movlw	0
  7271  001F16  6E42               	movwf	?___fttol+2,c
  7272  001F18  0E00               	movlw	0
  7273  001F1A  6E43               	movwf	?___fttol+3,c
  7274  001F1C  0012               	return	
  7275  001F1E                     l4547:
  7276                           
  7277                           ; BSR set to: 0
  7278  001F1E  0100               	movlb	0	; () banked
  7279  001F20  90D8               	bcf	status,0,c
  7280  001F22  0100               	movlb	0	; () banked
  7281  001F24  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7282  001F26  0100               	movlb	0	; () banked
  7283  001F28  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7284  001F2A  0100               	movlb	0	; () banked
  7285  001F2C  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7286  001F2E  0100               	movlb	0	; () banked
  7287  001F30  3361               	rrcf	___fttol@lval& (0+255),f,b
  7288                           
  7289                           ; BSR set to: 0
  7290  001F32  0100               	movlb	0	; () banked
  7291  001F34  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  7292  001F36  D7F3               	goto	l4547
  7293  001F38  D01C               	goto	l4561
  7294  001F3A                     l4551:
  7295                           
  7296                           ; BSR set to: 0
  7297  001F3A  0E17               	movlw	23
  7298  001F3C  0100               	movlb	0	; () banked
  7299  001F3E  6565               	cpfsgt	___fttol@exp1& (0+255),b
  7300  001F40  D015               	goto	l4559
  7301                           
  7302                           ; BSR set to: 0
  7303  001F42  0E00               	movlw	0
  7304  001F44  6E40               	movwf	?___fttol,c
  7305  001F46  0E00               	movlw	0
  7306  001F48  6E41               	movwf	?___fttol+1,c
  7307  001F4A  0E00               	movlw	0
  7308  001F4C  6E42               	movwf	?___fttol+2,c
  7309  001F4E  0E00               	movlw	0
  7310  001F50  6E43               	movwf	?___fttol+3,c
  7311  001F52  0012               	return	
  7312  001F54                     l4557:
  7313                           
  7314                           ; BSR set to: 0
  7315  001F54  0100               	movlb	0	; () banked
  7316  001F56  90D8               	bcf	status,0,c
  7317  001F58  0100               	movlb	0	; () banked
  7318  001F5A  3761               	rlcf	___fttol@lval& (0+255),f,b
  7319  001F5C  0100               	movlb	0	; () banked
  7320  001F5E  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7321  001F60  0100               	movlb	0	; () banked
  7322  001F62  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7323  001F64  0100               	movlb	0	; () banked
  7324  001F66  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7325  001F68  0100               	movlb	0	; () banked
  7326  001F6A  0765               	decf	___fttol@exp1& (0+255),f,b
  7327  001F6C                     l4559:
  7328                           
  7329                           ; BSR set to: 0
  7330  001F6C  0100               	movlb	0	; () banked
  7331  001F6E  6765               	tstfsz	___fttol@exp1& (0+255),b
  7332  001F70  D7F1               	goto	l4557
  7333  001F72                     l4561:
  7334                           
  7335                           ; BSR set to: 0
  7336  001F72  0100               	movlb	0	; () banked
  7337  001F74  5160               	movf	___fttol@sign1& (0+255),w,b
  7338  001F76  B4D8               	btfsc	status,2,c
  7339  001F78  D00F               	goto	l4565
  7340                           
  7341                           ; BSR set to: 0
  7342  001F7A  0100               	movlb	0	; () banked
  7343  001F7C  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  7344  001F7E  0100               	movlb	0	; () banked
  7345  001F80  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  7346  001F82  0100               	movlb	0	; () banked
  7347  001F84  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  7348  001F86  0100               	movlb	0	; () banked
  7349  001F88  6D61               	negf	___fttol@lval& (0+255),b
  7350  001F8A  0E00               	movlw	0
  7351  001F8C  0100               	movlb	0	; () banked
  7352  001F8E  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7353  001F90  0100               	movlb	0	; () banked
  7354  001F92  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7355  001F94  0100               	movlb	0	; () banked
  7356  001F96  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7357  001F98                     l4565:
  7358                           
  7359                           ; BSR set to: 0
  7360  001F98  C061  F040         	movff	___fttol@lval,?___fttol
  7361  001F9C  C062  F041         	movff	___fttol@lval+1,?___fttol+1
  7362  001FA0  C063  F042         	movff	___fttol@lval+2,?___fttol+2
  7363  001FA4  C064  F043         	movff	___fttol@lval+3,?___fttol+3
  7364  001FA8  0012               	return	
  7365  001FAA                     __end_of___fttol:
  7366                           	opt stack 0
  7367                           tosu	equ	0xFFF
  7368                           tosh	equ	0xFFE
  7369                           tosl	equ	0xFFD
  7370                           pclath	equ	0xFFA
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           intcon	equ	0xFF2
  7378                           intcon2	equ	0xFF1
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function ___ftsub *****************
  7391 ;; Defined at:
  7392 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  f1              3   34[COMRAM] float 
  7395 ;;  f2              3   37[COMRAM] float 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;		None
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  3   34[COMRAM] float 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7407 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7411 ;;Total ram usage:        6 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    3
  7414 ;; This function calls:
  7415 ;;		___ftadd
  7416 ;; This function is called by:
  7417 ;;		__doprnt
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text22
  7422  002D70                     __ptext22:
  7423                           	opt stack 0
  7424  002D70                     ___ftsub:
  7425                           	opt stack 24
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;incstack = 0
  7429  002D70  0E00               	movlw	0
  7430  002D72  1A26               	xorwf	___ftsub@f2,f,c
  7431  002D74  0E00               	movlw	0
  7432  002D76  1A27               	xorwf	___ftsub@f2+1,f,c
  7433  002D78  0E80               	movlw	128
  7434  002D7A  1A28               	xorwf	___ftsub@f2+2,f,c
  7435  002D7C  C023  F017         	movff	___ftsub@f1,___ftadd@f1
  7436  002D80  C024  F018         	movff	___ftsub@f1+1,___ftadd@f1+1
  7437  002D84  C025  F019         	movff	___ftsub@f1+2,___ftadd@f1+2
  7438  002D88  C026  F01A         	movff	___ftsub@f2,___ftadd@f2
  7439  002D8C  C027  F01B         	movff	___ftsub@f2+1,___ftadd@f2+1
  7440  002D90  C028  F01C         	movff	___ftsub@f2+2,___ftadd@f2+2
  7441  002D94  ECE3  F00C         	call	___ftadd	;wreg free
  7442  002D98  C017  F023         	movff	?___ftadd,?___ftsub
  7443  002D9C  C018  F024         	movff	?___ftadd+1,?___ftsub+1
  7444  002DA0  C019  F025         	movff	?___ftadd+2,?___ftsub+2
  7445  002DA4  0012               	return	
  7446  002DA6                     __end_of___ftsub:
  7447                           	opt stack 0
  7448                           tosu	equ	0xFFF
  7449                           tosh	equ	0xFFE
  7450                           tosl	equ	0xFFD
  7451                           pclath	equ	0xFFA
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           intcon	equ	0xFF2
  7459                           intcon2	equ	0xFF1
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           postdec1	equ	0xFE5
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           postdec2	equ	0xFDD
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function ___ftadd *****************
  7472 ;; Defined at:
  7473 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  f1              3   22[COMRAM] float 
  7476 ;;  f2              3   25[COMRAM] float 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  exp1            1   33[COMRAM] unsigned char 
  7479 ;;  exp2            1   32[COMRAM] unsigned char 
  7480 ;;  sign            1   31[COMRAM] unsigned char 
  7481 ;; Return value:  Size  Location     Type
  7482 ;;                  3   22[COMRAM] float 
  7483 ;; Registers used:
  7484 ;;		wreg, status,2, status,0, cstack
  7485 ;; Tracked objects:
  7486 ;;		On entry : 0/0
  7487 ;;		On exit  : 0/0
  7488 ;;		Unchanged: 0/0
  7489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7490 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7492 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7493 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7494 ;;Total ram usage:       12 bytes
  7495 ;; Hardware stack levels used:    1
  7496 ;; Hardware stack levels required when called:    2
  7497 ;; This function calls:
  7498 ;;		___ftpack
  7499 ;; This function is called by:
  7500 ;;		_timer0init
  7501 ;;		__doprnt
  7502 ;;		___ftsub
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text23
  7507  0019C6                     __ptext23:
  7508                           	opt stack 0
  7509  0019C6                     ___ftadd:
  7510                           	opt stack 26
  7511                           
  7512                           ;incstack = 0
  7513  0019C6  C019  F01D         	movff	___ftadd@f1+2,??___ftadd
  7514  0019CA  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  7515  0019CC  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  7516  0019CE  3418               	rlcf	___ftadd@f1+1,w,c
  7517  0019D0  361D               	rlcf	??___ftadd& (0+255),f,c
  7518  0019D2  E301               	bnc	u4881
  7519  0019D4  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  7520  0019D6                     u4881:
  7521  0019D6  501D               	movf	??___ftadd,w,c
  7522  0019D8  6E22               	movwf	___ftadd@exp1,c
  7523  0019DA  C01C  F01D         	movff	___ftadd@f2+2,??___ftadd
  7524  0019DE  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  7525  0019E0  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  7526  0019E2  341B               	rlcf	___ftadd@f2+1,w,c
  7527  0019E4  361D               	rlcf	??___ftadd& (0+255),f,c
  7528  0019E6  E301               	bnc	u4891
  7529  0019E8  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  7530  0019EA                     u4891:
  7531  0019EA  501D               	movf	??___ftadd,w,c
  7532  0019EC  6E21               	movwf	___ftadd@exp2,c
  7533  0019EE  5022               	movf	___ftadd@exp1,w,c
  7534  0019F0  B4D8               	btfsc	status,2,c
  7535  0019F2  D00C               	goto	l974
  7536  0019F4  5021               	movf	___ftadd@exp2,w,c
  7537  0019F6  5C22               	subwf	___ftadd@exp1,w,c
  7538  0019F8  B0D8               	btfsc	status,0,c
  7539  0019FA  D00F               	goto	l4321
  7540  0019FC  5022               	movf	___ftadd@exp1,w,c
  7541  0019FE  0800               	sublw	0
  7542  001A00  2421               	addwf	___ftadd@exp2,w,c
  7543  001A02  6E1D               	movwf	??___ftadd& (0+255),c
  7544  001A04  0E19               	movlw	25
  7545  001A06  5C1D               	subwf	??___ftadd,w,c
  7546  001A08  A0D8               	btfss	status,0,c
  7547  001A0A  D007               	goto	l4321
  7548  001A0C                     l974:
  7549  001A0C  C01A  F017         	movff	___ftadd@f2,?___ftadd
  7550  001A10  C01B  F018         	movff	___ftadd@f2+1,?___ftadd+1
  7551  001A14  C01C  F019         	movff	___ftadd@f2+2,?___ftadd+2
  7552  001A18  0012               	return	
  7553  001A1A                     l4321:
  7554  001A1A  5021               	movf	___ftadd@exp2,w,c
  7555  001A1C  B4D8               	btfsc	status,2,c
  7556  001A1E  D00C               	goto	l978
  7557  001A20  5022               	movf	___ftadd@exp1,w,c
  7558  001A22  5C21               	subwf	___ftadd@exp2,w,c
  7559  001A24  B0D8               	btfsc	status,0,c
  7560  001A26  D00F               	goto	l4327
  7561  001A28  5021               	movf	___ftadd@exp2,w,c
  7562  001A2A  0800               	sublw	0
  7563  001A2C  2422               	addwf	___ftadd@exp1,w,c
  7564  001A2E  6E1D               	movwf	??___ftadd& (0+255),c
  7565  001A30  0E19               	movlw	25
  7566  001A32  5C1D               	subwf	??___ftadd,w,c
  7567  001A34  A0D8               	btfss	status,0,c
  7568  001A36  D007               	goto	l4327
  7569  001A38                     l978:
  7570  001A38  C017  F017         	movff	___ftadd@f1,?___ftadd
  7571  001A3C  C018  F018         	movff	___ftadd@f1+1,?___ftadd+1
  7572  001A40  C019  F019         	movff	___ftadd@f1+2,?___ftadd+2
  7573  001A44  0012               	return	
  7574  001A46                     l4327:
  7575  001A46  0E06               	movlw	6
  7576  001A48  6E20               	movwf	___ftadd@sign,c
  7577  001A4A  BE19               	btfsc	___ftadd@f1+2,7,c
  7578  001A4C  8E20               	bsf	___ftadd@sign,7,c
  7579  001A4E  BE1C               	btfsc	___ftadd@f2+2,7,c
  7580  001A50  8C20               	bsf	___ftadd@sign,6,c
  7581  001A52  8E18               	bsf	___ftadd@f1+1,7,c
  7582  001A54  0EFF               	movlw	255
  7583  001A56  1617               	andwf	___ftadd@f1,f,c
  7584  001A58  0EFF               	movlw	255
  7585  001A5A  1618               	andwf	___ftadd@f1+1,f,c
  7586  001A5C  0E00               	movlw	0
  7587  001A5E  1619               	andwf	___ftadd@f1+2,f,c
  7588  001A60  8E1B               	bsf	___ftadd@f2+1,7,c
  7589  001A62  0EFF               	movlw	255
  7590  001A64  161A               	andwf	___ftadd@f2,f,c
  7591  001A66  0EFF               	movlw	255
  7592  001A68  161B               	andwf	___ftadd@f2+1,f,c
  7593  001A6A  0E00               	movlw	0
  7594  001A6C  161C               	andwf	___ftadd@f2+2,f,c
  7595  001A6E  5021               	movf	___ftadd@exp2,w,c
  7596  001A70  5C22               	subwf	___ftadd@exp1,w,c
  7597  001A72  B0D8               	btfsc	status,0,c
  7598  001A74  D01A               	goto	l4353
  7599  001A76                     l4343:
  7600  001A76  90D8               	bcf	status,0,c
  7601  001A78  361A               	rlcf	___ftadd@f2,f,c
  7602  001A7A  361B               	rlcf	___ftadd@f2+1,f,c
  7603  001A7C  361C               	rlcf	___ftadd@f2+2,f,c
  7604  001A7E  0621               	decf	___ftadd@exp2,f,c
  7605  001A80  5021               	movf	___ftadd@exp2,w,c
  7606  001A82  1822               	xorwf	___ftadd@exp1,w,c
  7607  001A84  B4D8               	btfsc	status,2,c
  7608  001A86  D00D               	goto	l4351
  7609  001A88  0620               	decf	___ftadd@sign,f,c
  7610  001A8A  C020  F01D         	movff	___ftadd@sign,??___ftadd
  7611  001A8E  0E07               	movlw	7
  7612  001A90  161D               	andwf	??___ftadd,f,c
  7613  001A92  B4D8               	btfsc	status,2,c
  7614  001A94  D006               	goto	l4351
  7615  001A96  D7EF               	goto	l4343
  7616  001A98                     l4349:
  7617  001A98  90D8               	bcf	status,0,c
  7618  001A9A  3219               	rrcf	___ftadd@f1+2,f,c
  7619  001A9C  3218               	rrcf	___ftadd@f1+1,f,c
  7620  001A9E  3217               	rrcf	___ftadd@f1,f,c
  7621  001AA0  2A22               	incf	___ftadd@exp1,f,c
  7622  001AA2                     l4351:
  7623  001AA2  5021               	movf	___ftadd@exp2,w,c
  7624  001AA4  6222               	cpfseq	___ftadd@exp1,c
  7625  001AA6  D7F8               	goto	l4349
  7626  001AA8  D01D               	goto	l989
  7627  001AAA                     l4353:
  7628  001AAA  5022               	movf	___ftadd@exp1,w,c
  7629  001AAC  5C21               	subwf	___ftadd@exp2,w,c
  7630  001AAE  B0D8               	btfsc	status,0,c
  7631  001AB0  D019               	goto	l989
  7632  001AB2                     l4355:
  7633  001AB2  90D8               	bcf	status,0,c
  7634  001AB4  3617               	rlcf	___ftadd@f1,f,c
  7635  001AB6  3618               	rlcf	___ftadd@f1+1,f,c
  7636  001AB8  3619               	rlcf	___ftadd@f1+2,f,c
  7637  001ABA  0622               	decf	___ftadd@exp1,f,c
  7638  001ABC  5021               	movf	___ftadd@exp2,w,c
  7639  001ABE  1822               	xorwf	___ftadd@exp1,w,c
  7640  001AC0  B4D8               	btfsc	status,2,c
  7641  001AC2  D00D               	goto	l4363
  7642  001AC4  0620               	decf	___ftadd@sign,f,c
  7643  001AC6  C020  F01D         	movff	___ftadd@sign,??___ftadd
  7644  001ACA  0E07               	movlw	7
  7645  001ACC  161D               	andwf	??___ftadd,f,c
  7646  001ACE  B4D8               	btfsc	status,2,c
  7647  001AD0  D006               	goto	l4363
  7648  001AD2  D7EF               	goto	l4355
  7649  001AD4                     l4361:
  7650  001AD4  90D8               	bcf	status,0,c
  7651  001AD6  321C               	rrcf	___ftadd@f2+2,f,c
  7652  001AD8  321B               	rrcf	___ftadd@f2+1,f,c
  7653  001ADA  321A               	rrcf	___ftadd@f2,f,c
  7654  001ADC  2A21               	incf	___ftadd@exp2,f,c
  7655  001ADE                     l4363:
  7656  001ADE  5021               	movf	___ftadd@exp2,w,c
  7657  001AE0  6222               	cpfseq	___ftadd@exp1,c
  7658  001AE2  D7F8               	goto	l4361
  7659  001AE4                     l989:
  7660  001AE4  AE20               	btfss	___ftadd@sign,7,c
  7661  001AE6  D00C               	goto	l998
  7662  001AE8  0EFF               	movlw	255
  7663  001AEA  1A17               	xorwf	___ftadd@f1,f,c
  7664  001AEC  0EFF               	movlw	255
  7665  001AEE  1A18               	xorwf	___ftadd@f1+1,f,c
  7666  001AF0  0EFF               	movlw	255
  7667  001AF2  1A19               	xorwf	___ftadd@f1+2,f,c
  7668  001AF4  0E01               	movlw	1
  7669  001AF6  2617               	addwf	___ftadd@f1,f,c
  7670  001AF8  0E00               	movlw	0
  7671  001AFA  2218               	addwfc	___ftadd@f1+1,f,c
  7672  001AFC  0E00               	movlw	0
  7673  001AFE  2219               	addwfc	___ftadd@f1+2,f,c
  7674  001B00                     l998:
  7675  001B00  AC20               	btfss	___ftadd@sign,6,c
  7676  001B02  D00C               	goto	l4369
  7677  001B04  0EFF               	movlw	255
  7678  001B06  1A1A               	xorwf	___ftadd@f2,f,c
  7679  001B08  0EFF               	movlw	255
  7680  001B0A  1A1B               	xorwf	___ftadd@f2+1,f,c
  7681  001B0C  0EFF               	movlw	255
  7682  001B0E  1A1C               	xorwf	___ftadd@f2+2,f,c
  7683  001B10  0E01               	movlw	1
  7684  001B12  261A               	addwf	___ftadd@f2,f,c
  7685  001B14  0E00               	movlw	0
  7686  001B16  221B               	addwfc	___ftadd@f2+1,f,c
  7687  001B18  0E00               	movlw	0
  7688  001B1A  221C               	addwfc	___ftadd@f2+2,f,c
  7689  001B1C                     l4369:
  7690  001B1C  0E00               	movlw	0
  7691  001B1E  6E20               	movwf	___ftadd@sign,c
  7692  001B20  5017               	movf	___ftadd@f1,w,c
  7693  001B22  261A               	addwf	___ftadd@f2,f,c
  7694  001B24  5018               	movf	___ftadd@f1+1,w,c
  7695  001B26  221B               	addwfc	___ftadd@f2+1,f,c
  7696  001B28  5019               	movf	___ftadd@f1+2,w,c
  7697  001B2A  221C               	addwfc	___ftadd@f2+2,f,c
  7698  001B2C  AE1C               	btfss	___ftadd@f2+2,7,c
  7699  001B2E  D00E               	goto	l4379
  7700  001B30  0EFF               	movlw	255
  7701  001B32  1A1A               	xorwf	___ftadd@f2,f,c
  7702  001B34  0EFF               	movlw	255
  7703  001B36  1A1B               	xorwf	___ftadd@f2+1,f,c
  7704  001B38  0EFF               	movlw	255
  7705  001B3A  1A1C               	xorwf	___ftadd@f2+2,f,c
  7706  001B3C  0E01               	movlw	1
  7707  001B3E  261A               	addwf	___ftadd@f2,f,c
  7708  001B40  0E00               	movlw	0
  7709  001B42  221B               	addwfc	___ftadd@f2+1,f,c
  7710  001B44  0E00               	movlw	0
  7711  001B46  221C               	addwfc	___ftadd@f2+2,f,c
  7712  001B48  0E01               	movlw	1
  7713  001B4A  6E20               	movwf	___ftadd@sign,c
  7714  001B4C                     l4379:
  7715  001B4C  C01A  F00F         	movff	___ftadd@f2,___ftpack@arg
  7716  001B50  C01B  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  7717  001B54  C01C  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  7718  001B58  C022  F012         	movff	___ftadd@exp1,___ftpack@exp
  7719  001B5C  C020  F013         	movff	___ftadd@sign,___ftpack@sign
  7720  001B60  EC1D  F012         	call	___ftpack	;wreg free
  7721  001B64  C00F  F017         	movff	?___ftpack,?___ftadd
  7722  001B68  C010  F018         	movff	?___ftpack+1,?___ftadd+1
  7723  001B6C  C011  F019         	movff	?___ftpack+2,?___ftadd+2
  7724  001B70  0012               	return	
  7725  001B72                     __end_of___ftadd:
  7726                           	opt stack 0
  7727                           tosu	equ	0xFFF
  7728                           tosh	equ	0xFFE
  7729                           tosl	equ	0xFFD
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon2	equ	0xFF1
  7739                           postinc0	equ	0xFEE
  7740                           wreg	equ	0xFE8
  7741                           postdec1	equ	0xFE5
  7742                           fsr1l	equ	0xFE1
  7743                           indf2	equ	0xFDF
  7744                           postinc2	equ	0xFDE
  7745                           postdec2	equ	0xFDD
  7746                           fsr2h	equ	0xFDA
  7747                           fsr2l	equ	0xFD9
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function ___ftneg *****************
  7751 ;; Defined at:
  7752 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  f1              3   14[COMRAM] float 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  3   14[COMRAM] float 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7769 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7770 ;;Total ram usage:        3 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    1
  7773 ;; This function calls:
  7774 ;;		Nothing
  7775 ;; This function is called by:
  7776 ;;		_timer0init
  7777 ;;		__doprnt
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text24
  7782  002E52                     __ptext24:
  7783                           	opt stack 0
  7784  002E52                     ___ftneg:
  7785                           	opt stack 27
  7786                           
  7787                           ;incstack = 0
  7788  002E52  0E7F               	movlw	127
  7789  002E54  1411               	andwf	___ftneg@f1+2,w,c
  7790  002E56  1010               	iorwf	___ftneg@f1+1,w,c
  7791  002E58  100F               	iorwf	___ftneg@f1,w,c
  7792  002E5A  B4D8               	btfsc	status,2,c
  7793  002E5C  D006               	goto	l1048
  7794  002E5E  0E00               	movlw	0
  7795  002E60  1A0F               	xorwf	___ftneg@f1,f,c
  7796  002E62  0E00               	movlw	0
  7797  002E64  1A10               	xorwf	___ftneg@f1+1,f,c
  7798  002E66  0E80               	movlw	128
  7799  002E68  1A11               	xorwf	___ftneg@f1+2,f,c
  7800  002E6A                     l1048:
  7801  002E6A  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  7802  002E6E  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  7803  002E72  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  7804  002E76  0012               	return	
  7805  002E78                     __end_of___ftneg:
  7806                           	opt stack 0
  7807                           tosu	equ	0xFFF
  7808                           tosh	equ	0xFFE
  7809                           tosl	equ	0xFFD
  7810                           pclath	equ	0xFFA
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           intcon2	equ	0xFF1
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postdec1	equ	0xFE5
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function ___ftge *****************
  7831 ;; Defined at:
  7832 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  ff1             3   14[COMRAM] float 
  7835 ;;  ff2             3   17[COMRAM] float 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;		None               void
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7847 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;Total ram usage:        9 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		__doprnt
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text25
  7862  002616                     __ptext25:
  7863                           	opt stack 0
  7864  002616                     ___ftge:
  7865                           	opt stack 26
  7866                           
  7867                           ;incstack = 0
  7868  002616  AE11               	btfss	___ftge@ff1+2,7,c
  7869  002618  D016               	goto	l3263
  7870  00261A  C00F  F015         	movff	___ftge@ff1,??___ftge
  7871  00261E  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  7872  002622  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  7873  002626  1E15               	comf	??___ftge,f,c
  7874  002628  1E16               	comf	??___ftge+1,f,c
  7875  00262A  1E17               	comf	??___ftge+2,f,c
  7876  00262C  2A15               	incf	??___ftge,f,c
  7877  00262E  0E00               	movlw	0
  7878  002630  2216               	addwfc	??___ftge+1,f,c
  7879  002632  2217               	addwfc	??___ftge+2,f,c
  7880  002634  0E00               	movlw	0
  7881  002636  2415               	addwf	??___ftge,w,c
  7882  002638  6E0F               	movwf	___ftge@ff1,c
  7883  00263A  0E00               	movlw	0
  7884  00263C  2016               	addwfc	??___ftge+1,w,c
  7885  00263E  6E10               	movwf	___ftge@ff1+1,c
  7886  002640  0E80               	movlw	128
  7887  002642  2017               	addwfc	??___ftge+2,w,c
  7888  002644  6E11               	movwf	___ftge@ff1+2,c
  7889  002646                     l3263:
  7890  002646  AE14               	btfss	___ftge@ff2+2,7,c
  7891  002648  D016               	goto	l3267
  7892  00264A  C012  F015         	movff	___ftge@ff2,??___ftge
  7893  00264E  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  7894  002652  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  7895  002656  1E15               	comf	??___ftge,f,c
  7896  002658  1E16               	comf	??___ftge+1,f,c
  7897  00265A  1E17               	comf	??___ftge+2,f,c
  7898  00265C  2A15               	incf	??___ftge,f,c
  7899  00265E  0E00               	movlw	0
  7900  002660  2216               	addwfc	??___ftge+1,f,c
  7901  002662  2217               	addwfc	??___ftge+2,f,c
  7902  002664  0E00               	movlw	0
  7903  002666  2415               	addwf	??___ftge,w,c
  7904  002668  6E12               	movwf	___ftge@ff2,c
  7905  00266A  0E00               	movlw	0
  7906  00266C  2016               	addwfc	??___ftge+1,w,c
  7907  00266E  6E13               	movwf	___ftge@ff2+1,c
  7908  002670  0E80               	movlw	128
  7909  002672  2017               	addwfc	??___ftge+2,w,c
  7910  002674  6E14               	movwf	___ftge@ff2+2,c
  7911  002676                     l3267:
  7912  002676  0E00               	movlw	0
  7913  002678  1A0F               	xorwf	___ftge@ff1,f,c
  7914  00267A  0E00               	movlw	0
  7915  00267C  1A10               	xorwf	___ftge@ff1+1,f,c
  7916  00267E  0E80               	movlw	128
  7917  002680  1A11               	xorwf	___ftge@ff1+2,f,c
  7918  002682  0E00               	movlw	0
  7919  002684  1A12               	xorwf	___ftge@ff2,f,c
  7920  002686  0E00               	movlw	0
  7921  002688  1A13               	xorwf	___ftge@ff2+1,f,c
  7922  00268A  0E80               	movlw	128
  7923  00268C  1A14               	xorwf	___ftge@ff2+2,f,c
  7924  00268E  5012               	movf	___ftge@ff2,w,c
  7925  002690  5C0F               	subwf	___ftge@ff1,w,c
  7926  002692  5013               	movf	___ftge@ff2+1,w,c
  7927  002694  5810               	subwfb	___ftge@ff1+1,w,c
  7928  002696  5014               	movf	___ftge@ff2+2,w,c
  7929  002698  5811               	subwfb	___ftge@ff1+2,w,c
  7930  00269A  B0D8               	btfsc	status,0,c
  7931  00269C  D002               	goto	l3273
  7932  00269E  90D8               	bcf	status,0,c
  7933  0026A0  0012               	return	
  7934  0026A2                     l3273:
  7935  0026A2  80D8               	bsf	status,0,c
  7936  0026A4  0012               	return	
  7937  0026A6                     __end_of___ftge:
  7938                           	opt stack 0
  7939                           tosu	equ	0xFFF
  7940                           tosh	equ	0xFFE
  7941                           tosl	equ	0xFFD
  7942                           pclath	equ	0xFFA
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           intcon	equ	0xFF2
  7950                           intcon2	equ	0xFF1
  7951                           postinc0	equ	0xFEE
  7952                           wreg	equ	0xFE8
  7953                           postdec1	equ	0xFE5
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function _getTime *****************
  7963 ;; Defined at:
  7964 ;;		line 41 in file "src/DS3231.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;  hour            2   18[COMRAM] PTR unsigned char 
  7967 ;;		 -> hour(1), 
  7968 ;;  minute          2   20[COMRAM] PTR unsigned char 
  7969 ;;		 -> minute(1), 
  7970 ;;  second          2   22[COMRAM] PTR unsigned char 
  7971 ;;		 -> second(1), 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;		None
  7974 ;; Return value:  Size  Location     Type
  7975 ;;		None               void
  7976 ;; Registers used:
  7977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7983 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7986 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7987 ;;Total ram usage:        6 bytes
  7988 ;; Hardware stack levels used:    1
  7989 ;; Hardware stack levels required when called:    4
  7990 ;; This function calls:
  7991 ;;		__I2CAddress
  7992 ;;		__I2CReceive
  7993 ;;		__I2CRepeatedStart
  7994 ;;		__I2CSend
  7995 ;;		__I2CStart
  7996 ;;		__I2CStop
  7997 ;;		_bcdtodec
  7998 ;;		_toHour
  7999 ;; This function is called by:
  8000 ;;		_loop
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text26
  8005  002836                     __ptext26:
  8006                           	opt stack 0
  8007  002836                     _getTime:
  8008                           	opt stack 25
  8009                           
  8010                           ;DS3231.c: 42: _I2CStart();
  8011                           
  8012                           ;incstack = 0
  8013  002836  ECAE  F017         	call	__I2CStart	;wreg free
  8014                           
  8015                           ;DS3231.c: 43: _I2CAddress(0x68, 0);
  8016  00283A  0E00               	movlw	0
  8017  00283C  6E11               	movwf	__I2CAddress@readnwrite,c
  8018  00283E  0E68               	movlw	104
  8019  002840  ECC9  F017         	call	__I2CAddress
  8020                           
  8021                           ;DS3231.c: 44: _I2CSend(0x00);
  8022  002844  0E00               	movlw	0
  8023  002846  EC9B  F017         	call	__I2CSend
  8024                           
  8025                           ;DS3231.c: 45: _I2CRepeatedStart();
  8026  00284A  ECB7  F017         	call	__I2CRepeatedStart	;wreg free
  8027                           
  8028                           ;DS3231.c: 46: _I2CAddress(0x68, 1);
  8029  00284E  0E01               	movlw	1
  8030  002850  6E11               	movwf	__I2CAddress@readnwrite,c
  8031  002852  0E68               	movlw	104
  8032  002854  ECC9  F017         	call	__I2CAddress
  8033                           
  8034                           ;DS3231.c: 47: _I2CReceive(second, 0);
  8035  002858  C018  F011         	movff	getTime@second+1,__I2CReceive@data+1
  8036  00285C  C017  F010         	movff	getTime@second,__I2CReceive@data
  8037  002860  0E00               	movlw	0
  8038  002862  6E12               	movwf	__I2CReceive@ack,c
  8039  002864  ECD3  F016         	call	__I2CReceive	;wreg free
  8040                           
  8041                           ;DS3231.c: 48: _I2CReceive(minute, 0);
  8042  002868  C016  F011         	movff	getTime@minute+1,__I2CReceive@data+1
  8043  00286C  C015  F010         	movff	getTime@minute,__I2CReceive@data
  8044  002870  0E00               	movlw	0
  8045  002872  6E12               	movwf	__I2CReceive@ack,c
  8046  002874  ECD3  F016         	call	__I2CReceive	;wreg free
  8047                           
  8048                           ;DS3231.c: 49: _I2CReceive(hour, 1);
  8049  002878  C014  F011         	movff	getTime@hour+1,__I2CReceive@data+1
  8050  00287C  C013  F010         	movff	getTime@hour,__I2CReceive@data
  8051  002880  0E01               	movlw	1
  8052  002882  6E12               	movwf	__I2CReceive@ack,c
  8053  002884  ECD3  F016         	call	__I2CReceive	;wreg free
  8054                           
  8055                           ;DS3231.c: 50: _I2CStop();
  8056  002888  ECA5  F017         	call	__I2CStop	;wreg free
  8057                           
  8058                           ;DS3231.c: 51: bcdtodec(second);
  8059  00288C  C018  F010         	movff	getTime@second+1,bcdtodec@dec+1
  8060  002890  C017  F00F         	movff	getTime@second,bcdtodec@dec
  8061  002894  EC02  F017         	call	_bcdtodec	;wreg free
  8062                           
  8063                           ;DS3231.c: 52: bcdtodec(minute);
  8064  002898  C016  F010         	movff	getTime@minute+1,bcdtodec@dec+1
  8065  00289C  C015  F00F         	movff	getTime@minute,bcdtodec@dec
  8066  0028A0  EC02  F017         	call	_bcdtodec	;wreg free
  8067                           
  8068                           ;DS3231.c: 53: toHour(hour);
  8069  0028A4  C014  F010         	movff	getTime@hour+1,toHour@hour+1
  8070  0028A8  C013  F00F         	movff	getTime@hour,toHour@hour
  8071  0028AC  ECBE  F015         	call	_toHour	;wreg free
  8072  0028B0  0012               	return	
  8073  0028B2                     __end_of_getTime:
  8074                           	opt stack 0
  8075                           tosu	equ	0xFFF
  8076                           tosh	equ	0xFFE
  8077                           tosl	equ	0xFFD
  8078                           pclath	equ	0xFFA
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           intcon2	equ	0xFF1
  8087                           postinc0	equ	0xFEE
  8088                           wreg	equ	0xFE8
  8089                           postdec1	equ	0xFE5
  8090                           fsr1l	equ	0xFE1
  8091                           indf2	equ	0xFDF
  8092                           postinc2	equ	0xFDE
  8093                           postdec2	equ	0xFDD
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function _toHour *****************
  8099 ;; Defined at:
  8100 ;;		line 89 in file "src/DS3231.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  hour            2   14[COMRAM] PTR unsigned char 
  8103 ;;		 -> hour(1), 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  h               1   17[COMRAM] struct .
  8106 ;; Return value:  Size  Location     Type
  8107 ;;		None               void
  8108 ;; Registers used:
  8109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8110 ;; Tracked objects:
  8111 ;;		On entry : 0/0
  8112 ;;		On exit  : 0/0
  8113 ;;		Unchanged: 0/0
  8114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8119 ;;Total ram usage:        4 bytes
  8120 ;; Hardware stack levels used:    1
  8121 ;; Hardware stack levels required when called:    1
  8122 ;; This function calls:
  8123 ;;		Nothing
  8124 ;; This function is called by:
  8125 ;;		_getTime
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           	psect	text27
  8130  002B7C                     __ptext27:
  8131                           	opt stack 0
  8132  002B7C                     _toHour:
  8133                           	opt stack 27
  8134                           
  8135                           ;DS3231.c: 90: HOUR_t h;
  8136                           ;DS3231.c: 91: h.hour = *hour;
  8137                           
  8138                           ;incstack = 0
  8139  002B7C  C00F  FFD9         	movff	toHour@hour,fsr2l
  8140  002B80  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8141  002B84  50DF               	movf	indf2,w,c
  8142  002B86  6E12               	movwf	toHour@h,c
  8143                           
  8144                           ;DS3231.c: 92: *hour = h.hour0 + h.hour1 * 10;
  8145  002B88  5012               	movf	toHour@h,w,c
  8146  002B8A  0B0F               	andlw	15
  8147  002B8C  6E11               	movwf	??_toHour& (0+255),c
  8148  002B8E  A812               	btfss	toHour@h,4,c
  8149  002B90  D002               	goto	u3490
  8150  002B92  0E01               	movlw	1
  8151  002B94  D001               	goto	u3496
  8152  002B96                     u3490:
  8153  002B96  0E00               	movlw	0
  8154  002B98                     u3496:
  8155  002B98  0D0A               	mullw	10
  8156  002B9A  50F3               	movf	prodl,w,c
  8157  002B9C  2411               	addwf	??_toHour,w,c
  8158  002B9E  C00F  FFD9         	movff	toHour@hour,fsr2l
  8159  002BA2  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8160  002BA6  6EDF               	movwf	indf2,c
  8161                           
  8162                           ;DS3231.c: 93: if (h.mode) {
  8163  002BA8  AC12               	btfss	toHour@h,6,c
  8164  002BAA  D009               	goto	l3415
  8165                           
  8166                           ;DS3231.c: 94: if (h.hour2) {
  8167  002BAC  AA12               	btfss	toHour@h,5,c
  8168  002BAE  0012               	return	
  8169                           
  8170                           ;DS3231.c: 95: *hour += 12;
  8171  002BB0  C00F  FFD9         	movff	toHour@hour,fsr2l
  8172  002BB4  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8173  002BB8  0E0C               	movlw	12
  8174  002BBA  26DF               	addwf	indf2,f,c
  8175  002BBC  0012               	return	
  8176  002BBE                     l3415:
  8177                           
  8178                           ;DS3231.c: 98: *hour += h.hour2 * 20;
  8179  002BBE  AA12               	btfss	toHour@h,5,c
  8180  002BC0  D002               	goto	u3520
  8181  002BC2  0E01               	movlw	1
  8182  002BC4  D001               	goto	u3526
  8183  002BC6                     u3520:
  8184  002BC6  0E00               	movlw	0
  8185  002BC8                     u3526:
  8186  002BC8  0D14               	mullw	20
  8187  002BCA  C00F  FFD9         	movff	toHour@hour,fsr2l
  8188  002BCE  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8189  002BD2  50F3               	movf	prodl,w,c
  8190  002BD4  26DF               	addwf	indf2,f,c
  8191  002BD6  0012               	return	
  8192  002BD8                     __end_of_toHour:
  8193                           	opt stack 0
  8194                           tosu	equ	0xFFF
  8195                           tosh	equ	0xFFE
  8196                           tosl	equ	0xFFD
  8197                           pclath	equ	0xFFA
  8198                           tblptru	equ	0xFF8
  8199                           tblptrh	equ	0xFF7
  8200                           tblptrl	equ	0xFF6
  8201                           tablat	equ	0xFF5
  8202                           prodh	equ	0xFF4
  8203                           prodl	equ	0xFF3
  8204                           intcon	equ	0xFF2
  8205                           intcon2	equ	0xFF1
  8206                           postinc0	equ	0xFEE
  8207                           wreg	equ	0xFE8
  8208                           postdec1	equ	0xFE5
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _getTemperature *****************
  8218 ;; Defined at:
  8219 ;;		line 21 in file "src/DS18B20.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  address         2   56[COMRAM] PTR unsigned char 
  8222 ;;		 -> tempAddress(8), 
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  scratchPad      9    0[BANK0 ] unsigned char [9]
  8225 ;;  temperature     3    9[BANK0 ] float 
  8226 ;;  i               1   12[BANK0 ] unsigned char 
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  3   56[COMRAM] float 
  8229 ;; Registers used:
  8230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8236 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8237 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8239 ;;      Totals:         5      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8240 ;;Total ram usage:       18 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:    3
  8243 ;; This function calls:
  8244 ;;		___awtoft
  8245 ;;		___ftmul
  8246 ;;		_onewireInit
  8247 ;;		_onewireReadByte
  8248 ;;		_onewireWriteByte
  8249 ;; This function is called by:
  8250 ;;		_loop
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text28
  8255  0022AE                     __ptext28:
  8256                           	opt stack 0
  8257  0022AE                     _getTemperature:
  8258                           	opt stack 26
  8259                           
  8260                           ;DS18B20.c: 23: float temperature;
  8261                           ;DS18B20.c: 24: unsigned char scratchPad[9] = {0,0,0,0,0,0,0,0,0};
  8262                           
  8263                           ;incstack = 0
  8264  0022AE  EE20  F0B2         	lfsr	2,getTemperature@F206
  8265  0022B2  EE10  F060         	lfsr	1,getTemperature@scratchPad
  8266  0022B6  0E09               	movlw	9
  8267  0022B8                     u6281:
  8268  0022B8  CFDE FFE6          	movff	postinc2,postinc1
  8269  0022BC  2EE8               	decfsz	wreg,f,c
  8270  0022BE  D7FC               	goto	u6281
  8271                           
  8272                           ;DS18B20.c: 26: onewireInit();
  8273  0022C0  EC60  F017         	call	_onewireInit	;wreg free
  8274                           
  8275                           ;DS18B20.c: 27: onewireWriteByte(0x55);
  8276  0022C4  0E55               	movlw	85
  8277  0022C6  ECEB  F016         	call	_onewireWriteByte
  8278                           
  8279                           ;DS18B20.c: 28: unsigned char i;
  8280                           ;DS18B20.c: 29: for (i = 0; i < 8; i++)
  8281  0022CA  0E00               	movlw	0
  8282  0022CC  0100               	movlb	0	; () banked
  8283  0022CE  6F6C               	movwf	getTemperature@i& (0+255),b
  8284  0022D0  D00E               	goto	L8
  8285  0022D2                     l5103:
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;DS18B20.c: 30: onewireWriteByte(address[i]);
  8289  0022D2  0100               	movlb	0	; () banked
  8290  0022D4  516C               	movf	getTemperature@i& (0+255),w,b
  8291  0022D6  0D01               	mullw	1
  8292  0022D8  50F3               	movf	prodl,w,c
  8293  0022DA  2439               	addwf	getTemperature@address,w,c
  8294  0022DC  6ED9               	movwf	fsr2l,c
  8295  0022DE  50F4               	movf	prodh,w,c
  8296  0022E0  203A               	addwfc	getTemperature@address+1,w,c
  8297  0022E2  6EDA               	movwf	fsr2h,c
  8298  0022E4  50DF               	movf	indf2,w,c
  8299  0022E6  ECEB  F016         	call	_onewireWriteByte
  8300  0022EA  0100               	movlb	0	; () banked
  8301  0022EC  2B6C               	incf	getTemperature@i& (0+255),f,b
  8302  0022EE                     L8:
  8303                           
  8304                           ; BSR set to: 0
  8305  0022EE  0E07               	movlw	7
  8306  0022F0  0100               	movlb	0	; () banked
  8307  0022F2  656C               	cpfsgt	getTemperature@i& (0+255),b
  8308  0022F4  D7EE               	goto	l5103
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;DS18B20.c: 31: onewireWriteByte(0xBE);
  8312                           
  8313                           ; BSR set to: 0
  8314  0022F6  0EBE               	movlw	190
  8315  0022F8  ECEB  F016         	call	_onewireWriteByte
  8316                           
  8317                           ;DS18B20.c: 33: for (i = 0; i < 2; i++) {
  8318  0022FC  0E00               	movlw	0
  8319  0022FE  0100               	movlb	0	; () banked
  8320  002300  6F6C               	movwf	getTemperature@i& (0+255),b
  8321  002302  D010               	goto	L9
  8322  002304                     l5117:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;DS18B20.c: 34: scratchPad[i] = onewireReadByte();
  8326  002304  0100               	movlb	0	; () banked
  8327  002306  516C               	movf	getTemperature@i& (0+255),w,b
  8328  002308  0D01               	mullw	1
  8329  00230A  0100               	movlb	0	; () banked
  8330  00230C  0E60               	movlw	low getTemperature@scratchPad
  8331  00230E  24F3               	addwf	prodl,w,c
  8332  002310  6ED9               	movwf	fsr2l,c
  8333  002312  0100               	movlb	0	; () banked
  8334  002314  0E00               	movlw	high getTemperature@scratchPad
  8335  002316  20F4               	addwfc	prodh,w,c
  8336  002318  6EDA               	movwf	fsr2h,c
  8337  00231A  EC3C  F017         	call	_onewireReadByte	;wreg free
  8338  00231E  6EDF               	movwf	indf2,c
  8339  002320  0100               	movlb	0	; () banked
  8340  002322  2B6C               	incf	getTemperature@i& (0+255),f,b
  8341  002324                     L9:
  8342                           
  8343                           ; BSR set to: 0
  8344  002324  0E01               	movlw	1
  8345  002326  0100               	movlb	0	; () banked
  8346  002328  656C               	cpfsgt	getTemperature@i& (0+255),b
  8347  00232A  D7EC               	goto	l5117
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;DS18B20.c: 35: }
  8351                           ;DS18B20.c: 36: onewireInit();
  8352                           
  8353                           ; BSR set to: 0
  8354  00232C  EC60  F017         	call	_onewireInit	;wreg free
  8355                           
  8356                           ;DS18B20.c: 37: temperature = ((scratchPad[1] * 256) + scratchPad[0])*0.0625;
  8357  002330  0100               	movlb	0	; () banked
  8358  002332  5161               	movf	(getTemperature@scratchPad+1)& (0+255),w,b
  8359  002334  6E3D               	movwf	(??_getTemperature+1)& (0+255),c
  8360  002336  6A3C               	clrf	??_getTemperature& (0+255),c
  8361  002338  0100               	movlb	0	; () banked
  8362  00233A  5160               	movf	getTemperature@scratchPad& (0+255),w,b
  8363  00233C  243C               	addwf	??_getTemperature,w,c
  8364  00233E  6E17               	movwf	___awtoft@c,c
  8365  002340  0100               	movlb	0	; () banked
  8366  002342  0E00               	movlw	0
  8367  002344  203D               	addwfc	??_getTemperature+1,w,c
  8368  002346  6E18               	movwf	___awtoft@c+1,c
  8369  002348  EC19  F016         	call	___awtoft	;wreg free
  8370  00234C  C017  F02A         	movff	?___awtoft,___ftmul@f1
  8371  002350  C018  F02B         	movff	?___awtoft+1,___ftmul@f1+1
  8372  002354  C019  F02C         	movff	?___awtoft+2,___ftmul@f1+2
  8373  002358  0E00               	movlw	0
  8374  00235A  6E2D               	movwf	___ftmul@f2,c
  8375  00235C  0E80               	movlw	128
  8376  00235E  6E2E               	movwf	___ftmul@f2+1,c
  8377  002360  0E3D               	movlw	61
  8378  002362  6E2F               	movwf	___ftmul@f2+2,c
  8379  002364  EC6E  F010         	call	___ftmul	;wreg free
  8380  002368  C02A  F069         	movff	?___ftmul,getTemperature@temperature
  8381  00236C  C02B  F06A         	movff	?___ftmul+1,getTemperature@temperature+1
  8382  002370  C02C  F06B         	movff	?___ftmul+2,getTemperature@temperature+2
  8383                           
  8384                           ;DS18B20.c: 39: return temperature;
  8385  002374  C069  F039         	movff	getTemperature@temperature,?_getTemperature
  8386  002378  C06A  F03A         	movff	getTemperature@temperature+1,?_getTemperature+1
  8387  00237C  C06B  F03B         	movff	getTemperature@temperature+2,?_getTemperature+2
  8388  002380  0012               	return	
  8389  002382                     __end_of_getTemperature:
  8390                           	opt stack 0
  8391                           tosu	equ	0xFFF
  8392                           tosh	equ	0xFFE
  8393                           tosl	equ	0xFFD
  8394                           pclath	equ	0xFFA
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           intcon	equ	0xFF2
  8402                           intcon2	equ	0xFF1
  8403                           postinc0	equ	0xFEE
  8404                           wreg	equ	0xFE8
  8405                           postinc1	equ	0xFE6
  8406                           postdec1	equ	0xFE5
  8407                           fsr1l	equ	0xFE1
  8408                           indf2	equ	0xFDF
  8409                           postinc2	equ	0xFDE
  8410                           postdec2	equ	0xFDD
  8411                           fsr2h	equ	0xFDA
  8412                           fsr2l	equ	0xFD9
  8413                           status	equ	0xFD8
  8414                           
  8415 ;; *************** function _onewireReadByte *****************
  8416 ;; Defined at:
  8417 ;;		line 50 in file "src/onewire.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  loop            1   16[COMRAM] unsigned char 
  8422 ;;  result          1   15[COMRAM] unsigned char 
  8423 ;; Return value:  Size  Location     Type
  8424 ;;                  1    wreg      unsigned char 
  8425 ;; Registers used:
  8426 ;;		wreg, status,2, status,0, cstack
  8427 ;; Tracked objects:
  8428 ;;		On entry : 0/0
  8429 ;;		On exit  : 0/0
  8430 ;;		Unchanged: 0/0
  8431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8433 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8435 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8436 ;;Total ram usage:        2 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    2
  8439 ;; This function calls:
  8440 ;;		_onewireReadBit
  8441 ;; This function is called by:
  8442 ;;		_getTemperature
  8443 ;;		_getTemperatureInt
  8444 ;;		_printSingleAddress
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text29
  8449  002E78                     __ptext29:
  8450                           	opt stack 0
  8451  002E78                     _onewireReadByte:
  8452                           	opt stack 26
  8453                           
  8454                           ;onewire.c: 51: unsigned char result = 0;
  8455                           
  8456                           ;incstack = 0
  8457  002E78  0E00               	movlw	0
  8458  002E7A  6E10               	movwf	onewireReadByte@result,c
  8459                           
  8460                           ;onewire.c: 53: for (unsigned char loop = 0; loop < 8; loop++) {
  8461  002E7C  0E00               	movlw	0
  8462  002E7E  6E11               	movwf	onewireReadByte@loop,c
  8463  002E80  D008               	goto	L10
  8464  002E82                     l4611:
  8465                           
  8466                           ;onewire.c: 55: result >>= 1;
  8467  002E82  90D8               	bcf	status,0,c
  8468  002E84  3210               	rrcf	onewireReadByte@result,f,c
  8469                           
  8470                           ;onewire.c: 58: if (onewireReadBit())
  8471  002E86  EC4E  F017         	call	_onewireReadBit	;wreg free
  8472  002E8A  0900               	iorlw	0
  8473  002E8C  A4D8               	btfss	status,2,c
  8474                           
  8475                           ;onewire.c: 59: result |= 0x80;
  8476  002E8E  8E10               	bsf	onewireReadByte@result,7,c
  8477  002E90  2A11               	incf	onewireReadByte@loop,f,c
  8478  002E92                     L10:
  8479  002E92  0E07               	movlw	7
  8480  002E94  6411               	cpfsgt	onewireReadByte@loop,c
  8481  002E96  D7F5               	goto	l4611
  8482                           
  8483                           ;onewire.c: 60: }
  8484                           ;onewire.c: 61: return result;
  8485  002E98  5010               	movf	onewireReadByte@result,w,c
  8486  002E9A  0012               	return	
  8487  002E9C                     __end_of_onewireReadByte:
  8488                           	opt stack 0
  8489                           tosu	equ	0xFFF
  8490                           tosh	equ	0xFFE
  8491                           tosl	equ	0xFFD
  8492                           pclath	equ	0xFFA
  8493                           tblptru	equ	0xFF8
  8494                           tblptrh	equ	0xFF7
  8495                           tblptrl	equ	0xFF6
  8496                           tablat	equ	0xFF5
  8497                           prodh	equ	0xFF4
  8498                           prodl	equ	0xFF3
  8499                           intcon	equ	0xFF2
  8500                           intcon2	equ	0xFF1
  8501                           postinc0	equ	0xFEE
  8502                           wreg	equ	0xFE8
  8503                           postinc1	equ	0xFE6
  8504                           postdec1	equ	0xFE5
  8505                           fsr1l	equ	0xFE1
  8506                           indf2	equ	0xFDF
  8507                           postinc2	equ	0xFDE
  8508                           postdec2	equ	0xFDD
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _getDate *****************
  8514 ;; Defined at:
  8515 ;;		line 56 in file "src/DS3231.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;  day             2   20[COMRAM] PTR unsigned char 
  8518 ;;		 -> day(1), 
  8519 ;;  month           2   22[COMRAM] PTR unsigned char 
  8520 ;;		 -> month(1), 
  8521 ;;  year            2   24[COMRAM] PTR unsigned char 
  8522 ;;		 -> year(1), 
  8523 ;; Auto vars:     Size  Location     Type
  8524 ;;		None
  8525 ;; Return value:  Size  Location     Type
  8526 ;;		None               void
  8527 ;; Registers used:
  8528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8529 ;; Tracked objects:
  8530 ;;		On entry : 0/0
  8531 ;;		On exit  : 0/0
  8532 ;;		Unchanged: 0/0
  8533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8534 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8537 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8538 ;;Total ram usage:        6 bytes
  8539 ;; Hardware stack levels used:    1
  8540 ;; Hardware stack levels required when called:    4
  8541 ;; This function calls:
  8542 ;;		__I2CAddress
  8543 ;;		__I2CReceive
  8544 ;;		__I2CRepeatedStart
  8545 ;;		__I2CSend
  8546 ;;		__I2CStart
  8547 ;;		__I2CStop
  8548 ;;		_bcdtodec
  8549 ;;		_toMonth
  8550 ;; This function is called by:
  8551 ;;		_loop
  8552 ;; This function uses a non-reentrant model
  8553 ;;
  8554                           
  8555                           	psect	text30
  8556  002730                     __ptext30:
  8557                           	opt stack 0
  8558  002730                     _getDate:
  8559                           	opt stack 25
  8560                           
  8561                           ;DS3231.c: 57: _I2CStart();
  8562                           
  8563                           ;incstack = 0
  8564  002730  ECAE  F017         	call	__I2CStart	;wreg free
  8565                           
  8566                           ;DS3231.c: 58: _I2CAddress(0x68, 0);
  8567  002734  0E00               	movlw	0
  8568  002736  6E11               	movwf	__I2CAddress@readnwrite,c
  8569  002738  0E68               	movlw	104
  8570  00273A  ECC9  F017         	call	__I2CAddress
  8571                           
  8572                           ;DS3231.c: 59: _I2CSend(0x04);
  8573  00273E  0E04               	movlw	4
  8574  002740  EC9B  F017         	call	__I2CSend
  8575                           
  8576                           ;DS3231.c: 60: _I2CRepeatedStart();
  8577  002744  ECB7  F017         	call	__I2CRepeatedStart	;wreg free
  8578                           
  8579                           ;DS3231.c: 61: _I2CAddress(0x68, 1);
  8580  002748  0E01               	movlw	1
  8581  00274A  6E11               	movwf	__I2CAddress@readnwrite,c
  8582  00274C  0E68               	movlw	104
  8583  00274E  ECC9  F017         	call	__I2CAddress
  8584                           
  8585                           ;DS3231.c: 62: _I2CReceive(day, 0);
  8586  002752  C016  F011         	movff	getDate@day+1,__I2CReceive@data+1
  8587  002756  C015  F010         	movff	getDate@day,__I2CReceive@data
  8588  00275A  0E00               	movlw	0
  8589  00275C  6E12               	movwf	__I2CReceive@ack,c
  8590  00275E  ECD3  F016         	call	__I2CReceive	;wreg free
  8591                           
  8592                           ;DS3231.c: 63: _I2CReceive(month, 0);
  8593  002762  C018  F011         	movff	getDate@month+1,__I2CReceive@data+1
  8594  002766  C017  F010         	movff	getDate@month,__I2CReceive@data
  8595  00276A  0E00               	movlw	0
  8596  00276C  6E12               	movwf	__I2CReceive@ack,c
  8597  00276E  ECD3  F016         	call	__I2CReceive	;wreg free
  8598                           
  8599                           ;DS3231.c: 64: _I2CReceive(year, 1);
  8600  002772  C01A  F011         	movff	getDate@year+1,__I2CReceive@data+1
  8601  002776  C019  F010         	movff	getDate@year,__I2CReceive@data
  8602  00277A  0E01               	movlw	1
  8603  00277C  6E12               	movwf	__I2CReceive@ack,c
  8604  00277E  ECD3  F016         	call	__I2CReceive	;wreg free
  8605                           
  8606                           ;DS3231.c: 65: _I2CStop();
  8607  002782  ECA5  F017         	call	__I2CStop	;wreg free
  8608                           
  8609                           ;DS3231.c: 66: bcdtodec(year);
  8610  002786  C01A  F010         	movff	getDate@year+1,bcdtodec@dec+1
  8611  00278A  C019  F00F         	movff	getDate@year,bcdtodec@dec
  8612  00278E  EC02  F017         	call	_bcdtodec	;wreg free
  8613                           
  8614                           ;DS3231.c: 67: toMonth(month, year);
  8615  002792  C018  F010         	movff	getDate@month+1,toMonth@month+1
  8616  002796  C017  F00F         	movff	getDate@month,toMonth@month
  8617  00279A  C01A  F012         	movff	getDate@year+1,toMonth@year+1
  8618  00279E  C019  F011         	movff	getDate@year,toMonth@year
  8619  0027A2  EC3D  F016         	call	_toMonth	;wreg free
  8620                           
  8621                           ;DS3231.c: 68: bcdtodec(day);
  8622  0027A6  C016  F010         	movff	getDate@day+1,bcdtodec@dec+1
  8623  0027AA  C015  F00F         	movff	getDate@day,bcdtodec@dec
  8624  0027AE  EC02  F017         	call	_bcdtodec	;wreg free
  8625  0027B2  0012               	return	
  8626  0027B4                     __end_of_getDate:
  8627                           	opt stack 0
  8628                           tosu	equ	0xFFF
  8629                           tosh	equ	0xFFE
  8630                           tosl	equ	0xFFD
  8631                           pclath	equ	0xFFA
  8632                           tblptru	equ	0xFF8
  8633                           tblptrh	equ	0xFF7
  8634                           tblptrl	equ	0xFF6
  8635                           tablat	equ	0xFF5
  8636                           prodh	equ	0xFF4
  8637                           prodl	equ	0xFF3
  8638                           intcon	equ	0xFF2
  8639                           intcon2	equ	0xFF1
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postinc1	equ	0xFE6
  8643                           postdec1	equ	0xFE5
  8644                           fsr1l	equ	0xFE1
  8645                           indf2	equ	0xFDF
  8646                           postinc2	equ	0xFDE
  8647                           postdec2	equ	0xFDD
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _toMonth *****************
  8653 ;; Defined at:
  8654 ;;		line 102 in file "src/DS3231.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  month           2   14[COMRAM] PTR unsigned char 
  8657 ;;		 -> month(1), 
  8658 ;;  year            2   16[COMRAM] PTR unsigned char 
  8659 ;;		 -> year(1), 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  m               1   19[COMRAM] struct .
  8662 ;; Return value:  Size  Location     Type
  8663 ;;		None               void
  8664 ;; Registers used:
  8665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8671 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8674 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8675 ;;Total ram usage:        6 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    1
  8678 ;; This function calls:
  8679 ;;		Nothing
  8680 ;; This function is called by:
  8681 ;;		_getDate
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           	psect	text31
  8686  002C7A                     __ptext31:
  8687                           	opt stack 0
  8688  002C7A                     _toMonth:
  8689                           	opt stack 27
  8690                           
  8691                           ;DS3231.c: 103: MONTH_t m;
  8692                           ;DS3231.c: 104: m.month = *month;
  8693                           
  8694                           ;incstack = 0
  8695  002C7A  C00F  FFD9         	movff	toMonth@month,fsr2l
  8696  002C7E  C010  FFDA         	movff	toMonth@month+1,fsr2h
  8697  002C82  50DF               	movf	indf2,w,c
  8698  002C84  6E14               	movwf	toMonth@m,c
  8699                           
  8700                           ;DS3231.c: 105: *month = (m.month0) + (m.month1) * 10;
  8701  002C86  5014               	movf	toMonth@m,w,c
  8702  002C88  0B0F               	andlw	15
  8703  002C8A  6E13               	movwf	??_toMonth& (0+255),c
  8704  002C8C  3814               	swapf	toMonth@m,w,c
  8705  002C8E  0B07               	andlw	7
  8706  002C90  0D0A               	mullw	10
  8707  002C92  50F3               	movf	prodl,w,c
  8708  002C94  2413               	addwf	??_toMonth,w,c
  8709  002C96  C00F  FFD9         	movff	toMonth@month,fsr2l
  8710  002C9A  C010  FFDA         	movff	toMonth@month+1,fsr2h
  8711  002C9E  6EDF               	movwf	indf2,c
  8712                           
  8713                           ;DS3231.c: 106: *year += m.century * 100;
  8714  002CA0  AE14               	btfss	toMonth@m,7,c
  8715  002CA2  D002               	goto	u3530
  8716  002CA4  0E01               	movlw	1
  8717  002CA6  D001               	goto	u3536
  8718  002CA8                     u3530:
  8719  002CA8  0E00               	movlw	0
  8720  002CAA                     u3536:
  8721  002CAA  0D64               	mullw	100
  8722  002CAC  C011  FFD9         	movff	toMonth@year,fsr2l
  8723  002CB0  C012  FFDA         	movff	toMonth@year+1,fsr2h
  8724  002CB4  50F3               	movf	prodl,w,c
  8725  002CB6  26DF               	addwf	indf2,f,c
  8726  002CB8  0012               	return	
  8727  002CBA                     __end_of_toMonth:
  8728                           	opt stack 0
  8729                           tosu	equ	0xFFF
  8730                           tosh	equ	0xFFE
  8731                           tosl	equ	0xFFD
  8732                           pclath	equ	0xFFA
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodh	equ	0xFF4
  8738                           prodl	equ	0xFF3
  8739                           intcon	equ	0xFF2
  8740                           intcon2	equ	0xFF1
  8741                           postinc0	equ	0xFEE
  8742                           wreg	equ	0xFE8
  8743                           postinc1	equ	0xFE6
  8744                           postdec1	equ	0xFE5
  8745                           fsr1l	equ	0xFE1
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function _bcdtodec *****************
  8754 ;; Defined at:
  8755 ;;		line 109 in file "src/DS3231.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;  dec             2   14[COMRAM] PTR unsigned char 
  8758 ;;		 -> year(1), day(1), second(1), minute(1), 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  bcd             1   17[COMRAM] struct .
  8761 ;; Return value:  Size  Location     Type
  8762 ;;		None               void
  8763 ;; Registers used:
  8764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8765 ;; Tracked objects:
  8766 ;;		On entry : 0/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: 0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8770 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8773 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8774 ;;Total ram usage:        4 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    1
  8777 ;; This function calls:
  8778 ;;		Nothing
  8779 ;; This function is called by:
  8780 ;;		_getTime
  8781 ;;		_getDate
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text32
  8786  002E04                     __ptext32:
  8787                           	opt stack 0
  8788  002E04                     _bcdtodec:
  8789                           	opt stack 27
  8790                           
  8791                           ;DS3231.c: 110: BCD_t bcd;
  8792                           ;DS3231.c: 111: bcd.bcd = *dec;
  8793                           
  8794                           ;incstack = 0
  8795  002E04  C00F  FFD9         	movff	bcdtodec@dec,fsr2l
  8796  002E08  C010  FFDA         	movff	bcdtodec@dec+1,fsr2h
  8797  002E0C  50DF               	movf	indf2,w,c
  8798  002E0E  6E12               	movwf	bcdtodec@bcd,c
  8799                           
  8800                           ;DS3231.c: 112: *dec = (bcd.bcd0) + (bcd.bcd1) * 10;
  8801  002E10  5012               	movf	bcdtodec@bcd,w,c
  8802  002E12  0B0F               	andlw	15
  8803  002E14  6E11               	movwf	??_bcdtodec& (0+255),c
  8804  002E16  3812               	swapf	bcdtodec@bcd,w,c
  8805  002E18  0B0F               	andlw	15
  8806  002E1A  0D0A               	mullw	10
  8807  002E1C  50F3               	movf	prodl,w,c
  8808  002E1E  2411               	addwf	??_bcdtodec,w,c
  8809  002E20  C00F  FFD9         	movff	bcdtodec@dec,fsr2l
  8810  002E24  C010  FFDA         	movff	bcdtodec@dec+1,fsr2h
  8811  002E28  6EDF               	movwf	indf2,c
  8812  002E2A  0012               	return	
  8813  002E2C                     __end_of_bcdtodec:
  8814                           	opt stack 0
  8815                           tosu	equ	0xFFF
  8816                           tosh	equ	0xFFE
  8817                           tosl	equ	0xFFD
  8818                           pclath	equ	0xFFA
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           intcon	equ	0xFF2
  8826                           intcon2	equ	0xFF1
  8827                           postinc0	equ	0xFEE
  8828                           wreg	equ	0xFE8
  8829                           postinc1	equ	0xFE6
  8830                           postdec1	equ	0xFE5
  8831                           fsr1l	equ	0xFE1
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           fsr2h	equ	0xFDA
  8836                           fsr2l	equ	0xFD9
  8837                           status	equ	0xFD8
  8838                           
  8839 ;; *************** function __I2CStop *****************
  8840 ;; Defined at:
  8841 ;;		line 30 in file "src/I2C.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;		None
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;		None
  8846 ;; Return value:  Size  Location     Type
  8847 ;;		None               void
  8848 ;; Registers used:
  8849 ;;		wreg, status,2, status,0, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8859 ;;Total ram usage:        0 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    2
  8862 ;; This function calls:
  8863 ;;		__I2CWait
  8864 ;; This function is called by:
  8865 ;;		_getTime
  8866 ;;		_getDate
  8867 ;;		_setRTC
  8868 ;;		_setDay
  8869 ;;		_getDay
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           	psect	text33
  8874  002F4A                     __ptext33:
  8875                           	opt stack 0
  8876  002F4A                     __I2CStop:
  8877                           	opt stack 26
  8878  002F4A                     l208:
  8879                           
  8880                           ;I2C.c: 32: PIR2bits.BCLIF = 0;
  8881  002F4A  96A1               	bcf	4001,3,c	;volatile
  8882                           
  8883                           ;I2C.c: 33: _I2CWait();
  8884  002F4C  ECC0  F017         	call	__I2CWait	;wreg free
  8885                           
  8886                           ;I2C.c: 34: SSPCON2bits.PEN = 1;
  8887  002F50  84C5               	bsf	4037,2,c	;volatile
  8888  002F52                     l209:
  8889  002F52  B4C5               	btfsc	4037,2,c	;volatile
  8890  002F54  D7FE               	goto	l209
  8891                           
  8892                           ;I2C.c: 36: } while (PIR2bits.BCLIF == 1);
  8893  002F56  A6A1               	btfss	4001,3,c	;volatile
  8894  002F58  0012               	return	
  8895  002F5A  D7F7               	goto	l208
  8896  002F5C                     __end_of__I2CStop:
  8897                           	opt stack 0
  8898                           tosu	equ	0xFFF
  8899                           tosh	equ	0xFFE
  8900                           tosl	equ	0xFFD
  8901                           pclath	equ	0xFFA
  8902                           tblptru	equ	0xFF8
  8903                           tblptrh	equ	0xFF7
  8904                           tblptrl	equ	0xFF6
  8905                           tablat	equ	0xFF5
  8906                           prodh	equ	0xFF4
  8907                           prodl	equ	0xFF3
  8908                           intcon	equ	0xFF2
  8909                           intcon2	equ	0xFF1
  8910                           postinc0	equ	0xFEE
  8911                           wreg	equ	0xFE8
  8912                           postinc1	equ	0xFE6
  8913                           postdec1	equ	0xFE5
  8914                           fsr1l	equ	0xFE1
  8915                           indf2	equ	0xFDF
  8916                           postinc2	equ	0xFDE
  8917                           postdec2	equ	0xFDD
  8918                           fsr2h	equ	0xFDA
  8919                           fsr2l	equ	0xFD9
  8920                           status	equ	0xFD8
  8921                           
  8922 ;; *************** function __I2CStart *****************
  8923 ;; Defined at:
  8924 ;;		line 39 in file "src/I2C.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;		None
  8927 ;; Auto vars:     Size  Location     Type
  8928 ;;		None
  8929 ;; Return value:  Size  Location     Type
  8930 ;;		None               void
  8931 ;; Registers used:
  8932 ;;		wreg, status,2, status,0, cstack
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8942 ;;Total ram usage:        0 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    2
  8945 ;; This function calls:
  8946 ;;		__I2CWait
  8947 ;; This function is called by:
  8948 ;;		_getTime
  8949 ;;		_getDate
  8950 ;;		_setRTC
  8951 ;;		_setDay
  8952 ;;		_getDay
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text34
  8957  002F5C                     __ptext34:
  8958                           	opt stack 0
  8959  002F5C                     __I2CStart:
  8960                           	opt stack 26
  8961  002F5C                     l216:
  8962                           
  8963                           ;I2C.c: 41: PIR2bits.BCLIF = 0;
  8964  002F5C  96A1               	bcf	4001,3,c	;volatile
  8965                           
  8966                           ;I2C.c: 42: _I2CWait();
  8967  002F5E  ECC0  F017         	call	__I2CWait	;wreg free
  8968                           
  8969                           ;I2C.c: 43: SSPCON2bits.SEN = 1;
  8970  002F62  80C5               	bsf	4037,0,c	;volatile
  8971  002F64                     l217:
  8972  002F64  B0C5               	btfsc	4037,0,c	;volatile
  8973  002F66  D7FE               	goto	l217
  8974                           
  8975                           ;I2C.c: 45: } while (PIR2bits.BCLIF == 1);
  8976  002F68  A6A1               	btfss	4001,3,c	;volatile
  8977  002F6A  0012               	return	
  8978  002F6C  D7F7               	goto	l216
  8979  002F6E                     __end_of__I2CStart:
  8980                           	opt stack 0
  8981                           tosu	equ	0xFFF
  8982                           tosh	equ	0xFFE
  8983                           tosl	equ	0xFFD
  8984                           pclath	equ	0xFFA
  8985                           tblptru	equ	0xFF8
  8986                           tblptrh	equ	0xFF7
  8987                           tblptrl	equ	0xFF6
  8988                           tablat	equ	0xFF5
  8989                           prodh	equ	0xFF4
  8990                           prodl	equ	0xFF3
  8991                           intcon	equ	0xFF2
  8992                           intcon2	equ	0xFF1
  8993                           postinc0	equ	0xFEE
  8994                           wreg	equ	0xFE8
  8995                           postinc1	equ	0xFE6
  8996                           postdec1	equ	0xFE5
  8997                           fsr1l	equ	0xFE1
  8998                           indf2	equ	0xFDF
  8999                           postinc2	equ	0xFDE
  9000                           postdec2	equ	0xFDD
  9001                           fsr2h	equ	0xFDA
  9002                           fsr2l	equ	0xFD9
  9003                           status	equ	0xFD8
  9004                           
  9005 ;; *************** function __I2CRepeatedStart *****************
  9006 ;; Defined at:
  9007 ;;		line 48 in file "src/I2C.c"
  9008 ;; Parameters:    Size  Location     Type
  9009 ;;		None
  9010 ;; Auto vars:     Size  Location     Type
  9011 ;;		None
  9012 ;; Return value:  Size  Location     Type
  9013 ;;		None               void
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9025 ;;Total ram usage:        0 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    2
  9028 ;; This function calls:
  9029 ;;		__I2CWait
  9030 ;; This function is called by:
  9031 ;;		_getTime
  9032 ;;		_getDate
  9033 ;;		_getDay
  9034 ;; This function uses a non-reentrant model
  9035 ;;
  9036                           
  9037                           	psect	text35
  9038  002F6E                     __ptext35:
  9039                           	opt stack 0
  9040  002F6E                     __I2CRepeatedStart:
  9041                           	opt stack 26
  9042  002F6E                     l224:
  9043                           
  9044                           ;I2C.c: 50: PIR2bits.BCLIF = 0;
  9045  002F6E  96A1               	bcf	4001,3,c	;volatile
  9046                           
  9047                           ;I2C.c: 51: _I2CWait();
  9048  002F70  ECC0  F017         	call	__I2CWait	;wreg free
  9049                           
  9050                           ;I2C.c: 52: SSPCON2bits.RSEN = 1;
  9051  002F74  82C5               	bsf	4037,1,c	;volatile
  9052  002F76                     l225:
  9053  002F76  B2C5               	btfsc	4037,1,c	;volatile
  9054  002F78  D7FE               	goto	l225
  9055                           
  9056                           ;I2C.c: 54: } while (PIR2bits.BCLIF == 1);
  9057  002F7A  A6A1               	btfss	4001,3,c	;volatile
  9058  002F7C  0012               	return	
  9059  002F7E  D7F7               	goto	l224
  9060  002F80                     __end_of__I2CRepeatedStart:
  9061                           	opt stack 0
  9062                           tosu	equ	0xFFF
  9063                           tosh	equ	0xFFE
  9064                           tosl	equ	0xFFD
  9065                           pclath	equ	0xFFA
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           intcon	equ	0xFF2
  9073                           intcon2	equ	0xFF1
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postinc1	equ	0xFE6
  9077                           postdec1	equ	0xFE5
  9078                           fsr1l	equ	0xFE1
  9079                           indf2	equ	0xFDF
  9080                           postinc2	equ	0xFDE
  9081                           postdec2	equ	0xFDD
  9082                           fsr2h	equ	0xFDA
  9083                           fsr2l	equ	0xFD9
  9084                           status	equ	0xFD8
  9085                           
  9086 ;; *************** function __I2CReceive *****************
  9087 ;; Defined at:
  9088 ;;		line 11 in file "src/I2C.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  data            2   15[COMRAM] PTR unsigned char 
  9091 ;;		 -> year(1), month(1), day(1), second(1), 
  9092 ;;		 -> minute(1), hour(1), 
  9093 ;;  ack             1   17[COMRAM] unsigned char 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;		None
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9105 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9109 ;;Total ram usage:        3 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    2
  9112 ;; This function calls:
  9113 ;;		__I2CWait
  9114 ;; This function is called by:
  9115 ;;		_getTime
  9116 ;;		_getDate
  9117 ;;		_getDay
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text36
  9122  002DA6                     __ptext36:
  9123                           	opt stack 0
  9124  002DA6                     __I2CReceive:
  9125                           	opt stack 26
  9126                           
  9127                           ;I2C.c: 12: _I2CWait();
  9128                           
  9129                           ;incstack = 0
  9130  002DA6  ECC0  F017         	call	__I2CWait	;wreg free
  9131                           
  9132                           ;I2C.c: 13: SSPCON2bits.RCEN = 1;
  9133  002DAA  86C5               	bsf	4037,3,c	;volatile
  9134                           
  9135                           ;I2C.c: 14: _I2CWait();
  9136  002DAC  ECC0  F017         	call	__I2CWait	;wreg free
  9137                           
  9138                           ;I2C.c: 15: *data = SSPBUF;
  9139  002DB0  C010  FFD9         	movff	__I2CReceive@data,fsr2l
  9140  002DB4  C011  FFDA         	movff	__I2CReceive@data+1,fsr2h
  9141  002DB8  CFC9 FFDF          	movff	4041,indf2	;volatile
  9142                           
  9143                           ;I2C.c: 16: _I2CWait();
  9144  002DBC  ECC0  F017         	call	__I2CWait	;wreg free
  9145                           
  9146                           ;I2C.c: 17: SSPCON2bits.ACKDT = ack;
  9147  002DC0  B012               	btfsc	__I2CReceive@ack,0,c
  9148  002DC2  D002               	bra	u3465
  9149  002DC4  9AC5               	bcf	4037,5,c	;volatile
  9150  002DC6  D001               	bra	u3466
  9151  002DC8                     u3465:
  9152  002DC8  8AC5               	bsf	4037,5,c	;volatile
  9153  002DCA                     u3466:
  9154                           
  9155                           ;I2C.c: 18: SSPCON2bits.ACKEN = 1;
  9156  002DCA  88C5               	bsf	4037,4,c	;volatile
  9157  002DCC                     l190:
  9158  002DCC  B8C5               	btfsc	4037,4,c	;volatile
  9159  002DCE  D7FE               	goto	l190
  9160  002DD0                     l193:
  9161  002DD0  A6A1               	btfss	4001,3,c	;volatile
  9162  002DD2  0012               	return	
  9163  002DD4  D7FD               	goto	l193
  9164  002DD6                     __end_of__I2CReceive:
  9165                           	opt stack 0
  9166                           tosu	equ	0xFFF
  9167                           tosh	equ	0xFFE
  9168                           tosl	equ	0xFFD
  9169                           pclath	equ	0xFFA
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           prodh	equ	0xFF4
  9175                           prodl	equ	0xFF3
  9176                           intcon	equ	0xFF2
  9177                           intcon2	equ	0xFF1
  9178                           postinc0	equ	0xFEE
  9179                           wreg	equ	0xFE8
  9180                           postinc1	equ	0xFE6
  9181                           postdec1	equ	0xFE5
  9182                           fsr1l	equ	0xFE1
  9183                           indf2	equ	0xFDF
  9184                           postinc2	equ	0xFDE
  9185                           postdec2	equ	0xFDD
  9186                           fsr2h	equ	0xFDA
  9187                           fsr2l	equ	0xFD9
  9188                           status	equ	0xFD8
  9189                           
  9190 ;; *************** function __I2CAddress *****************
  9191 ;; Defined at:
  9192 ;;		line 3 in file "src/I2C.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  address         1    wreg     unsigned char 
  9195 ;;  readnwrite      1   16[COMRAM] unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  address         1   17[COMRAM] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;		None               void
  9200 ;; Registers used:
  9201 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9207 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9211 ;;Total ram usage:        2 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    3
  9214 ;; This function calls:
  9215 ;;		__I2CSend
  9216 ;; This function is called by:
  9217 ;;		_getTime
  9218 ;;		_getDate
  9219 ;;		_setRTC
  9220 ;;		_setDay
  9221 ;;		_getDay
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           	psect	text37
  9226  002F92                     __ptext37:
  9227                           	opt stack 0
  9228  002F92                     __I2CAddress:
  9229                           	opt stack 25
  9230                           
  9231                           ;incstack = 0
  9232                           ;__I2CAddress@address stored from wreg
  9233  002F92  6E12               	movwf	__I2CAddress@address,c
  9234                           
  9235                           ;I2C.c: 4: _I2CSend(address * 2 + readnwrite);
  9236  002F94  5012               	movf	__I2CAddress@address,w,c
  9237  002F96  0D02               	mullw	2
  9238  002F98  50F3               	movf	prodl,w,c
  9239  002F9A  2411               	addwf	__I2CAddress@readnwrite,w,c
  9240  002F9C  EC9B  F017         	call	__I2CSend
  9241  002FA0  0012               	return	
  9242  002FA2                     __end_of__I2CAddress:
  9243                           	opt stack 0
  9244                           tosu	equ	0xFFF
  9245                           tosh	equ	0xFFE
  9246                           tosl	equ	0xFFD
  9247                           pclath	equ	0xFFA
  9248                           tblptru	equ	0xFF8
  9249                           tblptrh	equ	0xFF7
  9250                           tblptrl	equ	0xFF6
  9251                           tablat	equ	0xFF5
  9252                           prodh	equ	0xFF4
  9253                           prodl	equ	0xFF3
  9254                           intcon	equ	0xFF2
  9255                           intcon2	equ	0xFF1
  9256                           postinc0	equ	0xFEE
  9257                           wreg	equ	0xFE8
  9258                           postinc1	equ	0xFE6
  9259                           postdec1	equ	0xFE5
  9260                           fsr1l	equ	0xFE1
  9261                           indf2	equ	0xFDF
  9262                           postinc2	equ	0xFDE
  9263                           postdec2	equ	0xFDD
  9264                           fsr2h	equ	0xFDA
  9265                           fsr2l	equ	0xFD9
  9266                           status	equ	0xFD8
  9267                           
  9268 ;; *************** function __I2CSend *****************
  9269 ;; Defined at:
  9270 ;;		line 23 in file "src/I2C.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;  data            1    wreg     unsigned char 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  data            1   15[COMRAM] unsigned char 
  9275 ;; Return value:  Size  Location     Type
  9276 ;;		None               void
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9287 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9288 ;;Total ram usage:        1 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    2
  9291 ;; This function calls:
  9292 ;;		__I2CWait
  9293 ;; This function is called by:
  9294 ;;		_getTime
  9295 ;;		_getDate
  9296 ;;		__I2CAddress
  9297 ;;		_setRTC
  9298 ;;		_setDay
  9299 ;;		_getDay
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text38
  9304  002F36                     __ptext38:
  9305                           	opt stack 0
  9306  002F36                     __I2CSend:
  9307                           	opt stack 26
  9308                           
  9309                           ;incstack = 0
  9310                           ;__I2CSend@data stored from wreg
  9311  002F36  6E10               	movwf	__I2CSend@data,c
  9312                           
  9313                           ;I2C.c: 24: _I2CWait();
  9314  002F38  ECC0  F017         	call	__I2CWait	;wreg free
  9315                           
  9316                           ;I2C.c: 25: SSPBUF = data;
  9317  002F3C  C010  FFC9         	movff	__I2CSend@data,4041	;volatile
  9318  002F40                     l199:
  9319  002F40  B0C7               	btfsc	4039,0,c	;volatile
  9320  002F42  D7FE               	goto	l199
  9321  002F44                     l202:
  9322  002F44  A6A1               	btfss	4001,3,c	;volatile
  9323  002F46  0012               	return	
  9324  002F48  D7FD               	goto	l202
  9325  002F4A                     __end_of__I2CSend:
  9326                           	opt stack 0
  9327                           tosu	equ	0xFFF
  9328                           tosh	equ	0xFFE
  9329                           tosl	equ	0xFFD
  9330                           pclath	equ	0xFFA
  9331                           tblptru	equ	0xFF8
  9332                           tblptrh	equ	0xFF7
  9333                           tblptrl	equ	0xFF6
  9334                           tablat	equ	0xFF5
  9335                           prodh	equ	0xFF4
  9336                           prodl	equ	0xFF3
  9337                           intcon	equ	0xFF2
  9338                           intcon2	equ	0xFF1
  9339                           postinc0	equ	0xFEE
  9340                           wreg	equ	0xFE8
  9341                           postinc1	equ	0xFE6
  9342                           postdec1	equ	0xFE5
  9343                           fsr1l	equ	0xFE1
  9344                           indf2	equ	0xFDF
  9345                           postinc2	equ	0xFDE
  9346                           postdec2	equ	0xFDD
  9347                           fsr2h	equ	0xFDA
  9348                           fsr2l	equ	0xFD9
  9349                           status	equ	0xFD8
  9350                           
  9351 ;; *************** function __I2CWait *****************
  9352 ;; Defined at:
  9353 ;;		line 7 in file "src/I2C.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;		None               void
  9360 ;; Registers used:
  9361 ;;		wreg, status,2, status,0
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9371 ;;Total ram usage:        1 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    1
  9374 ;; This function calls:
  9375 ;;		Nothing
  9376 ;; This function is called by:
  9377 ;;		__I2CReceive
  9378 ;;		__I2CSend
  9379 ;;		__I2CStop
  9380 ;;		__I2CStart
  9381 ;;		__I2CRepeatedStart
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text39
  9386  002F80                     __ptext39:
  9387                           	opt stack 0
  9388  002F80                     __I2CWait:
  9389                           	opt stack 26
  9390  002F80                     l184:
  9391  002F80  B4C7               	btfsc	4039,2,c	;volatile
  9392  002F82  D7FE               	goto	l184
  9393  002F84  CFC5 F00F          	movff	4037,??__I2CWait	;volatile
  9394  002F88  0E1F               	movlw	31
  9395  002F8A  160F               	andwf	??__I2CWait,f,c
  9396  002F8C  B4D8               	btfsc	status,2,c
  9397  002F8E  0012               	return	
  9398  002F90  D7F7               	goto	l184
  9399  002F92                     __end_of__I2CWait:
  9400                           	opt stack 0
  9401                           tosu	equ	0xFFF
  9402                           tosh	equ	0xFFE
  9403                           tosl	equ	0xFFD
  9404                           pclath	equ	0xFFA
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           intcon2	equ	0xFF1
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           postinc1	equ	0xFE6
  9416                           postdec1	equ	0xFE5
  9417                           fsr1l	equ	0xFE1
  9418                           indf2	equ	0xFDF
  9419                           postinc2	equ	0xFDE
  9420                           postdec2	equ	0xFDD
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function _getADC9 *****************
  9426 ;; Defined at:
  9427 ;;		line 4 in file "src/zonnekracht.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;  zonnekracht     2   56[COMRAM] PTR float 
  9430 ;;		 -> adc(3), 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  adc             2   60[COMRAM] int 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;		None               void
  9435 ;; Registers used:
  9436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9445 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9446 ;;Total ram usage:        6 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    3
  9449 ;; This function calls:
  9450 ;;		___awtoft
  9451 ;;		___ftdiv
  9452 ;;		___ftmul
  9453 ;; This function is called by:
  9454 ;;		_loop
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text40
  9459  0026A6                     __ptext40:
  9460                           	opt stack 0
  9461  0026A6                     _getADC9:
  9462                           	opt stack 26
  9463                           
  9464                           ;zonnekracht.c: 5: int adc = 0;
  9465                           
  9466                           ;incstack = 0
  9467  0026A6  0E00               	movlw	0
  9468  0026A8  6E3E               	movwf	getADC9@adc+1,c
  9469  0026AA  0E00               	movlw	0
  9470  0026AC  6E3D               	movwf	getADC9@adc,c
  9471                           
  9472                           ;zonnekracht.c: 6: ADCON0 = 0x27;
  9473  0026AE  0E27               	movlw	39
  9474  0026B0  6EC2               	movwf	4034,c	;volatile
  9475                           
  9476                           ;zonnekracht.c: 7: ADCON1 = 0x00;
  9477  0026B2  0E00               	movlw	0
  9478  0026B4  6EC1               	movwf	4033,c	;volatile
  9479                           
  9480                           ;zonnekracht.c: 8: ADCON2 = 0xAE;
  9481  0026B6  0EAE               	movlw	174
  9482  0026B8  6EC0               	movwf	4032,c	;volatile
  9483  0026BA                     l440:
  9484  0026BA  B2C2               	btfsc	4034,1,c	;volatile
  9485  0026BC  D7FE               	goto	l440
  9486                           
  9487                           ;zonnekracht.c: 10: adc = ADRESH<<8|ADRESL;
  9488  0026BE  50C3               	movf	4035,w,c	;volatile
  9489  0026C0  CFC4 F03B          	movff	4036,??_getADC9	;volatile
  9490  0026C4  6A3C               	clrf	(??_getADC9+1)& (0+255),c
  9491  0026C6  C03B  F03C         	movff	??_getADC9,??_getADC9+1
  9492  0026CA  6A3B               	clrf	??_getADC9,c
  9493  0026CC  103B               	iorwf	??_getADC9,w,c
  9494  0026CE  6E3D               	movwf	getADC9@adc,c
  9495  0026D0  503C               	movf	??_getADC9+1,w,c
  9496  0026D2  6E3E               	movwf	getADC9@adc+1,c
  9497                           
  9498                           ;zonnekracht.c: 11: *zonnekracht = adc / 4096.0 * 5.0;
  9499  0026D4  0E00               	movlw	0
  9500  0026D6  6E1E               	movwf	___ftdiv@f2,c
  9501  0026D8  0E80               	movlw	128
  9502  0026DA  6E1F               	movwf	___ftdiv@f2+1,c
  9503  0026DC  0E45               	movlw	69
  9504  0026DE  6E20               	movwf	___ftdiv@f2+2,c
  9505  0026E0  C03D  F017         	movff	getADC9@adc,___awtoft@c
  9506  0026E4  C03E  F018         	movff	getADC9@adc+1,___awtoft@c+1
  9507  0026E8  EC19  F016         	call	___awtoft	;wreg free
  9508  0026EC  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  9509  0026F0  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  9510  0026F4  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  9511  0026F8  ECE6  F010         	call	___ftdiv	;wreg free
  9512  0026FC  C01B  F02A         	movff	?___ftdiv,___ftmul@f1
  9513  002700  C01C  F02B         	movff	?___ftdiv+1,___ftmul@f1+1
  9514  002704  C01D  F02C         	movff	?___ftdiv+2,___ftmul@f1+2
  9515  002708  0E00               	movlw	0
  9516  00270A  6E2D               	movwf	___ftmul@f2,c
  9517  00270C  0EA0               	movlw	160
  9518  00270E  6E2E               	movwf	___ftmul@f2+1,c
  9519  002710  0E40               	movlw	64
  9520  002712  6E2F               	movwf	___ftmul@f2+2,c
  9521  002714  EC6E  F010         	call	___ftmul	;wreg free
  9522  002718  C039  FFD9         	movff	getADC9@zonnekracht,fsr2l
  9523  00271C  C03A  FFDA         	movff	getADC9@zonnekracht+1,fsr2h
  9524  002720  C02A  FFDE         	movff	?___ftmul,postinc2
  9525  002724  C02B  FFDE         	movff	?___ftmul+1,postinc2
  9526  002728  C02C  FFDD         	movff	?___ftmul+2,postdec2
  9527  00272C  52DD               	movf	postdec2,f,c
  9528  00272E  0012               	return	
  9529  002730                     __end_of_getADC9:
  9530                           	opt stack 0
  9531                           tosu	equ	0xFFF
  9532                           tosh	equ	0xFFE
  9533                           tosl	equ	0xFFD
  9534                           pclath	equ	0xFFA
  9535                           tblptru	equ	0xFF8
  9536                           tblptrh	equ	0xFF7
  9537                           tblptrl	equ	0xFF6
  9538                           tablat	equ	0xFF5
  9539                           prodh	equ	0xFF4
  9540                           prodl	equ	0xFF3
  9541                           intcon	equ	0xFF2
  9542                           intcon2	equ	0xFF1
  9543                           postinc0	equ	0xFEE
  9544                           wreg	equ	0xFE8
  9545                           postinc1	equ	0xFE6
  9546                           postdec1	equ	0xFE5
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function ___ftmul *****************
  9556 ;; Defined at:
  9557 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  f1              3   41[COMRAM] float 
  9560 ;;  f2              3   44[COMRAM] float 
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;  f3_as_produc    3   51[COMRAM] unsigned um
  9563 ;;  sign            1   55[COMRAM] unsigned char 
  9564 ;;  cntr            1   54[COMRAM] unsigned char 
  9565 ;;  exp             1   50[COMRAM] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  3   41[COMRAM] float 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2, status,0, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9575 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9576 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9577 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9578 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9579 ;;Total ram usage:       15 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    2
  9582 ;; This function calls:
  9583 ;;		___ftpack
  9584 ;; This function is called by:
  9585 ;;		_timer0init
  9586 ;;		_getTemperature
  9587 ;;		_getADC9
  9588 ;;		_fround
  9589 ;;		_scale
  9590 ;;		__doprnt
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           	psect	text41
  9595  0020DC                     __ptext41:
  9596                           	opt stack 0
  9597  0020DC                     ___ftmul:
  9598                           	opt stack 26
  9599                           
  9600                           ;incstack = 0
  9601  0020DC  C02C  F030         	movff	___ftmul@f1+2,??___ftmul
  9602  0020E0  6A31               	clrf	(??___ftmul+1)& (0+255),c
  9603  0020E2  6A32               	clrf	(??___ftmul+2)& (0+255),c
  9604  0020E4  342B               	rlcf	___ftmul@f1+1,w,c
  9605  0020E6  3630               	rlcf	??___ftmul& (0+255),f,c
  9606  0020E8  E301               	bnc	u5091
  9607  0020EA  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  9608  0020EC                     u5091:
  9609  0020EC  5030               	movf	??___ftmul,w,c
  9610  0020EE  6E33               	movwf	___ftmul@exp,c
  9611  0020F0  6633               	tstfsz	___ftmul@exp& (0+255),c
  9612  0020F2  D007               	goto	l4389
  9613  0020F4  0E00               	movlw	0
  9614  0020F6  6E2A               	movwf	?___ftmul,c
  9615  0020F8  0E00               	movlw	0
  9616  0020FA  6E2B               	movwf	?___ftmul+1,c
  9617  0020FC  0E00               	movlw	0
  9618  0020FE  6E2C               	movwf	?___ftmul+2,c
  9619  002100  0012               	return	
  9620  002102                     l4389:
  9621  002102  C02F  F030         	movff	___ftmul@f2+2,??___ftmul
  9622  002106  6A31               	clrf	(??___ftmul+1)& (0+255),c
  9623  002108  6A32               	clrf	(??___ftmul+2)& (0+255),c
  9624  00210A  342E               	rlcf	___ftmul@f2+1,w,c
  9625  00210C  3630               	rlcf	??___ftmul& (0+255),f,c
  9626  00210E  E301               	bnc	u5111
  9627  002110  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  9628  002112                     u5111:
  9629  002112  5030               	movf	??___ftmul,w,c
  9630  002114  6E38               	movwf	___ftmul@sign,c
  9631  002116  6638               	tstfsz	___ftmul@sign& (0+255),c
  9632  002118  D007               	goto	l4395
  9633  00211A  0E00               	movlw	0
  9634  00211C  6E2A               	movwf	?___ftmul,c
  9635  00211E  0E00               	movlw	0
  9636  002120  6E2B               	movwf	?___ftmul+1,c
  9637  002122  0E00               	movlw	0
  9638  002124  6E2C               	movwf	?___ftmul+2,c
  9639  002126  0012               	return	
  9640  002128                     l4395:
  9641  002128  5038               	movf	___ftmul@sign,w,c
  9642  00212A  0F7B               	addlw	123
  9643  00212C  2633               	addwf	___ftmul@exp,f,c
  9644  00212E  C02C  F038         	movff	___ftmul@f1+2,___ftmul@sign
  9645  002132  502F               	movf	___ftmul@f2+2,w,c
  9646  002134  1A38               	xorwf	___ftmul@sign,f,c
  9647  002136  0E80               	movlw	128
  9648  002138  1638               	andwf	___ftmul@sign,f,c
  9649  00213A  8E2B               	bsf	___ftmul@f1+1,7,c
  9650  00213C  8E2E               	bsf	___ftmul@f2+1,7,c
  9651  00213E  0EFF               	movlw	255
  9652  002140  162D               	andwf	___ftmul@f2,f,c
  9653  002142  0EFF               	movlw	255
  9654  002144  162E               	andwf	___ftmul@f2+1,f,c
  9655  002146  0E00               	movlw	0
  9656  002148  162F               	andwf	___ftmul@f2+2,f,c
  9657  00214A  0E00               	movlw	0
  9658  00214C  6E34               	movwf	___ftmul@f3_as_product,c
  9659  00214E  0E00               	movlw	0
  9660  002150  6E35               	movwf	___ftmul@f3_as_product+1,c
  9661  002152  0E00               	movlw	0
  9662  002154  6E36               	movwf	___ftmul@f3_as_product+2,c
  9663  002156  0E07               	movlw	7
  9664  002158  6E37               	movwf	___ftmul@cntr,c
  9665  00215A                     l4409:
  9666  00215A  A02A               	btfss	___ftmul@f1,0,c
  9667  00215C  D006               	goto	l4413
  9668  00215E  502D               	movf	___ftmul@f2,w,c
  9669  002160  2634               	addwf	___ftmul@f3_as_product,f,c
  9670  002162  502E               	movf	___ftmul@f2+1,w,c
  9671  002164  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  9672  002166  502F               	movf	___ftmul@f2+2,w,c
  9673  002168  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  9674  00216A                     l4413:
  9675  00216A  90D8               	bcf	status,0,c
  9676  00216C  322C               	rrcf	___ftmul@f1+2,f,c
  9677  00216E  322B               	rrcf	___ftmul@f1+1,f,c
  9678  002170  322A               	rrcf	___ftmul@f1,f,c
  9679  002172  90D8               	bcf	status,0,c
  9680  002174  362D               	rlcf	___ftmul@f2,f,c
  9681  002176  362E               	rlcf	___ftmul@f2+1,f,c
  9682  002178  362F               	rlcf	___ftmul@f2+2,f,c
  9683  00217A  2E37               	decfsz	___ftmul@cntr,f,c
  9684  00217C  D7EE               	goto	l4409
  9685  00217E  0E09               	movlw	9
  9686  002180  6E37               	movwf	___ftmul@cntr,c
  9687  002182                     l4419:
  9688  002182  A02A               	btfss	___ftmul@f1,0,c
  9689  002184  D006               	goto	l4423
  9690  002186  502D               	movf	___ftmul@f2,w,c
  9691  002188  2634               	addwf	___ftmul@f3_as_product,f,c
  9692  00218A  502E               	movf	___ftmul@f2+1,w,c
  9693  00218C  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  9694  00218E  502F               	movf	___ftmul@f2+2,w,c
  9695  002190  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  9696  002192                     l4423:
  9697  002192  90D8               	bcf	status,0,c
  9698  002194  322C               	rrcf	___ftmul@f1+2,f,c
  9699  002196  322B               	rrcf	___ftmul@f1+1,f,c
  9700  002198  322A               	rrcf	___ftmul@f1,f,c
  9701  00219A  90D8               	bcf	status,0,c
  9702  00219C  3236               	rrcf	___ftmul@f3_as_product+2,f,c
  9703  00219E  3235               	rrcf	___ftmul@f3_as_product+1,f,c
  9704  0021A0  3234               	rrcf	___ftmul@f3_as_product,f,c
  9705  0021A2  2E37               	decfsz	___ftmul@cntr,f,c
  9706  0021A4  D7EE               	goto	l4419
  9707  0021A6  C034  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9708  0021AA  C035  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9709  0021AE  C036  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9710  0021B2  C033  F012         	movff	___ftmul@exp,___ftpack@exp
  9711  0021B6  C038  F013         	movff	___ftmul@sign,___ftpack@sign
  9712  0021BA  EC1D  F012         	call	___ftpack	;wreg free
  9713  0021BE  C00F  F02A         	movff	?___ftpack,?___ftmul
  9714  0021C2  C010  F02B         	movff	?___ftpack+1,?___ftmul+1
  9715  0021C6  C011  F02C         	movff	?___ftpack+2,?___ftmul+2
  9716  0021CA  0012               	return	
  9717  0021CC                     __end_of___ftmul:
  9718                           	opt stack 0
  9719                           tosu	equ	0xFFF
  9720                           tosh	equ	0xFFE
  9721                           tosl	equ	0xFFD
  9722                           pclath	equ	0xFFA
  9723                           tblptru	equ	0xFF8
  9724                           tblptrh	equ	0xFF7
  9725                           tblptrl	equ	0xFF6
  9726                           tablat	equ	0xFF5
  9727                           prodh	equ	0xFF4
  9728                           prodl	equ	0xFF3
  9729                           intcon	equ	0xFF2
  9730                           intcon2	equ	0xFF1
  9731                           postinc0	equ	0xFEE
  9732                           wreg	equ	0xFE8
  9733                           postinc1	equ	0xFE6
  9734                           postdec1	equ	0xFE5
  9735                           fsr1l	equ	0xFE1
  9736                           indf2	equ	0xFDF
  9737                           postinc2	equ	0xFDE
  9738                           postdec2	equ	0xFDD
  9739                           fsr2h	equ	0xFDA
  9740                           fsr2l	equ	0xFD9
  9741                           status	equ	0xFD8
  9742                           
  9743 ;; *************** function ___ftdiv *****************
  9744 ;; Defined at:
  9745 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;  f1              3   26[COMRAM] float 
  9748 ;;  f2              3   29[COMRAM] float 
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;  f3              3   36[COMRAM] float 
  9751 ;;  sign            1   40[COMRAM] unsigned char 
  9752 ;;  exp             1   39[COMRAM] unsigned char 
  9753 ;;  cntr            1   35[COMRAM] unsigned char 
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  3   26[COMRAM] float 
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9763 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9764 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9765 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9766 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9767 ;;Total ram usage:       15 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    2
  9770 ;; This function calls:
  9771 ;;		___ftpack
  9772 ;; This function is called by:
  9773 ;;		_getADC9
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           	psect	text42
  9778  0021CC                     __ptext42:
  9779                           	opt stack 0
  9780  0021CC                     ___ftdiv:
  9781                           	opt stack 26
  9782                           
  9783                           ;incstack = 0
  9784  0021CC  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  9785  0021D0  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9786  0021D2  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9787  0021D4  341C               	rlcf	___ftdiv@f1+1,w,c
  9788  0021D6  3621               	rlcf	??___ftdiv& (0+255),f,c
  9789  0021D8  E301               	bnc	u6211
  9790  0021DA  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9791  0021DC                     u6211:
  9792  0021DC  5021               	movf	??___ftdiv,w,c
  9793  0021DE  6E28               	movwf	___ftdiv@exp,c
  9794  0021E0  6628               	tstfsz	___ftdiv@exp& (0+255),c
  9795  0021E2  D007               	goto	l5007
  9796  0021E4  0E00               	movlw	0
  9797  0021E6  6E1B               	movwf	?___ftdiv,c
  9798  0021E8  0E00               	movlw	0
  9799  0021EA  6E1C               	movwf	?___ftdiv+1,c
  9800  0021EC  0E00               	movlw	0
  9801  0021EE  6E1D               	movwf	?___ftdiv+2,c
  9802  0021F0  0012               	return	
  9803  0021F2                     l5007:
  9804  0021F2  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  9805  0021F6  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9806  0021F8  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9807  0021FA  341F               	rlcf	___ftdiv@f2+1,w,c
  9808  0021FC  3621               	rlcf	??___ftdiv& (0+255),f,c
  9809  0021FE  E301               	bnc	u6231
  9810  002200  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9811  002202                     u6231:
  9812  002202  5021               	movf	??___ftdiv,w,c
  9813  002204  6E29               	movwf	___ftdiv@sign,c
  9814  002206  6629               	tstfsz	___ftdiv@sign& (0+255),c
  9815  002208  D007               	goto	l5013
  9816  00220A  0E00               	movlw	0
  9817  00220C  6E1B               	movwf	?___ftdiv,c
  9818  00220E  0E00               	movlw	0
  9819  002210  6E1C               	movwf	?___ftdiv+1,c
  9820  002212  0E00               	movlw	0
  9821  002214  6E1D               	movwf	?___ftdiv+2,c
  9822  002216  0012               	return	
  9823  002218                     l5013:
  9824  002218  0E00               	movlw	0
  9825  00221A  6E25               	movwf	___ftdiv@f3,c
  9826  00221C  0E00               	movlw	0
  9827  00221E  6E26               	movwf	___ftdiv@f3+1,c
  9828  002220  0E00               	movlw	0
  9829  002222  6E27               	movwf	___ftdiv@f3+2,c
  9830  002224  5029               	movf	___ftdiv@sign,w,c
  9831  002226  0F89               	addlw	137
  9832  002228  5E28               	subwf	___ftdiv@exp,f,c
  9833  00222A  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  9834  00222E  5020               	movf	___ftdiv@f2+2,w,c
  9835  002230  1A29               	xorwf	___ftdiv@sign,f,c
  9836  002232  0E80               	movlw	128
  9837  002234  1629               	andwf	___ftdiv@sign,f,c
  9838  002236  8E1C               	bsf	___ftdiv@f1+1,7,c
  9839  002238  0EFF               	movlw	255
  9840  00223A  161B               	andwf	___ftdiv@f1,f,c
  9841  00223C  0EFF               	movlw	255
  9842  00223E  161C               	andwf	___ftdiv@f1+1,f,c
  9843  002240  0E00               	movlw	0
  9844  002242  161D               	andwf	___ftdiv@f1+2,f,c
  9845  002244  8E1F               	bsf	___ftdiv@f2+1,7,c
  9846  002246  0EFF               	movlw	255
  9847  002248  161E               	andwf	___ftdiv@f2,f,c
  9848  00224A  0EFF               	movlw	255
  9849  00224C  161F               	andwf	___ftdiv@f2+1,f,c
  9850  00224E  0E00               	movlw	0
  9851  002250  1620               	andwf	___ftdiv@f2+2,f,c
  9852  002252  0E18               	movlw	24
  9853  002254  6E24               	movwf	___ftdiv@cntr,c
  9854  002256                     l5033:
  9855  002256  90D8               	bcf	status,0,c
  9856  002258  3625               	rlcf	___ftdiv@f3,f,c
  9857  00225A  3626               	rlcf	___ftdiv@f3+1,f,c
  9858  00225C  3627               	rlcf	___ftdiv@f3+2,f,c
  9859  00225E  501E               	movf	___ftdiv@f2,w,c
  9860  002260  5C1B               	subwf	___ftdiv@f1,w,c
  9861  002262  501F               	movf	___ftdiv@f2+1,w,c
  9862  002264  581C               	subwfb	___ftdiv@f1+1,w,c
  9863  002266  5020               	movf	___ftdiv@f2+2,w,c
  9864  002268  581D               	subwfb	___ftdiv@f1+2,w,c
  9865  00226A  A0D8               	btfss	status,0,c
  9866  00226C  D007               	goto	l1009
  9867  00226E  501E               	movf	___ftdiv@f2,w,c
  9868  002270  5E1B               	subwf	___ftdiv@f1,f,c
  9869  002272  501F               	movf	___ftdiv@f2+1,w,c
  9870  002274  5A1C               	subwfb	___ftdiv@f1+1,f,c
  9871  002276  5020               	movf	___ftdiv@f2+2,w,c
  9872  002278  5A1D               	subwfb	___ftdiv@f1+2,f,c
  9873  00227A  8025               	bsf	___ftdiv@f3,0,c
  9874  00227C                     l1009:
  9875  00227C  90D8               	bcf	status,0,c
  9876  00227E  361B               	rlcf	___ftdiv@f1,f,c
  9877  002280  361C               	rlcf	___ftdiv@f1+1,f,c
  9878  002282  361D               	rlcf	___ftdiv@f1+2,f,c
  9879  002284  2E24               	decfsz	___ftdiv@cntr,f,c
  9880  002286  D7E7               	goto	l5033
  9881  002288  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9882  00228C  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9883  002290  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9884  002294  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  9885  002298  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  9886  00229C  EC1D  F012         	call	___ftpack	;wreg free
  9887  0022A0  C00F  F01B         	movff	?___ftpack,?___ftdiv
  9888  0022A4  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  9889  0022A8  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  9890  0022AC  0012               	return	
  9891  0022AE                     __end_of___ftdiv:
  9892                           	opt stack 0
  9893                           tosu	equ	0xFFF
  9894                           tosh	equ	0xFFE
  9895                           tosl	equ	0xFFD
  9896                           pclath	equ	0xFFA
  9897                           tblptru	equ	0xFF8
  9898                           tblptrh	equ	0xFF7
  9899                           tblptrl	equ	0xFF6
  9900                           tablat	equ	0xFF5
  9901                           prodh	equ	0xFF4
  9902                           prodl	equ	0xFF3
  9903                           intcon	equ	0xFF2
  9904                           intcon2	equ	0xFF1
  9905                           postinc0	equ	0xFEE
  9906                           wreg	equ	0xFE8
  9907                           postinc1	equ	0xFE6
  9908                           postdec1	equ	0xFE5
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917 ;; *************** function ___awtoft *****************
  9918 ;; Defined at:
  9919 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  c               2   22[COMRAM] int 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  sign            1   25[COMRAM] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  3   22[COMRAM] float 
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0, prodl, cstack
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9937 ;;Total ram usage:        4 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    2
  9940 ;; This function calls:
  9941 ;;		___ftpack
  9942 ;; This function is called by:
  9943 ;;		_getTemperature
  9944 ;;		_getADC9
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text43
  9949  002C32                     __ptext43:
  9950                           	opt stack 0
  9951  002C32                     ___awtoft:
  9952                           	opt stack 26
  9953                           
  9954                           ;incstack = 0
  9955  002C32  0E00               	movlw	0
  9956  002C34  6E1A               	movwf	___awtoft@sign,c
  9957  002C36  5018               	movf	___awtoft@c+1,w,c
  9958  002C38  0A80               	xorlw	128
  9959  002C3A  6EF3               	movwf	prodl,c
  9960  002C3C  0E80               	movlw	128
  9961  002C3E  5CF3               	subwf	prodl,w,c
  9962  002C40  0E00               	movlw	0
  9963  002C42  B4D8               	btfsc	status,2,c
  9964  002C44  5C17               	subwf	___awtoft@c,w,c
  9965  002C46  B0D8               	btfsc	status,0,c
  9966  002C48  D006               	goto	l5055
  9967  002C4A  6C17               	negf	___awtoft@c,c
  9968  002C4C  1E18               	comf	___awtoft@c+1,f,c
  9969  002C4E  B0D8               	btfsc	status,0,c
  9970  002C50  2A18               	incf	___awtoft@c+1,f,c
  9971  002C52  0E01               	movlw	1
  9972  002C54  6E1A               	movwf	___awtoft@sign,c
  9973  002C56                     l5055:
  9974  002C56  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  9975  002C5A  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  9976  002C5E  6A11               	clrf	___ftpack@arg+2,c
  9977  002C60  0E8E               	movlw	142
  9978  002C62  6E12               	movwf	___ftpack@exp,c
  9979  002C64  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  9980  002C68  EC1D  F012         	call	___ftpack	;wreg free
  9981  002C6C  C00F  F017         	movff	?___ftpack,?___awtoft
  9982  002C70  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  9983  002C74  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  9984  002C78  0012               	return	
  9985  002C7A                     __end_of___awtoft:
  9986                           	opt stack 0
  9987                           tosu	equ	0xFFF
  9988                           tosh	equ	0xFFE
  9989                           tosl	equ	0xFFD
  9990                           pclath	equ	0xFFA
  9991                           tblptru	equ	0xFF8
  9992                           tblptrh	equ	0xFF7
  9993                           tblptrl	equ	0xFF6
  9994                           tablat	equ	0xFF5
  9995                           prodh	equ	0xFF4
  9996                           prodl	equ	0xFF3
  9997                           intcon	equ	0xFF2
  9998                           intcon2	equ	0xFF1
  9999                           postinc0	equ	0xFEE
 10000                           wreg	equ	0xFE8
 10001                           postinc1	equ	0xFE6
 10002                           postdec1	equ	0xFE5
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function ___ftpack *****************
 10012 ;; Defined at:
 10013 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  arg             3   14[COMRAM] unsigned um
 10016 ;;  exp             1   17[COMRAM] unsigned char 
 10017 ;;  sign            1   18[COMRAM] unsigned char 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;		None
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  3   14[COMRAM] float 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10029 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10031 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10032 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10033 ;;Total ram usage:        8 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    1
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		___awtoft
 10040 ;;		___ftadd
 10041 ;;		___ftdiv
 10042 ;;		___ftmul
 10043 ;;		___lltoft
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text44
 10048  00243A                     __ptext44:
 10049                           	opt stack 0
 10050  00243A                     ___ftpack:
 10051                           	opt stack 26
 10052                           
 10053                           ;incstack = 0
 10054  00243A  5012               	movf	___ftpack@exp,w,c
 10055  00243C  B4D8               	btfsc	status,2,c
 10056  00243E  D005               	goto	l4283
 10057  002440  500F               	movf	___ftpack@arg,w,c
 10058  002442  1010               	iorwf	___ftpack@arg+1,w,c
 10059  002444  1011               	iorwf	___ftpack@arg+2,w,c
 10060  002446  A4D8               	btfss	status,2,c
 10061  002448  D00C               	goto	l4289
 10062  00244A                     l4283:
 10063  00244A  0E00               	movlw	0
 10064  00244C  6E0F               	movwf	?___ftpack,c
 10065  00244E  0E00               	movlw	0
 10066  002450  6E10               	movwf	?___ftpack+1,c
 10067  002452  0E00               	movlw	0
 10068  002454  6E11               	movwf	?___ftpack+2,c
 10069  002456  0012               	return	
 10070  002458                     l4287:
 10071  002458  2A12               	incf	___ftpack@exp,f,c
 10072  00245A  90D8               	bcf	status,0,c
 10073  00245C  3211               	rrcf	___ftpack@arg+2,f,c
 10074  00245E  3210               	rrcf	___ftpack@arg+1,f,c
 10075  002460  320F               	rrcf	___ftpack@arg,f,c
 10076  002462                     l4289:
 10077  002462  0E00               	movlw	0
 10078  002464  140F               	andwf	___ftpack@arg,w,c
 10079  002466  6E14               	movwf	??___ftpack& (0+255),c
 10080  002468  0E00               	movlw	0
 10081  00246A  1410               	andwf	___ftpack@arg+1,w,c
 10082  00246C  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10083  00246E  0EFE               	movlw	254
 10084  002470  1411               	andwf	___ftpack@arg+2,w,c
 10085  002472  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10086  002474  5014               	movf	??___ftpack,w,c
 10087  002476  1015               	iorwf	??___ftpack+1,w,c
 10088  002478  1016               	iorwf	??___ftpack+2,w,c
 10089  00247A  B4D8               	btfsc	status,2,c
 10090  00247C  D00C               	goto	l4295
 10091  00247E  D7EC               	goto	l4287
 10092  002480                     l4291:
 10093  002480  2A12               	incf	___ftpack@exp,f,c
 10094  002482  0E01               	movlw	1
 10095  002484  260F               	addwf	___ftpack@arg,f,c
 10096  002486  0E00               	movlw	0
 10097  002488  2210               	addwfc	___ftpack@arg+1,f,c
 10098  00248A  0E00               	movlw	0
 10099  00248C  2211               	addwfc	___ftpack@arg+2,f,c
 10100  00248E  90D8               	bcf	status,0,c
 10101  002490  3211               	rrcf	___ftpack@arg+2,f,c
 10102  002492  3210               	rrcf	___ftpack@arg+1,f,c
 10103  002494  320F               	rrcf	___ftpack@arg,f,c
 10104  002496                     l4295:
 10105  002496  0E00               	movlw	0
 10106  002498  140F               	andwf	___ftpack@arg,w,c
 10107  00249A  6E14               	movwf	??___ftpack& (0+255),c
 10108  00249C  0E00               	movlw	0
 10109  00249E  1410               	andwf	___ftpack@arg+1,w,c
 10110  0024A0  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10111  0024A2  0EFF               	movlw	255
 10112  0024A4  1411               	andwf	___ftpack@arg+2,w,c
 10113  0024A6  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10114  0024A8  5014               	movf	??___ftpack,w,c
 10115  0024AA  1015               	iorwf	??___ftpack+1,w,c
 10116  0024AC  1016               	iorwf	??___ftpack+2,w,c
 10117  0024AE  B4D8               	btfsc	status,2,c
 10118  0024B0  D006               	goto	l4299
 10119  0024B2  D7E6               	goto	l4291
 10120  0024B4                     l4297:
 10121  0024B4  0612               	decf	___ftpack@exp,f,c
 10122  0024B6  90D8               	bcf	status,0,c
 10123  0024B8  360F               	rlcf	___ftpack@arg,f,c
 10124  0024BA  3610               	rlcf	___ftpack@arg+1,f,c
 10125  0024BC  3611               	rlcf	___ftpack@arg+2,f,c
 10126  0024BE                     l4299:
 10127  0024BE  AE10               	btfss	___ftpack@arg+1,7,c
 10128  0024C0  D7F9               	goto	l4297
 10129  0024C2  A012               	btfss	___ftpack@exp,0,c
 10130  0024C4  9E10               	bcf	___ftpack@arg+1,7,c
 10131  0024C6  90D8               	bcf	status,0,c
 10132  0024C8  3212               	rrcf	___ftpack@exp,f,c
 10133  0024CA  5012               	movf	___ftpack@exp,w,c
 10134  0024CC  1211               	iorwf	___ftpack@arg+2,f,c
 10135  0024CE  5013               	movf	___ftpack@sign,w,c
 10136  0024D0  A4D8               	btfss	status,2,c
 10137  0024D2  8E11               	bsf	___ftpack@arg+2,7,c
 10138  0024D4  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10139  0024D8  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10140  0024DC  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10141  0024E0  0012               	return	
 10142  0024E2                     __end_of___ftpack:
 10143                           	opt stack 0
 10144                           tosu	equ	0xFFF
 10145                           tosh	equ	0xFFE
 10146                           tosl	equ	0xFFD
 10147                           pclath	equ	0xFFA
 10148                           tblptru	equ	0xFF8
 10149                           tblptrh	equ	0xFF7
 10150                           tblptrl	equ	0xFF6
 10151                           tablat	equ	0xFF5
 10152                           prodh	equ	0xFF4
 10153                           prodl	equ	0xFF3
 10154                           intcon	equ	0xFF2
 10155                           intcon2	equ	0xFF1
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           postinc1	equ	0xFE6
 10159                           postdec1	equ	0xFE5
 10160                           fsr1l	equ	0xFE1
 10161                           indf2	equ	0xFDF
 10162                           postinc2	equ	0xFDE
 10163                           postdec2	equ	0xFDD
 10164                           fsr2h	equ	0xFDA
 10165                           fsr2l	equ	0xFD9
 10166                           status	equ	0xFD8
 10167                           
 10168 ;; *************** function _broadcastConvert *****************
 10169 ;; Defined at:
 10170 ;;		line 6 in file "src/DS18B20.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;		None
 10173 ;; Auto vars:     Size  Location     Type
 10174 ;;		None
 10175 ;; Return value:  Size  Location     Type
 10176 ;;		None               void
 10177 ;; Registers used:
 10178 ;;		wreg, status,2, status,0, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10188 ;;Total ram usage:        0 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    3
 10191 ;; This function calls:
 10192 ;;		_onewireInit
 10193 ;;		_onewireReadBit
 10194 ;;		_onewireWriteByte
 10195 ;; This function is called by:
 10196 ;;		_loop
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           	psect	text45
 10201  002F02                     __ptext45:
 10202                           	opt stack 0
 10203  002F02                     _broadcastConvert:
 10204                           	opt stack 26
 10205                           
 10206                           ;DS18B20.c: 8: onewireInit();
 10207                           
 10208                           ;incstack = 0
 10209  002F02  EC60  F017         	call	_onewireInit	;wreg free
 10210                           
 10211                           ;DS18B20.c: 9: onewireWriteByte(0xCC);
 10212  002F06  0ECC               	movlw	204
 10213  002F08  ECEB  F016         	call	_onewireWriteByte
 10214                           
 10215                           ;DS18B20.c: 10: onewireWriteByte(0x44);
 10216  002F0C  0E44               	movlw	68
 10217  002F0E  ECEB  F016         	call	_onewireWriteByte
 10218  002F12                     l5087:
 10219                           
 10220                           ;DS18B20.c: 13: if (onewireReadBit())
 10221  002F12  EC4E  F017         	call	_onewireReadBit	;wreg free
 10222  002F16  0900               	iorlw	0
 10223  002F18  A4D8               	btfss	status,2,c
 10224                           
 10225                           ;DS18B20.c: 14: break;
 10226  002F1A  0012               	return	
 10227  002F1C  D7FA               	goto	l5087
 10228  002F1E                     __end_of_broadcastConvert:
 10229                           	opt stack 0
 10230                           tosu	equ	0xFFF
 10231                           tosh	equ	0xFFE
 10232                           tosl	equ	0xFFD
 10233                           pclath	equ	0xFFA
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           intcon2	equ	0xFF1
 10242                           postinc0	equ	0xFEE
 10243                           wreg	equ	0xFE8
 10244                           postinc1	equ	0xFE6
 10245                           postdec1	equ	0xFE5
 10246                           fsr1l	equ	0xFE1
 10247                           indf2	equ	0xFDF
 10248                           postinc2	equ	0xFDE
 10249                           postdec2	equ	0xFDD
 10250                           fsr2h	equ	0xFDA
 10251                           fsr2l	equ	0xFD9
 10252                           status	equ	0xFD8
 10253                           
 10254 ;; *************** function _onewireWriteByte *****************
 10255 ;; Defined at:
 10256 ;;		line 64 in file "src/onewire.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;  data            1    wreg     unsigned char 
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;  data            1   17[COMRAM] unsigned char 
 10261 ;;  loop            1   18[COMRAM] unsigned char 
 10262 ;; Return value:  Size  Location     Type
 10263 ;;		None               void
 10264 ;; Registers used:
 10265 ;;		wreg, status,2, status,0, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10272 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10275 ;;Total ram usage:        3 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    2
 10278 ;; This function calls:
 10279 ;;		_onewireWriteBit
 10280 ;; This function is called by:
 10281 ;;		_broadcastConvert
 10282 ;;		_getTemperature
 10283 ;;		_getTemperatureInt
 10284 ;;		_printSingleAddress
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           	psect	text46
 10289  002DD6                     __ptext46:
 10290                           	opt stack 0
 10291  002DD6                     _onewireWriteByte:
 10292                           	opt stack 26
 10293                           
 10294                           ;incstack = 0
 10295                           ;onewireWriteByte@data stored from wreg
 10296  002DD6  6E12               	movwf	onewireWriteByte@data,c
 10297                           
 10298                           ;onewire.c: 66: for (unsigned char loop = 0; loop < 8; loop++) {
 10299  002DD8  0E00               	movlw	0
 10300  002DDA  6E13               	movwf	onewireWriteByte@loop,c
 10301  002DDC  0E07               	movlw	7
 10302  002DDE  6413               	cpfsgt	onewireWriteByte@loop,c
 10303  002DE0  D001               	goto	l4597
 10304  002DE2  0012               	return	
 10305  002DE4                     l4597:
 10306                           
 10307                           ;onewire.c: 67: onewireWriteBit(data & 0x01);
 10308  002DE4  C012  F011         	movff	onewireWriteByte@data,??_onewireWriteByte
 10309  002DE8  0E01               	movlw	1
 10310  002DEA  1611               	andwf	??_onewireWriteByte,f,c
 10311  002DEC  5011               	movf	??_onewireWriteByte,w,c
 10312  002DEE  6E0F               	movwf	onewireWriteBit@b,c
 10313  002DF0  6A10               	clrf	onewireWriteBit@b+1,c
 10314  002DF2  EC9B  F016         	call	_onewireWriteBit	;wreg free
 10315                           
 10316                           ;onewire.c: 70: data >>= 1;
 10317  002DF6  90D8               	bcf	status,0,c
 10318  002DF8  3212               	rrcf	onewireWriteByte@data,f,c
 10319  002DFA  2A13               	incf	onewireWriteByte@loop,f,c
 10320  002DFC  0E07               	movlw	7
 10321  002DFE  6413               	cpfsgt	onewireWriteByte@loop,c
 10322  002E00  D7F1               	goto	l4597
 10323  002E02  0012               	return	
 10324  002E04                     __end_of_onewireWriteByte:
 10325                           	opt stack 0
 10326                           tosu	equ	0xFFF
 10327                           tosh	equ	0xFFE
 10328                           tosl	equ	0xFFD
 10329                           pclath	equ	0xFFA
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           intcon	equ	0xFF2
 10337                           intcon2	equ	0xFF1
 10338                           postinc0	equ	0xFEE
 10339                           wreg	equ	0xFE8
 10340                           postinc1	equ	0xFE6
 10341                           postdec1	equ	0xFE5
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           fsr2h	equ	0xFDA
 10347                           fsr2l	equ	0xFD9
 10348                           status	equ	0xFD8
 10349                           
 10350 ;; *************** function _onewireWriteBit *****************
 10351 ;; Defined at:
 10352 ;;		line 4 in file "src/onewire.c"
 10353 ;; Parameters:    Size  Location     Type
 10354 ;;  b               2   14[COMRAM] int 
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;		None
 10357 ;; Return value:  Size  Location     Type
 10358 ;;		None               void
 10359 ;; Registers used:
 10360 ;;		wreg, status,2, status,0
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10370 ;;Total ram usage:        2 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    1
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_onewireWriteByte
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text47
 10381  002D36                     __ptext47:
 10382                           	opt stack 0
 10383  002D36                     _onewireWriteBit:
 10384                           	opt stack 26
 10385                           
 10386                           ;onewire.c: 5: b = b & 0x01;
 10387                           
 10388                           ;incstack = 0
 10389  002D36  0E01               	movlw	1
 10390  002D38  140F               	andwf	onewireWriteBit@b,w,c
 10391  002D3A  6E0F               	movwf	onewireWriteBit@b,c
 10392  002D3C  6A10               	clrf	onewireWriteBit@b+1,c
 10393                           
 10394                           ;onewire.c: 6: if (b) {
 10395  002D3E  5010               	movf	onewireWriteBit@b+1,w,c
 10396  002D40  100F               	iorwf	onewireWriteBit@b,w,c
 10397  002D42  B4D8               	btfsc	status,2,c
 10398  002D44  D00B               	goto	l396
 10399                           
 10400                           ;onewire.c: 8: TRISAbits.TRISA1 = 0;
 10401  002D46  9292               	bcf	3986,1,c	;volatile
 10402                           
 10403                           ;onewire.c: 9: PORTAbits.RA1 = 0;
 10404  002D48  9280               	bcf	3968,1,c	;volatile
 10405                           
 10406                           ;onewire.c: 10: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10407  002D4A  0E03               	movlw	3
 10408  002D4C                     u6457:
 10409  002D4C  2EE8               	decfsz	wreg,f,c
 10410  002D4E  D7FE               	goto	u6457
 10411  002D50  F000               	nop	
 10412                           
 10413                           ;onewire.c: 11: TRISAbits.TRISA1 = 1;
 10414  002D52  8292               	bsf	3986,1,c	;volatile
 10415                           
 10416                           ;onewire.c: 12: _delay((unsigned long)((60)*(8000000/4000000.0)));
 10417  002D54  0E28               	movlw	40
 10418  002D56                     u6467:
 10419  002D56  2EE8               	decfsz	wreg,f,c
 10420  002D58  D7FE               	goto	u6467
 10421                           
 10422                           ;onewire.c: 13: } else {
 10423  002D5A  0012               	return	
 10424  002D5C                     l396:
 10425                           
 10426                           ;onewire.c: 15: TRISAbits.TRISA1 = 0;
 10427  002D5C  9292               	bcf	3986,1,c	;volatile
 10428                           
 10429                           ;onewire.c: 16: PORTAbits.RA1 = 0;
 10430  002D5E  9280               	bcf	3968,1,c	;volatile
 10431                           
 10432                           ;onewire.c: 17: _delay((unsigned long)((70)*(8000000/4000000.0)));
 10433  002D60  0E2E               	movlw	46
 10434  002D62                     u6477:
 10435  002D62  2EE8               	decfsz	wreg,f,c
 10436  002D64  D7FE               	goto	u6477
 10437  002D66  D000               	nop2		;nop
 10438                           
 10439                           ;onewire.c: 18: TRISAbits.TRISA1 = 1;
 10440  002D68  8292               	bsf	3986,1,c	;volatile
 10441                           
 10442                           ;onewire.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10443  002D6A  D000               	nop2		;2 cycle nop
 10444  002D6C  D000               	nop2		;2 cycle nop
 10445  002D6E  0012               	return	
 10446  002D70                     __end_of_onewireWriteBit:
 10447                           	opt stack 0
 10448                           tosu	equ	0xFFF
 10449                           tosh	equ	0xFFE
 10450                           tosl	equ	0xFFD
 10451                           pclath	equ	0xFFA
 10452                           tblptru	equ	0xFF8
 10453                           tblptrh	equ	0xFF7
 10454                           tblptrl	equ	0xFF6
 10455                           tablat	equ	0xFF5
 10456                           prodh	equ	0xFF4
 10457                           prodl	equ	0xFF3
 10458                           intcon	equ	0xFF2
 10459                           intcon2	equ	0xFF1
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           postinc1	equ	0xFE6
 10463                           postdec1	equ	0xFE5
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           fsr2h	equ	0xFDA
 10469                           fsr2l	equ	0xFD9
 10470                           status	equ	0xFD8
 10471                           
 10472 ;; *************** function _onewireReadBit *****************
 10473 ;; Defined at:
 10474 ;;		line 23 in file "src/onewire.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;		None
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  result          1   14[COMRAM] unsigned char 
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  1    wreg      unsigned char 
 10481 ;; Registers used:
 10482 ;;		wreg, status,2
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10492 ;;Total ram usage:        1 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:    1
 10495 ;; This function calls:
 10496 ;;		Nothing
 10497 ;; This function is called by:
 10498 ;;		_broadcastConvert
 10499 ;;		_onewireReadByte
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           	psect	text48
 10504  002E9C                     __ptext48:
 10505                           	opt stack 0
 10506  002E9C                     _onewireReadBit:
 10507                           	opt stack 26
 10508                           
 10509                           ;onewire.c: 24: unsigned char result;
 10510                           ;onewire.c: 26: TRISAbits.TRISA1 = 0;
 10511                           
 10512                           ;incstack = 0
 10513  002E9C  9292               	bcf	3986,1,c	;volatile
 10514                           
 10515                           ;onewire.c: 27: PORTAbits.RA1 = 0;
 10516  002E9E  9280               	bcf	3968,1,c	;volatile
 10517                           
 10518                           ;onewire.c: 28: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10519  002EA0  D000               	nop2		;2 cycle nop
 10520                           
 10521                           ;onewire.c: 29: TRISAbits.TRISA1 = 1;
 10522  002EA2  8292               	bsf	3986,1,c	;volatile
 10523                           
 10524                           ;onewire.c: 30: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10525  002EA4  0E03               	movlw	3
 10526  002EA6                     u6487:
 10527  002EA6  2EE8               	decfsz	wreg,f,c
 10528  002EA8  D7FE               	goto	u6487
 10529  002EAA  F000               	nop	
 10530                           
 10531                           ;onewire.c: 31: result = PORTAbits.RA1;
 10532  002EAC  0E00               	movlw	0
 10533  002EAE  B280               	btfsc	3968,1,c	;volatile
 10534  002EB0  0E01               	movlw	1
 10535  002EB2  6E0F               	movwf	onewireReadBit@result,c
 10536                           
 10537                           ;onewire.c: 32: _delay((unsigned long)((55)*(8000000/4000000.0)));
 10538  002EB4  0E24               	movlw	36
 10539  002EB6                     u6497:
 10540  002EB6  2EE8               	decfsz	wreg,f,c
 10541  002EB8  D7FE               	goto	u6497
 10542  002EBA  D000               	nop2		;nop
 10543                           
 10544                           ;onewire.c: 33: return result;
 10545  002EBC  500F               	movf	onewireReadBit@result,w,c
 10546  002EBE  0012               	return	
 10547  002EC0                     __end_of_onewireReadBit:
 10548                           	opt stack 0
 10549                           tosu	equ	0xFFF
 10550                           tosh	equ	0xFFE
 10551                           tosl	equ	0xFFD
 10552                           pclath	equ	0xFFA
 10553                           tblptru	equ	0xFF8
 10554                           tblptrh	equ	0xFF7
 10555                           tblptrl	equ	0xFF6
 10556                           tablat	equ	0xFF5
 10557                           prodh	equ	0xFF4
 10558                           prodl	equ	0xFF3
 10559                           intcon	equ	0xFF2
 10560                           intcon2	equ	0xFF1
 10561                           postinc0	equ	0xFEE
 10562                           wreg	equ	0xFE8
 10563                           postinc1	equ	0xFE6
 10564                           postdec1	equ	0xFE5
 10565                           fsr1l	equ	0xFE1
 10566                           indf2	equ	0xFDF
 10567                           postinc2	equ	0xFDE
 10568                           postdec2	equ	0xFDD
 10569                           fsr2h	equ	0xFDA
 10570                           fsr2l	equ	0xFD9
 10571                           status	equ	0xFD8
 10572                           
 10573 ;; *************** function _onewireInit *****************
 10574 ;; Defined at:
 10575 ;;		line 37 in file "src/onewire.c"
 10576 ;; Parameters:    Size  Location     Type
 10577 ;;		None
 10578 ;; Auto vars:     Size  Location     Type
 10579 ;;		None
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  1    wreg      unsigned char 
 10582 ;; Registers used:
 10583 ;;		wreg
 10584 ;; Tracked objects:
 10585 ;;		On entry : 0/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10593 ;;Total ram usage:        0 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; Hardware stack levels required when called:    1
 10596 ;; This function calls:
 10597 ;;		Nothing
 10598 ;; This function is called by:
 10599 ;;		_broadcastConvert
 10600 ;;		_getTemperature
 10601 ;;		_getTemperatureInt
 10602 ;;		_printSingleAddress
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text49
 10607  002EC0                     __ptext49:
 10608                           	opt stack 0
 10609  002EC0                     _onewireInit:
 10610                           	opt stack 27
 10611                           
 10612                           ;onewire.c: 38: TRISAbits.TRISA1 = 0;
 10613                           
 10614                           ;incstack = 0
 10615  002EC0  9292               	bcf	3986,1,c	;volatile
 10616                           
 10617                           ;onewire.c: 39: PORTAbits.RA1 = 0;
 10618  002EC2  9280               	bcf	3968,1,c	;volatile
 10619                           
 10620                           ;onewire.c: 40: _delay((unsigned long)((480)*(8000000/4000000.0)));
 10621  002EC4  0EF0               	movlw	240
 10622  002EC6                     u6507:
 10623  002EC6  F000               	nop	
 10624  002EC8  2EE8               	decfsz	wreg,f,c
 10625  002ECA  D7FD               	goto	u6507
 10626                           
 10627                           ;onewire.c: 41: TRISAbits.TRISA1 = 1;
 10628  002ECC  8292               	bsf	3986,1,c	;volatile
 10629                           
 10630                           ;onewire.c: 42: _delay((unsigned long)((60)*(8000000/4000000.0)));
 10631  002ECE  0E28               	movlw	40
 10632  002ED0                     u6517:
 10633  002ED0  2EE8               	decfsz	wreg,f,c
 10634  002ED2  D7FE               	goto	u6517
 10635                           
 10636                           ;onewire.c: 43: if (PORTAbits.RA1 == 0) {
 10637  002ED4  B280               	btfsc	3968,1,c	;volatile
 10638  002ED6  0012               	return	
 10639                           
 10640                           ;onewire.c: 44: _delay((unsigned long)((100)*(8000000/4000000.0)));
 10641  002ED8  0E42               	movlw	66
 10642  002EDA                     u6527:
 10643  002EDA  2EE8               	decfsz	wreg,f,c
 10644  002EDC  D7FE               	goto	u6527
 10645  002EDE  D000               	nop2		;nop
 10646  002EE0  0012               	return	
 10647  002EE2                     __end_of_onewireInit:
 10648                           	opt stack 0
 10649                           tosu	equ	0xFFF
 10650                           tosh	equ	0xFFE
 10651                           tosl	equ	0xFFD
 10652                           pclath	equ	0xFFA
 10653                           tblptru	equ	0xFF8
 10654                           tblptrh	equ	0xFF7
 10655                           tblptrl	equ	0xFF6
 10656                           tablat	equ	0xFF5
 10657                           prodh	equ	0xFF4
 10658                           prodl	equ	0xFF3
 10659                           intcon	equ	0xFF2
 10660                           intcon2	equ	0xFF1
 10661                           postinc0	equ	0xFEE
 10662                           wreg	equ	0xFE8
 10663                           postinc1	equ	0xFE6
 10664                           postdec1	equ	0xFE5
 10665                           fsr1l	equ	0xFE1
 10666                           indf2	equ	0xFDF
 10667                           postinc2	equ	0xFDE
 10668                           postdec2	equ	0xFDD
 10669                           fsr2h	equ	0xFDA
 10670                           fsr2l	equ	0xFD9
 10671                           status	equ	0xFD8
 10672                           
 10673 ;; *************** function __UART2Send *****************
 10674 ;; Defined at:
 10675 ;;		line 35 in file "src/EUSART.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;  message         2   14[COMRAM] PTR unsigned char 
 10678 ;;		 -> NULL(0), string(80), 
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;  i               2   16[COMRAM] unsigned int 
 10681 ;; Return value:  Size  Location     Type
 10682 ;;		None               void
 10683 ;; Registers used:
 10684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10693 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10694 ;;Total ram usage:        4 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    1
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_loop
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text50
 10705  002CBA                     __ptext50:
 10706                           	opt stack 0
 10707  002CBA                     __UART2Send:
 10708                           	opt stack 28
 10709                           
 10710                           ;EUSART.c: 36: for (uint16_t i = 0; *(message + i) != '\0'; i++) {
 10711                           
 10712                           ;incstack = 0
 10713  002CBA  0E00               	movlw	0
 10714  002CBC  6E12               	movwf	__UART2Send@i+1,c
 10715  002CBE  0E00               	movlw	0
 10716  002CC0  6E11               	movwf	__UART2Send@i,c
 10717  002CC2  D00C               	goto	l4081
 10718  002CC4                     l298:
 10719  002CC4  A2BA               	btfss	4026,1,c	;volatile
 10720  002CC6  D7FE               	goto	l298
 10721                           
 10722                           ;EUSART.c: 38: TXREG2 = *(message + i);
 10723  002CC8  5011               	movf	__UART2Send@i,w,c
 10724  002CCA  240F               	addwf	__UART2Send@message,w,c
 10725  002CCC  6ED9               	movwf	fsr2l,c
 10726  002CCE  5012               	movf	__UART2Send@i+1,w,c
 10727  002CD0  2010               	addwfc	__UART2Send@message+1,w,c
 10728  002CD2  6EDA               	movwf	fsr2h,c
 10729  002CD4  50DF               	movf	indf2,w,c
 10730  002CD6  6E79               	movwf	3961,c	;volatile
 10731  002CD8  4A11               	infsnz	__UART2Send@i,f,c
 10732  002CDA  2A12               	incf	__UART2Send@i+1,f,c
 10733  002CDC                     l4081:
 10734  002CDC  5011               	movf	__UART2Send@i,w,c
 10735  002CDE  240F               	addwf	__UART2Send@message,w,c
 10736  002CE0  6ED9               	movwf	fsr2l,c
 10737  002CE2  5012               	movf	__UART2Send@i+1,w,c
 10738  002CE4  2010               	addwfc	__UART2Send@message+1,w,c
 10739  002CE6  6EDA               	movwf	fsr2h,c
 10740  002CE8  50DF               	movf	indf2,w,c
 10741  002CEA  A4D8               	btfss	status,2,c
 10742  002CEC  D7EB               	goto	l298
 10743  002CEE                     l302:
 10744  002CEE  A2BA               	btfss	4026,1,c	;volatile
 10745  002CF0  D7FE               	goto	l302
 10746                           
 10747                           ;EUSART.c: 43: TXREG2 = 0x00;
 10748  002CF2  0E00               	movlw	0
 10749  002CF4  6E79               	movwf	3961,c	;volatile
 10750  002CF6  0012               	return	
 10751  002CF8                     __end_of__UART2Send:
 10752                           	opt stack 0
 10753                           tosu	equ	0xFFF
 10754                           tosh	equ	0xFFE
 10755                           tosl	equ	0xFFD
 10756                           pclath	equ	0xFFA
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           prodh	equ	0xFF4
 10762                           prodl	equ	0xFF3
 10763                           intcon	equ	0xFF2
 10764                           intcon2	equ	0xFF1
 10765                           postinc0	equ	0xFEE
 10766                           wreg	equ	0xFE8
 10767                           postinc1	equ	0xFE6
 10768                           postdec1	equ	0xFE5
 10769                           fsr1l	equ	0xFE1
 10770                           indf2	equ	0xFDF
 10771                           postinc2	equ	0xFDE
 10772                           postdec2	equ	0xFDD
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777 ;; *************** function __UART1Send *****************
 10778 ;; Defined at:
 10779 ;;		line 7 in file "src/EUSART.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  message         2   14[COMRAM] PTR unsigned char 
 10782 ;;		 -> NULL(0), string(80), 
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;  i               2   16[COMRAM] unsigned int 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;		None               void
 10787 ;; Registers used:
 10788 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10798 ;;Total ram usage:        4 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    1
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_loop
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           	psect	text51
 10809  002CF8                     __ptext51:
 10810                           	opt stack 0
 10811  002CF8                     __UART1Send:
 10812                           	opt stack 28
 10813                           
 10814                           ;EUSART.c: 8: for (uint16_t i = 0; *(message + i) != '\0'; i++) {
 10815                           
 10816                           ;incstack = 0
 10817  002CF8  0E00               	movlw	0
 10818  002CFA  6E12               	movwf	__UART1Send@i+1,c
 10819  002CFC  0E00               	movlw	0
 10820  002CFE  6E11               	movwf	__UART1Send@i,c
 10821  002D00  D00C               	goto	l4071
 10822  002D02                     l280:
 10823  002D02  A2AC               	btfss	4012,1,c	;volatile
 10824  002D04  D7FE               	goto	l280
 10825                           
 10826                           ;EUSART.c: 10: TXREG1 = *(message + i);
 10827  002D06  5011               	movf	__UART1Send@i,w,c
 10828  002D08  240F               	addwf	__UART1Send@message,w,c
 10829  002D0A  6ED9               	movwf	fsr2l,c
 10830  002D0C  5012               	movf	__UART1Send@i+1,w,c
 10831  002D0E  2010               	addwfc	__UART1Send@message+1,w,c
 10832  002D10  6EDA               	movwf	fsr2h,c
 10833  002D12  50DF               	movf	indf2,w,c
 10834  002D14  6EAD               	movwf	4013,c	;volatile
 10835  002D16  4A11               	infsnz	__UART1Send@i,f,c
 10836  002D18  2A12               	incf	__UART1Send@i+1,f,c
 10837  002D1A                     l4071:
 10838  002D1A  5011               	movf	__UART1Send@i,w,c
 10839  002D1C  240F               	addwf	__UART1Send@message,w,c
 10840  002D1E  6ED9               	movwf	fsr2l,c
 10841  002D20  5012               	movf	__UART1Send@i+1,w,c
 10842  002D22  2010               	addwfc	__UART1Send@message+1,w,c
 10843  002D24  6EDA               	movwf	fsr2h,c
 10844  002D26  50DF               	movf	indf2,w,c
 10845  002D28  A4D8               	btfss	status,2,c
 10846  002D2A  D7EB               	goto	l280
 10847  002D2C                     l284:
 10848  002D2C  A2AC               	btfss	4012,1,c	;volatile
 10849  002D2E  D7FE               	goto	l284
 10850                           
 10851                           ;EUSART.c: 15: TXREG1 = 0x00;
 10852  002D30  0E00               	movlw	0
 10853  002D32  6EAD               	movwf	4013,c	;volatile
 10854  002D34  0012               	return	
 10855  002D36                     __end_of__UART1Send:
 10856                           	opt stack 0
 10857                           tosu	equ	0xFFF
 10858                           tosh	equ	0xFFE
 10859                           tosl	equ	0xFFD
 10860                           pclath	equ	0xFFA
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodh	equ	0xFF4
 10866                           prodl	equ	0xFF3
 10867                           intcon	equ	0xFF2
 10868                           intcon2	equ	0xFF1
 10869                           postinc0	equ	0xFEE
 10870                           wreg	equ	0xFE8
 10871                           postinc1	equ	0xFE6
 10872                           postdec1	equ	0xFE5
 10873                           fsr1l	equ	0xFE1
 10874                           indf2	equ	0xFDF
 10875                           postinc2	equ	0xFDE
 10876                           postdec2	equ	0xFDD
 10877                           fsr2h	equ	0xFDA
 10878                           fsr2l	equ	0xFD9
 10879                           status	equ	0xFD8
 10880                           
 10881 ;; *************** function _isr *****************
 10882 ;; Defined at:
 10883 ;;		line 20 in file "src/main.c"
 10884 ;; Parameters:    Size  Location     Type
 10885 ;;		None
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;		None
 10888 ;; Return value:  Size  Location     Type
 10889 ;;		None               void
 10890 ;; Registers used:
 10891 ;;		wreg, status,2, status,0
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10899 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10900 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10901 ;;Total ram usage:       14 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		Interrupt level 2
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	intcode
 10911  000008                     __pintcode:
 10912                           	opt stack 0
 10913  000008                     _isr:
 10914                           	opt stack 24
 10915                           
 10916                           ;incstack = 0
 10917  000008  CFFA F001          	movff	pclath,??_isr
 10918  00000C  CFFB F002          	movff	pclatu,??_isr+1
 10919  000010  CFE9 F003          	movff	fsr0l,??_isr+2
 10920  000014  CFEA F004          	movff	fsr0h,??_isr+3
 10921  000018  CFE1 F005          	movff	fsr1l,??_isr+4
 10922  00001C  CFE2 F006          	movff	fsr1h,??_isr+5
 10923  000020  CFD9 F007          	movff	fsr2l,??_isr+6
 10924  000024  CFDA F008          	movff	fsr2h,??_isr+7
 10925  000028  CFF3 F009          	movff	prodl,??_isr+8
 10926  00002C  CFF4 F00A          	movff	prodh,??_isr+9
 10927  000030  CFF6 F00B          	movff	tblptrl,??_isr+10
 10928  000034  CFF7 F00C          	movff	tblptrh,??_isr+11
 10929  000038  CFF8 F00D          	movff	tblptru,??_isr+12
 10930  00003C  CFF5 F00E          	movff	tablat,??_isr+13
 10931                           
 10932                           ;main.c: 21: if (PIR1bits.SSPIF == 1) {
 10933  000040  A69E               	btfss	3998,3,c	;volatile
 10934  000042  D007               	goto	i2l75
 10935                           
 10936                           ;main.c: 22: PIR1bits.SSPIF = 0;
 10937  000044  969E               	bcf	3998,3,c	;volatile
 10938                           
 10939                           ;main.c: 23: if (SSPCON1bits.WCOL || SSPCON1bits.SSPOV) {
 10940  000046  BEC6               	btfsc	4038,7,c	;volatile
 10941  000048  D002               	goto	i2l78
 10942  00004A  ACC6               	btfss	4038,6,c	;volatile
 10943  00004C  D002               	goto	i2l75
 10944  00004E                     i2l78:
 10945                           
 10946                           ;main.c: 24: SSPCON1bits.SSPOV = 0;
 10947  00004E  9CC6               	bcf	4038,6,c	;volatile
 10948                           
 10949                           ;main.c: 25: SSPCON1bits.WCOL = 0;
 10950  000050  9EC6               	bcf	4038,7,c	;volatile
 10951  000052                     i2l75:
 10952                           
 10953                           ;main.c: 26: }
 10954                           ;main.c: 27: }
 10955                           ;main.c: 28: if (PIR2bits.BCLIF == 1) {
 10956  000052  B6A1               	btfsc	4001,3,c	;volatile
 10957                           
 10958                           ;main.c: 29: PIR2bits.BCLIF = 0;
 10959  000054  96A1               	bcf	4001,3,c	;volatile
 10960                           
 10961                           ;main.c: 30: }
 10962                           ;main.c: 31: if (INTCONbits.TMR0IF == 1) {
 10963  000056  A4F2               	btfss	intcon,2,c	;volatile
 10964  000058  D00C               	goto	i2l81
 10965                           
 10966                           ;main.c: 32: INTCONbits.TMR0IF = 0;
 10967  00005A  94F2               	bcf	intcon,2,c	;volatile
 10968                           
 10969                           ;main.c: 33: TMR0H = timer0.b;
 10970  00005C  0100               	movlb	0	; () banked
 10971  00005E  51CB               	movf	(_timer0+1)& (0+255),w,b
 10972  000060  0BFF               	andlw	255
 10973  000062  6ED7               	movwf	4055,c	;volatile
 10974                           
 10975                           ;main.c: 34: TMR0L = timer0.a;
 10976  000064  0100               	movlb	0	; () banked
 10977  000066  51CA               	movf	_timer0& (0+255),w,b
 10978  000068  0BFF               	andlw	255
 10979  00006A  6ED6               	movwf	4054,c	;volatile
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 35: start = 1;
 10983  00006C  0E01               	movlw	1
 10984  00006E  0100               	movlb	0	; () banked
 10985  000070  6FD1               	movwf	_start& (0+255),b
 10986  000072                     i2l81:
 10987  000072  C00E  FFF5         	movff	??_isr+13,tablat
 10988  000076  C00D  FFF8         	movff	??_isr+12,tblptru
 10989  00007A  C00C  FFF7         	movff	??_isr+11,tblptrh
 10990  00007E  C00B  FFF6         	movff	??_isr+10,tblptrl
 10991  000082  C00A  FFF4         	movff	??_isr+9,prodh
 10992  000086  C009  FFF3         	movff	??_isr+8,prodl
 10993  00008A  C008  FFDA         	movff	??_isr+7,fsr2h
 10994  00008E  C007  FFD9         	movff	??_isr+6,fsr2l
 10995  000092  C006  FFE2         	movff	??_isr+5,fsr1h
 10996  000096  C005  FFE1         	movff	??_isr+4,fsr1l
 10997  00009A  C004  FFEA         	movff	??_isr+3,fsr0h
 10998  00009E  C003  FFE9         	movff	??_isr+2,fsr0l
 10999  0000A2  C002  FFFB         	movff	??_isr+1,pclatu
 11000  0000A6  C001  FFFA         	movff	??_isr,pclath
 11001  0000AA  0011               	retfie		f
 11002  0000AC                     __end_of_isr:
 11003                           	opt stack 0
 11004                           tosu	equ	0xFFF
 11005                           tosh	equ	0xFFE
 11006                           tosl	equ	0xFFD
 11007                           pclatu	equ	0xFFB
 11008                           pclath	equ	0xFFA
 11009                           tblptru	equ	0xFF8
 11010                           tblptrh	equ	0xFF7
 11011                           tblptrl	equ	0xFF6
 11012                           tablat	equ	0xFF5
 11013                           prodh	equ	0xFF4
 11014                           prodl	equ	0xFF3
 11015                           intcon	equ	0xFF2
 11016                           intcon2	equ	0xFF1
 11017                           postinc0	equ	0xFEE
 11018                           fsr0h	equ	0xFEA
 11019                           fsr0l	equ	0xFE9
 11020                           wreg	equ	0xFE8
 11021                           postinc1	equ	0xFE6
 11022                           postdec1	equ	0xFE5
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           tosu	equ	0xFFF
 11032                           tosh	equ	0xFFE
 11033                           tosl	equ	0xFFD
 11034                           pclatu	equ	0xFFB
 11035                           pclath	equ	0xFFA
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           prodh	equ	0xFF4
 11041                           prodl	equ	0xFF3
 11042                           intcon	equ	0xFF2
 11043                           intcon2	equ	0xFF1
 11044                           postinc0	equ	0xFEE
 11045                           fsr0h	equ	0xFEA
 11046                           fsr0l	equ	0xFE9
 11047                           wreg	equ	0xFE8
 11048                           postinc1	equ	0xFE6
 11049                           postdec1	equ	0xFE5
 11050                           fsr1h	equ	0xFE2
 11051                           fsr1l	equ	0xFE1
 11052                           indf2	equ	0xFDF
 11053                           postinc2	equ	0xFDE
 11054                           postdec2	equ	0xFDD
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059                           	psect	rparam
 11060  0000                     tosu	equ	0xFFF
 11061                           tosh	equ	0xFFE
 11062                           tosl	equ	0xFFD
 11063                           pclatu	equ	0xFFB
 11064                           pclath	equ	0xFFA
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           intcon2	equ	0xFF1
 11073                           postinc0	equ	0xFEE
 11074                           fsr0h	equ	0xFEA
 11075                           fsr0l	equ	0xFE9
 11076                           wreg	equ	0xFE8
 11077                           postinc1	equ	0xFE6
 11078                           postdec1	equ	0xFE5
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8


Data Sizes:
    Strings     139
    Constant    150
    Data        15
    BSS         117
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     72      81
    BANK0           160     82     127
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_2(CODE[37]), STR_1(CODE[67]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_4(CODE[12]), STR_3(CODE[6]), STR_2(CODE[37]), STR_1(CODE[67]), 

    S1904__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    S1904__prbuf$ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(COMRAM[4]), 

    S1952$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    getADC9@zonnekracht	PTR float  size(2) Largest target is 3
		 -> adc(BANK0[3]), 

    getTemperature@address	PTR unsigned char  size(2) Largest target is 8
		 -> tempAddress(BANK0[8]), 

    timer0init@timer0	PTR struct . size(2) Largest target is 2
		 -> timer0(BANK0[2]), 

    _UART2Send@message	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    _UART1Send@message	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 

    _I2CReceive@data	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), month(BANK0[1]), day(BANK0[1]), second(BANK0[1]), 
		 -> minute(BANK0[1]), hour(BANK0[1]), 

    bcdtodec@dec	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), day(BANK0[1]), second(BANK0[1]), minute(BANK0[1]), 

    toMonth@year	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), 

    toMonth@month	PTR unsigned char  size(2) Largest target is 1
		 -> month(BANK0[1]), 

    toHour@hour	PTR unsigned char  size(2) Largest target is 1
		 -> hour(BANK0[1]), 

    getDate@year	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), 

    getDate@month	PTR unsigned char  size(2) Largest target is 1
		 -> month(BANK0[1]), 

    getDate@day	PTR unsigned char  size(2) Largest target is 1
		 -> day(BANK0[1]), 

    getTime@hour	PTR unsigned char  size(2) Largest target is 1
		 -> hour(BANK0[1]), 

    getTime@minute	PTR unsigned char  size(2) Largest target is 1
		 -> minute(BANK0[1]), 

    getTime@second	PTR unsigned char  size(2) Largest target is 1
		 -> second(BANK0[1]), 

    message	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), string(BANK1[80]), 


Critical Paths under _main in COMRAM

    _timer0init->___fttol
    __UART2Init->___lldiv
    __UART1Init->___lldiv
    __I2CInit->___lldiv
    __doprnt->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    _getTime->__I2CAddress
    _getTime->__I2CReceive
    _getTime->_bcdtodec
    _getTime->_toHour
    _getTemperature->___ftmul
    _onewireReadByte->_onewireReadBit
    _getDate->_toMonth
    __I2CStop->__I2CWait
    __I2CStart->__I2CWait
    __I2CRepeatedStart->__I2CWait
    __I2CReceive->__I2CWait
    __I2CAddress->__I2CSend
    __I2CSend->__I2CWait
    _getADC9->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _broadcastConvert->_onewireWriteByte
    _onewireWriteByte->_onewireWriteBit

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _setup->_timer0init
    _timer0init->___fttol
    _loop->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   97611
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   14741
                           __I2CInit
                         __UART1Init
                         __UART2Init
                         _timer0init
 ---------------------------------------------------------------------------------
 (2) _timer0init                                          12     7      5   11309
                                              6 BANK0     12     7      5
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) __UART2Init                                           8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) __UART1Init                                           8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) __I2CInit                                             8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0   82870
                         __UART1Send
                         __UART2Send
                   _broadcastConvert
                            _getADC9
                            _getDate
                     _getTemperature
                            _getTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28     6     22   56049
                                             54 BANK0     28     6     22
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             52    46      6   55286
                                              6 BANK0     48    42      6
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11859
                                             56 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   11580
                                             56 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2335
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1666
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     574
                                             14 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2672
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1058
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     679
                                             63 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4781
                                             34 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4448
                                             22 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getTime                                              6     0      6    2536
                                             18 COMRAM     6     0      6
                        __I2CAddress
                        __I2CReceive
                  __I2CRepeatedStart
                           __I2CSend
                          __I2CStart
                           __I2CStop
                           _bcdtodec
                             _toHour
 ---------------------------------------------------------------------------------
 (3) _toHour                                               4     2      2     263
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getTemperature                                      18    15      3    9324
                                             56 COMRAM     5     2      3
                                              0 BANK0     13    13      0
                           ___awtoft
                            ___ftmul
                        _onewireInit
                    _onewireReadByte
                   _onewireWriteByte
 ---------------------------------------------------------------------------------
 (3) _onewireReadByte                                      2     2      0     142
                                             15 COMRAM     2     2      0
                     _onewireReadBit
 ---------------------------------------------------------------------------------
 (2) _getDate                                              6     0      6    2556
                                             20 COMRAM     6     0      6
                        __I2CAddress
                        __I2CReceive
                  __I2CRepeatedStart
                           __I2CSend
                          __I2CStart
                           __I2CStop
                           _bcdtodec
                            _toMonth
 ---------------------------------------------------------------------------------
 (3) _toMonth                                              6     2      4     261
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _bcdtodec                                             4     2      2     345
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) __I2CStop                                             0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CStart                                            0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CRepeatedStart                                    0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CReceive                                          3     0      3     940
                                             15 COMRAM     3     0      3
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CAddress                                          2     1      1     642
                                             16 COMRAM     2     1      1
                           __I2CSend
 ---------------------------------------------------------------------------------
 (3) __I2CSend                                             1     1      0      22
                                             15 COMRAM     1     1      0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (4) __I2CWait                                             1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getADC9                                              6     4      2   11819
                                             56 COMRAM     6     4      2
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5713
                                             41 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3181
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2780
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2493
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _broadcastConvert                                     0     0      0     278
                        _onewireInit
                     _onewireReadBit
                   _onewireWriteByte
 ---------------------------------------------------------------------------------
 (3) _onewireWriteByte                                     3     3      0     244
                                             16 COMRAM     3     3      0
                    _onewireWriteBit
 ---------------------------------------------------------------------------------
 (4) _onewireWriteBit                                      2     0      2     142
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _onewireReadBit                                       1     1      0      34
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _onewireInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __UART2Send                                           4     2      2     154
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) __UART1Send                                           4     2      2     154
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     __UART1Send
     __UART2Send
     _broadcastConvert
       _onewireInit
       _onewireReadBit
       _onewireWriteByte
         _onewireWriteBit
     _getADC9
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _getDate
       __I2CAddress
         __I2CSend
           __I2CWait
       __I2CReceive
         __I2CWait
       __I2CRepeatedStart
         __I2CWait
       __I2CSend
         __I2CWait
       __I2CStart
         __I2CWait
       __I2CStop
         __I2CWait
       _bcdtodec
       _toMonth
     _getTemperature
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _onewireInit
       _onewireReadByte
         _onewireReadBit
       _onewireWriteByte
         _onewireWriteBit
     _getTime
       __I2CAddress
         __I2CSend
           __I2CWait
       __I2CReceive
         __I2CWait
       __I2CRepeatedStart
         __I2CWait
       __I2CSend
         __I2CWait
       __I2CStart
         __I2CWait
       __I2CStop
         __I2CWait
       _bcdtodec
       _toHour
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _setup
     __I2CInit
       ___lldiv
     __UART1Init
       ___lldiv
     __UART2Init
       ___lldiv
     _timer0init
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      50       8       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      7F       5       79.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     48      51       1       85.3%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120       6        0.0%
DATA                 0      0     120       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jun 07 10:59:22 2018

               _SSPSTATbits 000FC7                ___awdiv@sign 001A         ___wmul@multiplicand 001F  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0022  
              ___ftadd@exp2 0021          __UART2Send@message 000F            ??_getTemperature 003C  
              ___ftadd@sign 0020                         l202 2F44                         l302 2CEE  
                       l224 2F6E                         l216 2F5C                         l208 2F4A  
                       l225 2F76                         l217 2F64                         l209 2F52  
                       l501 0D4E                         l190 2DCC                         l280 2D02  
                       l440 26BA                         l184 2F80                         l193 2DD0  
                       l284 2D2C                         l199 2F40                         l552 0A92  
                       l298 2CC4                         l396 2D5C                         l905 1E62  
                       l974 1A0C                         l978 1A38                         l989 1AE4  
                       l998 1B00                __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000  
                       _adc 00C7                         _day 00DA                         _dow 0051  
                       _isr 0008                ___awmod@sign 0014                         prod 000FF3  
                       tosl 000FFD                         wreg 000FE8                  _TXSTA1bits 000FAC  
                _TXSTA2bits 000FBA                ___ftdiv@cntr 0024                ___ftdiv@sign 0029  
                      l1102 2824                        l1023 20CA                        l1112 29E6  
                      l1016 2038                        l1009 227C                        l1017 2060  
                      l1048 2E6A                        l3003 257C                        l3031 25F4  
                      l3023 25D4                        l3015 25AA                        l3201 1D48  
                      l3025 25DC                        l3027 25E0                        l3035 25FE  
                      l3019 25C6                        l3221 1DC6                        l3207 1D84  
                      l3039 260C                        l3153 1FFE                        l3137 2EFA  
                      l3251 1E5E                        l3243 1E3A                        l3147 1FD4  
                      l5013 2218                        l3333 27D6                        l3229 1DF6  
                      l3181 2092                        l4071 2D1A                        l5007 21F2  
                      l5103 22D2                        l3415 2BBE                        l3263 2646  
                      l3335 27E2                        l3239 1E2A                        l3191 20BA  
                      l4081 2CDC                        l5033 2256                        l3273 26A2  
                      l4321 1A1A                        l3345 2816                        l3337 27E6  
                      l3361 29D8                        l3353 29A4                        l3249 1E52  
                      l3193 20C6                        l3185 20A2                        l3267 2676  
                      l3355 29B0                        l4413 216A                        l5117 2304  
                      l3357 29B4                        l5055 2C56                        l4423 2192  
                      l4351 1AA2                        l4343 1A76                        l4327 1A46  
                      l4503 16A0                        l4409 215A                        l4361 1AD4  
                      l4353 1AAA                        l4291 2480                        l4283 244A  
                      l4419 2182                        l4611 2E82                        l4363 1ADE  
                      l4355 1AB2                        l4349 1A98                        l4509 1750  
                      l5087 2F12                        l4295 2496                        l4287 2458  
                      l4551 1F3A                        l4471 1986                        l4463 18BA  
                      l4703 043E                        l4631 0108                        l5175 2F22  
                      l4297 24B4                        l4289 2462                        l4369 1B1C  
                      l4561 1F72                        l4529 1EA2                        l4641 015C  
                      l4625 00B4                        l4299 24BE                        l4395 2128  
                      l4379 1B4C                        l4547 1F1E                        l4571 2B26  
                      l2971 2506                        l4491 1550                        l4811 09AE  
                      l4803 08E2                        l4731 0584                        l4715 04EC  
                      l4707 0484                        l4635 0138                        l5179 2F2C  
                      l4389 2102                        l4565 1F98                        l4557 1F54  
                      l4573 2B32                        l4485 14A0                        l4813 09DC  
                      l4661 021E                        l4637 0152                        l4559 1F6C  
                      l2983 253C                        l4495 1574                        l4831 0A96  
                      l4823 0A5A                        l4815 09EA                        l4735 05EC  
                      l4719 0512                        l4663 0260                        l4655 0212  
                      l4647 0196                        l2985 2544                        l2977 2526  
                      l4921 0EF4                        l4913 0EB2                        l4825 0A62  
                      l4753 0688                        l4657 0218                        l2995 2564  
                      l2987 2548                        l4915 0EC4                        l4843 0B22  
                      l4819 0A30                        l4691 03B0                        l4675 02E8  
                      l4597 2DE4                        l4925 0F2C                        l4861 0CCA  
                      l4781 07D4                        l4773 078A                        l4765 0718  
                      l4757 06AE                        l4749 0638                        l2999 256E  
                      l4935 0FA2                        l4951 1052                        l4927 0F38  
                      l4871 0D42                        l4855 0C40                        l4847 0B74  
                      l4839 0AF8                        l4791 084C                        l4961 10CC  
                      l4953 105C                        l4945 101E                        l4881 0DDC  
                      l4865 0D10                        l4857 0C6E                        l4785 081A  
                      l4777 07B4                        l4769 0744                        l4963 10DE  
                      l4939 0FCC                        l4883 0E1A                        l4859 0CBC  
                      l4779 07BC                        l4699 0418                        ?_isr 0001  
                      l4957 10A2                        l4949 1048                        l4973 116C  
                      l4869 0D3A                        l4789 0844                        l4975 1180  
                      l4983 12A2                        l4799 08C6                        l4977 1216  
                      l4985 12B4                        l4993 1328                        l4969 1142  
                      l4897 0E66                        l4995 133C                        l4989 12FC  
                      l4997 135E                        STR_1 7F73                        STR_2 7FB6  
                      STR_3 7FF8                        STR_4 7FEC                        STR_5 7FDB  
                      u3031 1FBA                        u3120 1D2A                        u3051 1FE4  
                      u3140 1D66                        u3125 1D20                        u3145 1D5C  
                      u5111 2112                        u3520 2BC6                        u3530 2CA8  
                      u3526 2BC8                        u3536 2CAA                        u3465 2DC8  
                      u5241 1E84                        u3466 2DCA                        u3490 2B96  
                      u6211 21DC                        u5091 20EC                        u5260 1EC0  
                      u6231 2202                        u3496 2B98                        u6128 108C  
                      u4480 2AB6                        u5265 1EB8                        u6058 0F8C  
                      u5418 00F0                        u4490 2A52                        u4485 2AAC  
                      u5470 0338                        u5455 02C2                        u4495 2A48  
                      u6168 112C                        u6088 1008                        u6281 22B8  
                      u6507 2EC6                        u5475 032C                        u6188 12E4  
                      u5708 0804                        u6517 2ED0                        u6527 2EDA  
                      i2l81 0072                        u6457 2D4C                        u4881 19D6  
                      u5658 0702                        i2l75 0052                        u6467 2D56  
                      u4891 19EA                        u5748 08B0                        u6477 2D62  
                      u5925 0DB2                        i2l78 004E                        u5678 0774  
                      u6487 2EA6                        u5848 0AE2                        u5768 0994  
                      u6497 2EB6                        u5868 0C26                        u5798 0A1A  
                      u5898 0CFA                        _main 2F1E                ___ftpack@arg 000F  
                      _hour 00CC                        _loop 1B72                ___ftpack@exp 0012  
                      _temp 00C4                        _year 00DC                        fsr0h 000FEA  
                      fsr1h 000FE2                        fsr0l 000FE9                        fsr2h 000FDA  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
                      pclat 000FFA                        prodh 000FF4                        prodl 000FF3  
                      start 00AC               __CFG_IESO$OFF 000000               __CFG_FOSC$HS1 000000  
             __CFG_MCLRE$ON 000000                ___ftmul@cntr 0037                ___ftmul@sign 0038  
              ___fttol@exp1 0065                ___fttol@lval 0061                       ??_isr 0001  
                __UART1Init 2A5C                  __UART2Init 29F8                  __UART1Send 2CF8  
                __UART2Send 2CBA   __size_of_broadcastConvert 001C                       ?_main 0001  
           __end_of___awdiv 2586                       ?_loop 0001             __end_of___ftadd 1B72  
           __end_of___awmod 2616             __end_of___ftdiv 22AE             __end_of___ftneg 2E78  
           __end_of___lldiv 2836             __end_of___ftmul 21CC             ___awdiv@divisor 0017  
           __end_of___llmod 29F8             __end_of___ftsub 2DA6             __end_of___fttol 1FAA  
          ?_onewireReadByte 0001             ___awdiv@counter 0019             __end_of_getADC9 2730  
                     _TMR0H 000FD7                       _TMR0L 000FD6             __end_of__doprnt 136C  
             __CFG_WRT0$OFF 000000             __end_of_getDate 27B4               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000                ___lltoft@exp 001F  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000             __end_of_getTime 28B2  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000               ___awtoft@sign 001A             __end_of_dpowers 7F05  
           _timer0init$2563 006F                       _scale 136C             __end_of_isdigit 2F02  
                     _month 00DB                       _year1 00CF               ___ftpack@sign 0013  
          __end_of__I2CInit 2C32                       _setup 28B2            __end_of__I2CSend 2F4A  
                     _putch 2FB0            __end_of__I2CWait 2F92                       _start 00D1  
          __end_of__I2CStop 2F5C             __end_of_toMonth 2CBA              __CFG_BOREN$OFF 000000  
                     pclath 000FFA                       tablat 000FF5         onewireReadByte@loop 0011  
        __size_of__I2CStart 0012                       status 000FD8             __end_of_sprintf 2992  
          ?_onewireWriteBit 000F             __initialization 2AC0                __end_of_main 2F36  
              __end_of_loop 1D0C        onewireReadBit@result 000F                      ??_main 0049  
             ___fttol@sign1 0060                      ??_loop 0049               __activetblptr 000002  
      __size_of__tdiv_to_l_ 0132              __CFG_RETEN$OFF 000000                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADCON2 000FC0          getTemperature@F206 00B2  
          ___llmod@dividend 001C                      ?_scale 0039                      _ADRESH 000FC4  
                    _ADRESL 000FC3            ___awdiv@dividend 0015                      ?_setup 0001  
          __end_of___awtoft 2C7A                      ?_putch 0001            __end_of___ftpack 24E2  
          __end_of___lltoft 2B7C             __CFG_BBSIZ$BB2K 000000              __CFG_WDTEN$OFF 000000  
                    _RCREG1 000FAE                      _RCREG2 000F7A                      _RCSTA1 000FAB  
                    _RCSTA2 000FA6                      _SPBRG1 000FAF                      _SPBRG2 000F7B  
          __end_of_bcdtodec 2E2C                      _SSPADD 000FC8                      _SSPBUF 000FC9  
                    _TXREG1 000FAD                      _TXREG2 000F79                      _TXSTA1 000FAC  
                    _TXSTA2 000FBA                ?_onewireInit 0001                __doprnt$2567 0072  
            __CFG_XINST$OFF 000000                __doprnt$1972 0075            __end_of__powers_ 7F53  
                    ___ftge 2616                      ___wmul 2E2C                   ??___awdiv 0019  
                 ??___ftadd 001D              __CFG_STVREN$ON 000000                   ??___awmod 0013  
                 ??___ftdiv 0021                   ??___ftneg 0012                   ??___lldiv 0017  
                 ??___ftmul 0030                   ??___llmod 0024                   ??___ftsub 0029  
                 ??___fttol 0044                 ?__UART1Init 001C                 ?__UART2Init 001C  
               ?__UART1Send 000F                 ?__UART2Send 000F                   ??_getADC9 003B  
                 ??__doprnt 006C                      _fround 1774                      clear_0 2AC6  
                    clear_1 2AD2                      clear_2 2ADE            ___awdiv@quotient 001B  
                    _minute 00CD                      _second 00CE                      _toHour 2B7C  
           ___awmod@divisor 0011                   ??_getDate 001B                      _timer0 00CA  
              __doprnt@_val 008B                __doprnt@flag 0090             ___awmod@counter 0013  
              __doprnt@fval 0092                   ??_getTime 0019                __doprnt@prec 0085  
         __end_of__I2CStart 2F6E                      _string 0100     __size_of_onewireReadBit 0024  
     ___ftmul@f3_as_product 0034                __pdataCOMRAM 0051                   ??_isdigit 000F  
              __mediumconst 7EDC                   ??_toMonth 0013                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                      putch@c 0001  
              ?__I2CAddress 0011                   ??_sprintf 0049           ?_onewireWriteByte 0001  
                __accesstop 0060     __end_of__initialization 2B16                  ___ftadd@f1 0017  
                ___ftadd@f2 001A                  ___ftge@ff1 000F                  ___ftge@ff2 0012  
              ?__I2CReceive 0010          ??_onewireWriteByte 0011                  ___ftdiv@f1 001B  
                ___ftdiv@f2 001E                  ___ftdiv@f3 0025                  ___ftneg@f1 000F  
                ___awtoft@c 0017                  ___ftmul@f1 002A                  ___ftmul@f2 002D  
                ___ftsub@f1 0023                  ___ftsub@f2 0026                  ___fttol@f1 0040  
            __pcstackCOMRAM 0001                __pidataBANK0 2FA2                  ___lltoft@c 0017  
             __end_of_scale 1774               __end_of_setup 292C               __end_of_putch 2FB2  
                 ?__I2CInit 001C                   ?__I2CSend 0001                   ?__I2CWait 0001  
          _broadcastConvert 2F02                   ?__I2CStop 0001                  __div_to_l_ 1D0C  
                __doprnt@ap 006A                  __doprnt@pb 0066                  __doprnt@vd 007A  
           __div_to_l_@exp1 001E             __div_to_l_@cntr 001D                     ??_scale 003C  
           __div_to_l_@quot 0019                     ??_setup 0049                     ??_putch 000F  
              __UART1Send@i 0011                  __pbssBANK0 00B2                  __pbssBANK1 0100  
              __UART2Send@i 0011         __size_of__UART1Init 0064         __size_of__UART2Init 0064  
       __size_of__UART1Send 003E             __CFG_PLLCFG$OFF 000000         __size_of__UART2Send 003E  
             __div_to_l_@f1 000F               __div_to_l_@f2 0012                     ?___ftge 000F  
                   ?___wmul 001D           timer0init@seconds 0068                     ?_fround 0039  
                ??__I2CInit 0020                  ??__I2CSend 0010                     ?_toHour 000F  
                ??__I2CWait 000F                   ?___awtoft 0017                   ?___ftpack 000F  
                ??__I2CStop 0010                   ?___lltoft 0017                   ?_bcdtodec 000F  
          __CFG_CANMX$PORTB 000000                  getADC9@adc 003D                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                 toMonth@year 0011   getTemperature@temperature 0069  
           __CFG_PWRTEN$OFF 000000           __end_of__npowers_ 7F2C                     __Hparam 0000  
                _scale$2566 003C                     __Lparam 0000        __size_of_onewireInit 0022  
           __size_of___ftge 0090                     ___awdiv 24E2                     ___ftadd 19C6  
                   ___awmod 2586                     ___ftdiv 21CC                     ___ftneg 2E52  
                   ___lldiv 27B4             __size_of___wmul 0026                     ___ftmul 20DC  
                   ___llmod 2992                     ___ftsub 2D70                     ___fttol 1E74  
                   _getADC9 26A6                     __doprnt 00B0                     __pcinit 2AC0  
                ??___awtoft 001A                  ??___ftpack 0014             __size_of_fround 0252  
                   _getDate 2730                     __ramtop 0F00             __size_of_toHour 005C  
                ??___lltoft 001B              _onewireReadBit 2E9C                     __ptext0 2F1E  
                   __ptext1 28B2                     __ptext2 2382                     __ptext3 29F8  
                   _getTime 2836                     __ptext4 2A5C                     __ptext5 2BD8  
                   __ptext6 1B72                     __ptext7 292C                     __ptext8 00B0  
                   __ptext9 136C                   _T0CONbits 000FD5           __end_of_hexpowers 7F73  
               ?__div_to_l_ 000F                     _dpowers 7EDD                  ??_bcdtodec 0011  
      onewireWriteByte@data 0012                     _isdigit 2EE2                __size_of_isr 00A4  
                   _message 00DD            ___awmod@dividend 000F        onewireWriteByte@loop 0013  
         __CFG_MSSPMSK$MSK7 000000                     _toMonth 2C7A               __doprnt@integ 0082  
                   _sprintf 292C               __doprnt@width 0087        end_of_initialization 2B16  
  __size_of_onewireReadByte 0024     __size_of_getTemperature 00D4                  getDate@day 0015  
      __size_of__I2CAddress 0010               __Lmediumconst 7EDC                     toHour@h 0012  
           ___lldiv@divisor 0013             ___lldiv@counter 001B       getTemperature@address 0039  
      __size_of__I2CReceive 0030       onewireReadByte@result 0010                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc1 000FE6  
                   postinc2 000FDE                  _timer0init 2382                ??__UART1Init 0020  
              ??__UART2Init 0020                ??__UART1Send 0011                ??__UART2Send 0011  
            __tdiv_to_l_@f1 000F              __tdiv_to_l_@f2 0012      __end_of_onewireReadBit 2EC0  
  __size_of_onewireWriteBit 003A               ??__tdiv_to_l_ 0015       getTemperatureInt@F211 00BB  
                 _PORTAbits 000F80                   _TRISAbits 000F92                   _TRISBbits 000F93  
                 _TRISCbits 000F94                   __I2CStart 2F5C          getADC9@zonnekracht 0039  
         __I2CRepeatedStart 2F6E          ?__I2CRepeatedStart 0001    __end_of_broadcastConvert 2F1E  
        __end_of__UART1Init 2AC0          __end_of__UART2Init 2A5C          __end_of__UART1Send 2D36  
        __end_of__UART2Send 2CF8                 ___ftdiv@exp 0028         __size_of__div_to_l_ 0168  
       ??__I2CRepeatedStart 0010                 ___ftmul@exp 0033              __end_of___ftge 26A6  
           ?_onewireReadBit 0001              __end_of___wmul 2E52   __size_of_onewireWriteByte 002E  
             __pidataCOMRAM 2FB2              __end_of_fround 19C6              __end_of_toHour 2BD8  
         __size_of__I2CInit 005A           __size_of__I2CSend 0014           __size_of__I2CWait 0012  
         __size_of__I2CStop 0012         start_initialization 2AC0   __end_of__I2CRepeatedStart 2F80  
                ?__I2CStart 0001         __end_of__tdiv_to_l_ 20DC                 __end_of_isr 00AC  
           ___llmod@divisor 0020             ___llmod@counter 0024           ??_onewireReadByte 0010  
                  ??___ftge 0015                 ?_timer0init 0066                    ??___wmul 0021  
               __doprnt@idx 0079                 __doprnt@exp 0089                 __pdataBANK0 00CF  
                  ??_fround 003C                    ??_toHour 0011                  fround@prec 0042  
         __size_of___awtoft 0048           __size_of___ftpack 00A8           __size_of___lltoft 005C  
         ??_onewireWriteBit 0011                 __pbssCOMRAM 0049               __pcstackBANK0 0060  
         __size_of_bcdtodec 0028         __end_of__stringdata 7FFE                _isdigit$2257 0010  
            _getTemperature 22AE             getTemperature@i 006C            onewireWriteBit@b 000F  
                 __doprnt@c 0095                   __doprnt@f 0068            __I2CReceive@data 0010  
                 __pnvBANK0 00DD                   __pintcode 0008               __pmediumconst 7EDC  
                toHour@hour 000F            timer0init@timer0 0066                    ?___awdiv 0015  
                  ?___ftadd 0017                    ?___awmod 000F                    ?___ftdiv 001B  
                  ?___ftneg 000F                    ?___lldiv 000F                    ?___ftmul 002A  
                  ?___llmod 001C                    ?___ftsub 0023                   __npowers_ 7F05  
                  ?___fttol 0040                    ?_getADC9 0039                    ?__doprnt 0066  
                  ?_getDate 0015                 __tdiv_to_l_ 1FAA                    ?_getTime 0013  
              ??__div_to_l_ 0015                    _BAUDCON1 000FA7                    _BAUDCON2 000FB9  
                  ?_isdigit 0001  __size_of__I2CRepeatedStart 0012                    ?_toMonth 000F  
               ??__I2CStart 0010      __end_of_getTemperature 2382                   _hexpowers 7F53  
                  ?_sprintf 0096              __size_of_scale 0408              __size_of_setup 007A  
       __size_of_timer0init 00B8              __size_of_putch 0002              ___wmul@product 0021  
             ??_onewireInit 000F                    _IPR1bits 000F9F                    _PIE1bits 000F9D  
                  _PIE2bits 000FA0                    _PIE3bits 000FA3                    _PIR1bits 000F9E  
        __end_of__div_to_l_ 1E74                    _PIR2bits 000FA1                    _PIR3bits 000FA4  
                  _RCONbits 000FD0             __doprnt@vd_1974 007E            _onewireWriteByte 2DD6  
                  __I2CInit 2BD8                    __I2CSend 2F36                    __I2CWait 2F80  
                  __I2CStop 2F4A                  _ADCON0bits 000FC2                 __stringdata 7F73  
         ___wmul@multiplier 001D            __CFG_SOSCSEL$DIG 000000                toMonth@month 000F  
           ?_getTemperature 0039               ??__I2CAddress 0012                 bcdtodec@bcd 0012  
               bcdtodec@dec 000F                 _INTCON2bits 000FF1                   copy_data0 2AF8  
             ??__I2CReceive 0013           ?_broadcastConvert 0001                getDate@month 0017  
        ??_broadcastConvert 0014                  _ANCON0bits 000F5D                    __Hrparam 0000  
          ??_onewireReadBit 000F                    __Lrparam 0000         __end_of_onewireInit 2EE2  
          __size_of___awdiv 00A4            __size_of___ftadd 01AC            __size_of___awmod 0090  
          __size_of___ftdiv 00E2            __size_of___ftneg 0026            __size_of___lldiv 0082  
          __size_of___ftmul 00F0            __size_of___llmod 0066            __size_of___ftsub 0036  
          __size_of___fttol 0136                    ___awtoft 2C32                    ___ftpack 243A  
          __size_of_getADC9 008A            __size_of__doprnt 12BC                 _fround$2564 003F  
               _fround$2565 003C                    ___lltoft 2B20            __size_of_getDate 0084  
          __size_of_getTime 007C                    _bcdtodec 2E04             __I2CReceive@ack 0012  
    __I2CAddress@readnwrite 0011            __size_of_isdigit 0020            __size_of_toMonth 0040  
                  __ptext10 2FB0                    __ptext11 2EE2                    __ptext20 27B4  
                  __ptext12 1774                    __ptext21 1E74                    __ptext13 2E2C  
                  __ptext30 2730                    __ptext22 2D70                    __ptext14 2586  
                  __ptext31 2C7A                    __ptext23 19C6                    __ptext15 24E2  
                  __ptext40 26A6                    __ptext32 2E04                    __ptext24 2E52  
                  __ptext16 1FAA                    __ptext41 20DC                    __ptext33 2F4A  
                  __ptext25 2616                    __ptext17 1D0C                    __ptext50 2CBA  
                  __ptext42 21CC                    __ptext34 2F5C                    __ptext26 2836  
                  __ptext18 2B20                    __ptext51 2CF8                    __ptext43 2C32  
                  __ptext35 2F6E                    __ptext27 2B7C                    __ptext19 2992  
                  __ptext44 243A                    __ptext36 2DA6                    __ptext28 22AE  
                  __ptext45 2F02                    __ptext37 2F92                    __ptext29 2E78  
                  __ptext46 2DD6                    __ptext38 2F36                    __ptext47 2D36  
                  __ptext39 2F80                    __ptext48 2E9C                    __ptext49 2EC0  
           _onewireReadByte 2E78                    __powers_ 7F2C            __size_of_sprintf 0066  
             __size_of_main 0018               __size_of_loop 019A         __end_of__I2CAddress 2FA2  
            __I2CInit@BRate 001C                ??_timer0init 006B         __end_of__I2CReceive 2DD6  
           _onewireWriteBit 2D36    getTemperature@scratchPad 0060               getTime@minute 0015  
             getTime@second 0017         __CFG_INTOSCSEL$HIGH 000000                 getDate@year 0019  
                _INTCONbits 000FF2                    isdigit@c 0011                    scale@scl 003F  
               _tempAddress 00D2                    intlevel2 0000                   sprintf@ap 00AC  
                 sprintf@pb 00AE            __tdiv_to_l_@exp1 001D            __tdiv_to_l_@cntr 001C  
                 sprintf@wh 0096          __end_of_timer0init 243A            __tdiv_to_l_@quot 0018  
          ___lldiv@dividend 000F                    toMonth@m 0014                 _onewireInit 2EC0  
          __UART1Init@BRate 001C          __CFG_WDTPS$1048576 000000            __UART2Init@BRate 001C  
              ?__tdiv_to_l_ 000F          __UART1Send@message 000F     __end_of_onewireReadByte 2E9C  
                  sprintf@f 0098            ___lldiv@quotient 0017               __I2CSend@data 0010  
    printSingleAddress@F214 0049         __I2CAddress@address 0012                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5                 getTime@hour 0013                 __I2CAddress 2F92  
  __end_of_onewireWriteByte 2E04         __CFG_BORPWR$ZPBORMV 000000     __end_of_onewireWriteBit 2D70  
               __I2CReceive 2DA6  
