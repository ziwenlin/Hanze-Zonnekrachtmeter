

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Jun 07 11:19:30 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           	psect	idataCOMRAM
    73  002FDA                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for _dow
    77  002FDA  01                 	db	1
    78                           
    79                           	psect	idataBANK0
    80  002FCA                     __pidataBANK0:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _year1
    84  002FCA  07D0               	dw	2000
    85                           
    86                           ;initializer for _start
    87  002FCC  01                 	db	1
    88                           
    89                           ;initializer for _tempAddress
    90  002FCD  28                 	db	40
    91  002FCE  53                 	db	83
    92  002FCF  44                 	db	68
    93  002FD0  A3                 	db	163
    94  002FD1  08                 	db	8
    95  002FD2  00                 	db	0
    96  002FD3  00                 	db	0
    97  002FD4  9B                 	db	155
    98                           
    99                           ;initializer for _day
   100  002FD5  01                 	db	1
   101                           
   102                           ;initializer for _month
   103  002FD6  01                 	db	1
   104                           
   105                           ;initializer for _year
   106  002FD7  14                 	db	20
   107                           
   108                           	psect	mediumconst
   109  007ECC                     __pmediumconst:
   110                           	opt stack 0
   111  007ECC  00                 	db	0
   112  007ECD                     _dpowers:
   113                           	opt stack 0
   114  007ECD  0001               	dw	1
   115  007ECF  0000               	dw	0
   116  007ED1  000A               	dw	10
   117  007ED3  0000               	dw	0
   118  007ED5  0064               	dw	100
   119  007ED7  0000               	dw	0
   120  007ED9  03E8               	dw	1000
   121  007EDB  0000               	dw	0
   122  007EDD  2710               	dw	10000
   123  007EDF  0000               	dw	0
   124  007EE1  86A0               	dw	34464
   125  007EE3  0001               	dw	1
   126  007EE5  4240               	dw	16960
   127  007EE7  000F               	dw	15
   128  007EE9  9680               	dw	38528
   129  007EEB  0098               	dw	152
   130  007EED  E100               	dw	57600
   131  007EEF  05F5               	dw	1525
   132  007EF1  CA00               	dw	51712
   133  007EF3  3B9A               	dw	15258
   134  007EF5                     __end_of_dpowers:
   135                           	opt stack 0
   136  007EF5                     __npowers_:
   137                           	opt stack 0
   138  007EF5  00                 	db	0
   139  007EF6  80                 	db	128
   140  007EF7  3F                 	db	63
   141  007EF8  CD                 	db	205
   142  007EF9  CC                 	db	204
   143  007EFA  3D                 	db	61
   144  007EFB  D7                 	db	215
   145  007EFC  23                 	db	35
   146  007EFD  3C                 	db	60
   147  007EFE  12                 	db	18
   148  007EFF  83                 	db	131
   149  007F00  3A                 	db	58
   150  007F01  B7                 	db	183
   151  007F02  D1                 	db	209
   152  007F03  38                 	db	56
   153  007F04  C6                 	db	198
   154  007F05  27                 	db	39
   155  007F06  37                 	db	55
   156  007F07  38                 	db	56
   157  007F08  86                 	db	134
   158  007F09  35                 	db	53
   159  007F0A  C0                 	db	192
   160  007F0B  D6                 	db	214
   161  007F0C  33                 	db	51
   162  007F0D  CC                 	db	204
   163  007F0E  2B                 	db	43
   164  007F0F  32                 	db	50
   165  007F10  70                 	db	112
   166  007F11  89                 	db	137
   167  007F12  30                 	db	48
   168  007F13  E7                 	db	231
   169  007F14  DB                 	db	219
   170  007F15  2E                 	db	46
   171  007F16  E5                 	db	229
   172  007F17  3C                 	db	60
   173  007F18  1E                 	db	30
   174  007F19  42                 	db	66
   175  007F1A  A2                 	db	162
   176  007F1B  0D                 	db	13
   177  007F1C                     __end_of__npowers_:
   178                           	opt stack 0
   179  007F1C                     __powers_:
   180                           	opt stack 0
   181  007F1C  00                 	db	0
   182  007F1D  80                 	db	128
   183  007F1E  3F                 	db	63
   184  007F1F  00                 	db	0
   185  007F20  20                 	db	32
   186  007F21  41                 	db	65
   187  007F22  00                 	db	0
   188  007F23  C8                 	db	200
   189  007F24  42                 	db	66
   190  007F25  00                 	db	0
   191  007F26  7A                 	db	122
   192  007F27  44                 	db	68
   193  007F28  40                 	db	64
   194  007F29  1C                 	db	28
   195  007F2A  46                 	db	70
   196  007F2B  50                 	db	80
   197  007F2C  C3                 	db	195
   198  007F2D  47                 	db	71
   199  007F2E  24                 	db	36
   200  007F2F  74                 	db	116
   201  007F30  49                 	db	73
   202  007F31  97                 	db	151
   203  007F32  18                 	db	24
   204  007F33  4B                 	db	75
   205  007F34  BC                 	db	188
   206  007F35  BE                 	db	190
   207  007F36  4C                 	db	76
   208  007F37  6B                 	db	107
   209  007F38  6E                 	db	110
   210  007F39  4E                 	db	78
   211  007F3A  03                 	db	3
   212  007F3B  15                 	db	21
   213  007F3C  50                 	db	80
   214  007F3D  79                 	db	121
   215  007F3E  AD                 	db	173
   216  007F3F  60                 	db	96
   217  007F40  F3                 	db	243
   218  007F41  49                 	db	73
   219  007F42  71                 	db	113
   220  007F43                     __end_of__powers_:
   221                           	opt stack 0
   222  007F43                     _hexpowers:
   223                           	opt stack 0
   224  007F43  0001               	dw	1
   225  007F45  0000               	dw	0
   226  007F47  0010               	dw	16
   227  007F49  0000               	dw	0
   228  007F4B  0100               	dw	256
   229  007F4D  0000               	dw	0
   230  007F4F  1000               	dw	4096
   231  007F51  0000               	dw	0
   232  007F53  0000               	dw	0
   233  007F55  0001               	dw	1
   234  007F57  0000               	dw	0
   235  007F59  0010               	dw	16
   236  007F5B  0000               	dw	0
   237  007F5D  0100               	dw	256
   238  007F5F  0000               	dw	0
   239  007F61  1000               	dw	4096
   240  007F63                     __end_of_hexpowers:
   241                           	opt stack 0
   242  0000                     _ADCON0	set	4034
   243  0000                     _ADCON0bits	set	4034
   244  0000                     _ADCON1	set	4033
   245  0000                     _ADCON2	set	4032
   246  0000                     _ADRESH	set	4036
   247  0000                     _ADRESL	set	4035
   248  0000                     _ANCON0bits	set	3933
   249  0000                     _BAUDCON1	set	4007
   250  0000                     _BAUDCON2	set	4025
   251  0000                     _INTCON2bits	set	4081
   252  0000                     _INTCONbits	set	4082
   253  0000                     _IPR1bits	set	3999
   254  0000                     _PIE1bits	set	3997
   255  0000                     _PIE2bits	set	4000
   256  0000                     _PIE3bits	set	4003
   257  0000                     _PIR1bits	set	3998
   258  0000                     _PIR2bits	set	4001
   259  0000                     _PIR3bits	set	4004
   260  0000                     _PORTAbits	set	3968
   261  0000                     _RCONbits	set	4048
   262  0000                     _RCREG1	set	4014
   263  0000                     _RCREG2	set	3962
   264  0000                     _RCSTA1	set	4011
   265  0000                     _RCSTA2	set	4006
   266  0000                     _SPBRG1	set	4015
   267  0000                     _SPBRG2	set	3963
   268  0000                     _SSPADD	set	4040
   269  0000                     _SSPBUF	set	4041
   270  0000                     _SSPCON1bits	set	4038
   271  0000                     _SSPCON2	set	4037
   272  0000                     _SSPCON2bits	set	4037
   273  0000                     _SSPSTAT	set	4039
   274  0000                     _SSPSTATbits	set	4039
   275  0000                     _T0CONbits	set	4053
   276  0000                     _TMR0H	set	4055
   277  0000                     _TMR0L	set	4054
   278  0000                     _TRISAbits	set	3986
   279  0000                     _TRISBbits	set	3987
   280  0000                     _TRISCbits	set	3988
   281  0000                     _TXREG1	set	4013
   282  0000                     _TXREG2	set	3961
   283  0000                     _TXSTA1	set	4012
   284  0000                     _TXSTA1bits	set	4012
   285  0000                     _TXSTA2	set	4026
   286  0000                     _TXSTA2bits	set	4026
   287  007F63                     __stringdata:
   288                           	opt stack 0
   289  007F63                     STR_2:
   290  007F63  25                 	db	37
   291  007F64  30                 	db	48	;'0'
   292  007F65  34                 	db	52	;'4'
   293  007F66  64                 	db	100	;'d'
   294  007F67  2F                 	db	47
   295  007F68  25                 	db	37
   296  007F69  30                 	db	48	;'0'
   297  007F6A  32                 	db	50	;'2'
   298  007F6B  64                 	db	100	;'d'
   299  007F6C  2F                 	db	47
   300  007F6D  25                 	db	37
   301  007F6E  30                 	db	48	;'0'
   302  007F6F  32                 	db	50	;'2'
   303  007F70  64                 	db	100	;'d'
   304  007F71  2D                 	db	45
   305  007F72  25                 	db	37
   306  007F73  30                 	db	48	;'0'
   307  007F74  32                 	db	50	;'2'
   308  007F75  64                 	db	100	;'d'
   309  007F76  3A                 	db	58	;':'
   310  007F77  25                 	db	37
   311  007F78  30                 	db	48	;'0'
   312  007F79  32                 	db	50	;'2'
   313  007F7A  64                 	db	100	;'d'
   314  007F7B  3A                 	db	58	;':'
   315  007F7C  25                 	db	37
   316  007F7D  30                 	db	48	;'0'
   317  007F7E  32                 	db	50	;'2'
   318  007F7F  64                 	db	100	;'d'
   319  007F80  20                 	db	32
   320  007F81  20                 	db	32
   321  007F82  20                 	db	32
   322  007F83  54                 	db	84	;'T'
   323  007F84  65                 	db	101	;'e'
   324  007F85  6D                 	db	109	;'m'
   325  007F86  70                 	db	112	;'p'
   326  007F87  65                 	db	101	;'e'
   327  007F88  72                 	db	114	;'r'
   328  007F89  61                 	db	97	;'a'
   329  007F8A  74                 	db	116	;'t'
   330  007F8B  75                 	db	117	;'u'
   331  007F8C  75                 	db	117	;'u'
   332  007F8D  72                 	db	114	;'r'
   333  007F8E  3A                 	db	58	;':'
   334  007F8F  20                 	db	32
   335  007F90  25                 	db	37
   336  007F91  66                 	db	102	;'f'
   337  007F92  20                 	db	32
   338  007F93  43                 	db	67	;'C'
   339  007F94  20                 	db	32
   340  007F95  20                 	db	32
   341  007F96  20                 	db	32
   342  007F97  56                 	db	86	;'V'
   343  007F98  6F                 	db	111	;'o'
   344  007F99  6C                 	db	108	;'l'
   345  007F9A  74                 	db	116	;'t'
   346  007F9B  61                 	db	97	;'a'
   347  007F9C  67                 	db	103	;'g'
   348  007F9D  65                 	db	101	;'e'
   349  007F9E  3A                 	db	58	;':'
   350  007F9F  20                 	db	32
   351  007FA0  25                 	db	37
   352  007FA1  66                 	db	102	;'f'
   353  007FA2  20                 	db	32
   354  007FA3  56                 	db	86	;'V'
   355  007FA4  0A                 	db	10
   356  007FA5  00                 	db	0
   357  007FA6                     STR_3:
   358  007FA6  25                 	db	37
   359  007FA7  30                 	db	48	;'0'
   360  007FA8  34                 	db	52	;'4'
   361  007FA9  64                 	db	100	;'d'
   362  007FAA  2C                 	db	44
   363  007FAB  25                 	db	37
   364  007FAC  30                 	db	48	;'0'
   365  007FAD  32                 	db	50	;'2'
   366  007FAE  64                 	db	100	;'d'
   367  007FAF  2C                 	db	44
   368  007FB0  25                 	db	37
   369  007FB1  30                 	db	48	;'0'
   370  007FB2  32                 	db	50	;'2'
   371  007FB3  64                 	db	100	;'d'
   372  007FB4  2C                 	db	44
   373  007FB5  25                 	db	37
   374  007FB6  30                 	db	48	;'0'
   375  007FB7  32                 	db	50	;'2'
   376  007FB8  64                 	db	100	;'d'
   377  007FB9  2C                 	db	44
   378  007FBA  25                 	db	37
   379  007FBB  30                 	db	48	;'0'
   380  007FBC  32                 	db	50	;'2'
   381  007FBD  64                 	db	100	;'d'
   382  007FBE  2C                 	db	44
   383  007FBF  25                 	db	37
   384  007FC0  30                 	db	48	;'0'
   385  007FC1  32                 	db	50	;'2'
   386  007FC2  64                 	db	100	;'d'
   387  007FC3  2C                 	db	44
   388  007FC4  25                 	db	37
   389  007FC5  66                 	db	102	;'f'
   390  007FC6  2C                 	db	44
   391  007FC7  25                 	db	37
   392  007FC8  66                 	db	102	;'f'
   393  007FC9  0A                 	db	10
   394  007FCA  00                 	db	0
   395  007FCB                     STR_6:
   396  007FCB  30                 	db	48	;'0'
   397  007FCC  31                 	db	49	;'1'
   398  007FCD  32                 	db	50	;'2'
   399  007FCE  33                 	db	51	;'3'
   400  007FCF  34                 	db	52	;'4'
   401  007FD0  35                 	db	53	;'5'
   402  007FD1  36                 	db	54	;'6'
   403  007FD2  37                 	db	55	;'7'
   404  007FD3  38                 	db	56	;'8'
   405  007FD4  39                 	db	57	;'9'
   406  007FD5  61                 	db	97	;'a'
   407  007FD6  62                 	db	98	;'b'
   408  007FD7  63                 	db	99	;'c'
   409  007FD8  64                 	db	100	;'d'
   410  007FD9  65                 	db	101	;'e'
   411  007FDA  66                 	db	102	;'f'
   412  007FDB  00                 	db	0
   413  007FDC                     STR_1:
   414  007FDC  61                 	db	97	;'a'
   415  007FDD  70                 	db	112	;'p'
   416  007FDE  70                 	db	112	;'p'
   417  007FDF  65                 	db	101	;'e'
   418  007FE0  6E                 	db	110	;'n'
   419  007FE1  64                 	db	100	;'d'
   420  007FE2  20                 	db	32
   421  007FE3  66                 	db	102	;'f'
   422  007FE4  69                 	db	105	;'i'
   423  007FE5  6C                 	db	108	;'l'
   424  007FE6  65                 	db	101	;'e'
   425  007FE7  2E                 	db	46
   426  007FE8  63                 	db	99	;'c'
   427  007FE9  73                 	db	115	;'s'
   428  007FEA  76                 	db	118	;'v'
   429  007FEB  0A                 	db	10
   430  007FEC  00                 	db	0
   431  007FED  63                 	db	99	;'c'
   432  007FEE  72                 	db	114	;'r'
   433  007FEF  63                 	db	99	;'c'
   434  007FF0  20                 	db	32
   435  007FF1  3D                 	db	61	;'='
   436  007FF2  20                 	db	32
   437  007FF3  25                 	db	37
   438  007FF4  78                 	db	120	;'x'
   439  007FF5  20                 	db	32
   440  007FF6  0D                 	db	13
   441  007FF7  0A                 	db	10
   442  007FF8  00                 	db	0
   443  007FF9  30                 	db	48	;'0'
   444  007FFA  78                 	db	120	;'x'
   445  007FFB  25                 	db	37
   446  007FFC  78                 	db	120	;'x'
   447  007FFD  2C                 	db	44
   448  007FFE  00                 	db	0
   449  007FFF                     __end_of__stringdata:
   450                           	opt stack 0
   451                           
   452                           ; #config settings
   453  007FFF  00                 	db	0	; dummy byte at the end
   454  0000                     
   455                           	psect	cinit
   456  002AE8                     __pcinit:
   457                           	opt stack 0
   458  002AE8                     start_initialization:
   459                           	opt stack 0
   460  002AE8                     __initialization:
   461                           	opt stack 0
   462                           
   463                           ; Clear objects allocated to BANK1 (80 bytes)
   464  002AE8  EE01  F000         	lfsr	0,__pbssBANK1
   465  002AEC  0E50               	movlw	80
   466  002AEE                     clear_0:
   467  002AEE  6AEE               	clrf	postinc0,c
   468  002AF0  06E8               	decf	wreg,f,c
   469  002AF2  E1FD               	bnz	clear_0
   470                           
   471                           ; Clear objects allocated to BANK0 (29 bytes)
   472  002AF4  EE00  F0B2         	lfsr	0,__pbssBANK0
   473  002AF8  0E1D               	movlw	29
   474  002AFA                     clear_1:
   475  002AFA  6AEE               	clrf	postinc0,c
   476  002AFC  06E8               	decf	wreg,f,c
   477  002AFE  E1FD               	bnz	clear_1
   478                           
   479                           ; Clear objects allocated to COMRAM (8 bytes)
   480  002B00  EE00  F049         	lfsr	0,__pbssCOMRAM
   481  002B04  0E08               	movlw	8
   482  002B06                     clear_2:
   483  002B06  6AEE               	clrf	postinc0,c
   484  002B08  06E8               	decf	wreg,f,c
   485  002B0A  E1FD               	bnz	clear_2
   486                           
   487                           ; Initialize objects allocated to BANK0 (14 bytes)
   488                           ; load TBLPTR registers with __pidataBANK0
   489  002B0C  0ECA               	movlw	low __pidataBANK0
   490  002B0E  6EF6               	movwf	tblptrl,c
   491  002B10  0E2F               	movlw	high __pidataBANK0
   492  002B12  6EF7               	movwf	tblptrh,c
   493  002B14  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   494  002B16  6EF8               	movwf	tblptru,c
   495  002B18  EE00  F0CF         	lfsr	0,__pdataBANK0
   496  002B1C  EE10 F00E          	lfsr	1,14
   497  002B20                     copy_data0:
   498  002B20  0009               	tblrd		*+
   499  002B22  CFF5 FFEE          	movff	tablat,postinc0
   500  002B26  50E5               	movf	postdec1,w,c
   501  002B28  50E1               	movf	fsr1l,w,c
   502  002B2A  E1FA               	bnz	copy_data0
   503                           
   504                           ; Initialize objects allocated to COMRAM (1 bytes)
   505                           ; load TBLPTR registers with __pidataCOMRAM
   506  002B2C  0EDA               	movlw	low __pidataCOMRAM
   507  002B2E  6EF6               	movwf	tblptrl,c
   508  002B30  0E2F               	movlw	high __pidataCOMRAM
   509  002B32  6EF7               	movwf	tblptrh,c
   510  002B34  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   511  002B36  6EF8               	movwf	tblptru,c
   512  002B38  0009               	tblrd		*+	;fetch initializer
   513  002B3A  CFF5 F051          	movff	tablat,__pdataCOMRAM
   514  002B3E                     end_of_initialization:
   515                           	opt stack 0
   516  002B3E                     __end_of__initialization:
   517                           	opt stack 0
   518  002B3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   519  002B40  6EF8               	movwf	tblptru,c
   520  002B42  0100               	movlb	0
   521  002B44  EFA3  F017         	goto	_main	;jump to C main() function
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	bssCOMRAM
   532  000049                     __pbssCOMRAM:
   533                           	opt stack 0
   534  000049                     printSingleAddress@F214:
   535                           	opt stack 0
   536  000049                     	ds	8
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	dataCOMRAM
   547  000051                     __pdataCOMRAM:
   548                           	opt stack 0
   549  000051                     _dow:
   550                           	opt stack 0
   551  000051                     	ds	1
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           
   561                           	psect	bssBANK0
   562  0000B2                     __pbssBANK0:
   563                           	opt stack 0
   564  0000B2                     getTemperature@F206:
   565                           	opt stack 0
   566  0000B2                     	ds	9
   567  0000BB                     getTemperatureInt@F211:
   568                           	opt stack 0
   569  0000BB                     	ds	9
   570  0000C4                     _temp:
   571                           	opt stack 0
   572  0000C4                     	ds	3
   573  0000C7                     _adc:
   574                           	opt stack 0
   575  0000C7                     	ds	3
   576  0000CA                     _timer0:
   577                           	opt stack 0
   578  0000CA                     	ds	2
   579  0000CC                     _hour:
   580                           	opt stack 0
   581  0000CC                     	ds	1
   582  0000CD                     _minute:
   583                           	opt stack 0
   584  0000CD                     	ds	1
   585  0000CE                     _second:
   586                           	opt stack 0
   587  0000CE                     	ds	1
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597                           	psect	dataBANK0
   598  0000CF                     __pdataBANK0:
   599                           	opt stack 0
   600  0000CF                     _year1:
   601                           	opt stack 0
   602  0000CF                     	ds	2
   603  0000D1                     _start:
   604                           	opt stack 0
   605  0000D1                     	ds	1
   606  0000D2                     _tempAddress:
   607                           	opt stack 0
   608  0000D2                     	ds	8
   609  0000DA                     _day:
   610                           	opt stack 0
   611  0000DA                     	ds	1
   612  0000DB                     _month:
   613                           	opt stack 0
   614  0000DB                     	ds	1
   615  0000DC                     _year:
   616                           	opt stack 0
   617  0000DC                     	ds	1
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _message:
   631                           	opt stack 0
   632  000100                     	ds	80
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1l	equ	0xFE1
   641                           
   642                           	psect	cstackBANK0
   643  000060                     __pcstackBANK0:
   644                           	opt stack 0
   645  000060                     ___fttol@sign1:
   646                           	opt stack 0
   647  000060                     getTemperature@scratchPad:
   648                           	opt stack 0
   649                           
   650                           ; 9 bytes @ 0x0
   651  000060                     	ds	1
   652  000061                     ___fttol@lval:
   653                           	opt stack 0
   654                           
   655                           ; 4 bytes @ 0x1
   656  000061                     	ds	4
   657  000065                     ___fttol@exp1:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x5
   661  000065                     	ds	1
   662  000066                     ?__doprnt:
   663                           	opt stack 0
   664  000066                     timer0init@timer0:
   665                           	opt stack 0
   666  000066                     __doprnt@pb:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x6
   670  000066                     	ds	2
   671  000068                     __doprnt@f:
   672                           	opt stack 0
   673  000068                     timer0init@seconds:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x8
   677  000068                     	ds	1
   678  000069                     getTemperature@temperature:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x9
   682  000069                     	ds	1
   683  00006A                     __doprnt@ap:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0xA
   687  00006A                     	ds	1
   688  00006B                     ??_timer0init:
   689                           
   690                           ; 0 bytes @ 0xB
   691  00006B                     	ds	1
   692  00006C                     ??__doprnt:
   693  00006C                     getTemperature@i:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0xC
   697  00006C                     	ds	3
   698  00006F                     _timer0init$2563:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0xF
   702  00006F                     	ds	3
   703  000072                     __doprnt$2567:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x12
   707  000072                     	ds	3
   708  000075                     __doprnt$1972:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x15
   712  000075                     	ds	4
   713  000079                     __doprnt@idx:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x19
   717  000079                     	ds	1
   718  00007A                     __doprnt@vd:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x1A
   722  00007A                     	ds	4
   723  00007E                     __doprnt@vd_1974:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x1E
   727  00007E                     	ds	4
   728  000082                     __doprnt@integ:
   729                           	opt stack 0
   730                           
   731                           ; 3 bytes @ 0x22
   732  000082                     	ds	3
   733  000085                     __doprnt@prec:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x25
   737  000085                     	ds	2
   738  000087                     __doprnt@width:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x27
   742  000087                     	ds	2
   743  000089                     __doprnt@exp:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x29
   747  000089                     	ds	2
   748  00008B                     __doprnt@_val:
   749                           	opt stack 0
   750                           
   751                           ; 5 bytes @ 0x2B
   752  00008B                     	ds	5
   753  000090                     __doprnt@flag:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x30
   757  000090                     	ds	2
   758  000092                     __doprnt@fval:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x32
   762  000092                     	ds	3
   763  000095                     __doprnt@c:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x35
   767  000095                     	ds	1
   768  000096                     ?_sprintf:
   769                           	opt stack 0
   770  000096                     sprintf@wh:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x36
   774  000096                     	ds	2
   775  000098                     sprintf@f:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x38
   779  000098                     	ds	20
   780  0000AC                     sprintf@ap:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x4C
   784  0000AC                     	ds	2
   785  0000AE                     sprintf@pb:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x4E
   789  0000AE                     	ds	4
   790                           tblptru	equ	0xFF8
   791                           tblptrh	equ	0xFF7
   792                           tblptrl	equ	0xFF6
   793                           tablat	equ	0xFF5
   794                           postinc0	equ	0xFEE
   795                           wreg	equ	0xFE8
   796                           postdec1	equ	0xFE5
   797                           fsr1l	equ	0xFE1
   798                           
   799                           	psect	cstackCOMRAM
   800  000001                     __pcstackCOMRAM:
   801                           	opt stack 0
   802  000001                     ??_isr:
   803  000001                     
   804                           ; 1 bytes @ 0x0
   805  000001                     	ds	14
   806  00000F                     ??_isdigit:
   807  00000F                     ??__I2CWait:
   808  00000F                     ?___awmod:
   809                           	opt stack 0
   810  00000F                     ?___ftpack:
   811                           	opt stack 0
   812  00000F                     ?___ftneg:
   813                           	opt stack 0
   814  00000F                     ?__tdiv_to_l_:
   815                           	opt stack 0
   816  00000F                     ?__div_to_l_:
   817                           	opt stack 0
   818  00000F                     ?___lldiv:
   819                           	opt stack 0
   820  00000F                     onewireReadBit@result:
   821                           	opt stack 0
   822  00000F                     toHour@hour:
   823                           	opt stack 0
   824  00000F                     toMonth@month:
   825                           	opt stack 0
   826  00000F                     bcdtodec@dec:
   827                           	opt stack 0
   828  00000F                     __UART1Send@message:
   829                           	opt stack 0
   830  00000F                     __UART2Send@message:
   831                           	opt stack 0
   832  00000F                     onewireWriteBit@b:
   833                           	opt stack 0
   834  00000F                     ___awmod@dividend:
   835                           	opt stack 0
   836  00000F                     __div_to_l_@f1:
   837                           	opt stack 0
   838  00000F                     ___ftpack@arg:
   839                           	opt stack 0
   840  00000F                     __tdiv_to_l_@f1:
   841                           	opt stack 0
   842  00000F                     ___ftge@ff1:
   843                           	opt stack 0
   844  00000F                     ___ftneg@f1:
   845                           	opt stack 0
   846  00000F                     ___lldiv@dividend:
   847                           	opt stack 0
   848                           
   849                           ; 4 bytes @ 0xE
   850  00000F                     	ds	1
   851  000010                     __I2CSend@data:
   852                           	opt stack 0
   853  000010                     onewireReadByte@result:
   854                           	opt stack 0
   855  000010                     _isdigit$2257:
   856                           	opt stack 0
   857  000010                     __I2CReceive@data:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0xF
   861  000010                     	ds	1
   862  000011                     ??_bcdtodec:
   863  000011                     ??_toHour:
   864  000011                     ??_onewireWriteByte:
   865  000011                     __I2CAddress@readnwrite:
   866                           	opt stack 0
   867  000011                     onewireReadByte@loop:
   868                           	opt stack 0
   869  000011                     isdigit@c:
   870                           	opt stack 0
   871  000011                     toMonth@year:
   872                           	opt stack 0
   873  000011                     __UART1Send@i:
   874                           	opt stack 0
   875  000011                     __UART2Send@i:
   876                           	opt stack 0
   877  000011                     ___awmod@divisor:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x10
   881  000011                     	ds	1
   882  000012                     toHour@h:
   883                           	opt stack 0
   884  000012                     bcdtodec@bcd:
   885                           	opt stack 0
   886  000012                     __I2CAddress@address:
   887                           	opt stack 0
   888  000012                     __I2CReceive@ack:
   889                           	opt stack 0
   890  000012                     onewireWriteByte@data:
   891                           	opt stack 0
   892  000012                     ___ftpack@exp:
   893                           	opt stack 0
   894  000012                     __div_to_l_@f2:
   895                           	opt stack 0
   896  000012                     __tdiv_to_l_@f2:
   897                           	opt stack 0
   898  000012                     ___ftge@ff2:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x11
   902  000012                     	ds	1
   903  000013                     ??_toMonth:
   904  000013                     onewireWriteByte@loop:
   905                           	opt stack 0
   906  000013                     ___awmod@counter:
   907                           	opt stack 0
   908  000013                     ___ftpack@sign:
   909                           	opt stack 0
   910  000013                     getTime@hour:
   911                           	opt stack 0
   912  000013                     ___lldiv@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x12
   916  000013                     	ds	1
   917  000014                     ??___ftpack:
   918  000014                     toMonth@m:
   919                           	opt stack 0
   920  000014                     ___awmod@sign:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x13
   924  000014                     	ds	1
   925  000015                     ??__tdiv_to_l_:
   926  000015                     ??__div_to_l_:
   927  000015                     ??___ftge:
   928  000015                     ?___awdiv:
   929                           	opt stack 0
   930  000015                     getTime@minute:
   931                           	opt stack 0
   932  000015                     getDate@day:
   933                           	opt stack 0
   934  000015                     ___awdiv@dividend:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x14
   938  000015                     	ds	2
   939  000017                     ?___ftadd:
   940                           	opt stack 0
   941  000017                     ?___awtoft:
   942                           	opt stack 0
   943  000017                     ?___lltoft:
   944                           	opt stack 0
   945  000017                     getTime@second:
   946                           	opt stack 0
   947  000017                     getDate@month:
   948                           	opt stack 0
   949  000017                     ___awdiv@divisor:
   950                           	opt stack 0
   951  000017                     ___awtoft@c:
   952                           	opt stack 0
   953  000017                     ___ftadd@f1:
   954                           	opt stack 0
   955  000017                     ___lldiv@quotient:
   956                           	opt stack 0
   957  000017                     ___lltoft@c:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x16
   961  000017                     	ds	1
   962  000018                     __tdiv_to_l_@quot:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x17
   966  000018                     	ds	1
   967  000019                     ___awdiv@counter:
   968                           	opt stack 0
   969  000019                     getDate@year:
   970                           	opt stack 0
   971  000019                     __div_to_l_@quot:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x18
   975  000019                     	ds	1
   976  00001A                     ___awdiv@sign:
   977                           	opt stack 0
   978  00001A                     ___awtoft@sign:
   979                           	opt stack 0
   980  00001A                     ___ftadd@f2:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x19
   984  00001A                     	ds	1
   985  00001B                     ??___lltoft:
   986  00001B                     ?___ftdiv:
   987                           	opt stack 0
   988  00001B                     ___lldiv@counter:
   989                           	opt stack 0
   990  00001B                     ___awdiv@quotient:
   991                           	opt stack 0
   992  00001B                     ___ftdiv@f1:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x1A
   996  00001B                     	ds	1
   997  00001C                     ?___llmod:
   998                           	opt stack 0
   999  00001C                     __tdiv_to_l_@cntr:
  1000                           	opt stack 0
  1001  00001C                     __I2CInit@BRate:
  1002                           	opt stack 0
  1003  00001C                     __UART1Init@BRate:
  1004                           	opt stack 0
  1005  00001C                     __UART2Init@BRate:
  1006                           	opt stack 0
  1007  00001C                     ___llmod@dividend:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x1B
  1011  00001C                     	ds	1
  1012  00001D                     ??___ftadd:
  1013  00001D                     ?___wmul:
  1014                           	opt stack 0
  1015  00001D                     __div_to_l_@cntr:
  1016                           	opt stack 0
  1017  00001D                     __tdiv_to_l_@exp1:
  1018                           	opt stack 0
  1019  00001D                     ___wmul@multiplier:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x1C
  1023  00001D                     	ds	1
  1024  00001E                     __div_to_l_@exp1:
  1025                           	opt stack 0
  1026  00001E                     ___ftdiv@f2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x1D
  1030  00001E                     	ds	1
  1031  00001F                     ___lltoft@exp:
  1032                           	opt stack 0
  1033  00001F                     ___wmul@multiplicand:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x1E
  1037  00001F                     	ds	1
  1038  000020                     ??__UART1Init:
  1039  000020                     ??__UART2Init:
  1040  000020                     ??__I2CInit:
  1041  000020                     ___ftadd@sign:
  1042                           	opt stack 0
  1043  000020                     ___llmod@divisor:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x1F
  1047  000020                     	ds	1
  1048  000021                     ??___ftdiv:
  1049  000021                     ___ftadd@exp2:
  1050                           	opt stack 0
  1051  000021                     ___wmul@product:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x20
  1055  000021                     	ds	1
  1056  000022                     ___ftadd@exp1:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x21
  1060  000022                     	ds	1
  1061  000023                     ?___ftsub:
  1062                           	opt stack 0
  1063  000023                     ___ftsub@f1:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x22
  1067  000023                     	ds	1
  1068  000024                     ___ftdiv@cntr:
  1069                           	opt stack 0
  1070  000024                     ___llmod@counter:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x23
  1074  000024                     	ds	1
  1075  000025                     ___ftdiv@f3:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x24
  1079  000025                     	ds	1
  1080  000026                     ___ftsub@f2:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x25
  1084  000026                     	ds	2
  1085  000028                     ___ftdiv@exp:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x27
  1089  000028                     	ds	1
  1090  000029                     ___ftdiv@sign:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x28
  1094  000029                     	ds	1
  1095  00002A                     ?___ftmul:
  1096                           	opt stack 0
  1097  00002A                     ___ftmul@f1:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x29
  1101  00002A                     	ds	3
  1102  00002D                     ___ftmul@f2:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0x2C
  1106  00002D                     	ds	3
  1107  000030                     ??___ftmul:
  1108                           
  1109                           ; 0 bytes @ 0x2F
  1110  000030                     	ds	3
  1111  000033                     ___ftmul@exp:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x32
  1115  000033                     	ds	1
  1116  000034                     ___ftmul@f3_as_product:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x33
  1120  000034                     	ds	3
  1121  000037                     ___ftmul@cntr:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x36
  1125  000037                     	ds	1
  1126  000038                     ___ftmul@sign:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x37
  1130  000038                     	ds	1
  1131  000039                     ?_getTemperature:
  1132                           	opt stack 0
  1133  000039                     ?_fround:
  1134                           	opt stack 0
  1135  000039                     ?_scale:
  1136                           	opt stack 0
  1137  000039                     getTemperature@address:
  1138                           	opt stack 0
  1139  000039                     getADC9@zonnekracht:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x38
  1143  000039                     	ds	2
  1144  00003B                     ??_getADC9:
  1145                           
  1146                           ; 0 bytes @ 0x3A
  1147  00003B                     	ds	1
  1148  00003C                     ??_getTemperature:
  1149  00003C                     _fround$2565:
  1150                           	opt stack 0
  1151  00003C                     _scale$2566:
  1152                           	opt stack 0
  1153                           
  1154                           ; 3 bytes @ 0x3B
  1155  00003C                     	ds	1
  1156  00003D                     getADC9@adc:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x3C
  1160  00003D                     	ds	2
  1161  00003F                     scale@scl:
  1162                           	opt stack 0
  1163  00003F                     _fround$2564:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x3E
  1167  00003F                     	ds	1
  1168  000040                     ?___fttol:
  1169                           	opt stack 0
  1170  000040                     ___fttol@f1:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0x3F
  1174  000040                     	ds	2
  1175  000042                     fround@prec:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x41
  1179  000042                     	ds	2
  1180  000044                     ??___fttol:
  1181                           
  1182                           ; 0 bytes @ 0x43
  1183  000044                     	ds	5
  1184  000049                     tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           postdec1	equ	0xFE5
  1191                           fsr1l	equ	0xFE1
  1192                           
  1193                           ; 0 bytes @ 0x48
  1194 ;;
  1195 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1196 ;;
  1197 ;; *************** function _main *****************
  1198 ;; Defined at:
  1199 ;;		line 38 in file "src/main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;		None
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;		None
  1204 ;; Return value:  Size  Location     Type
  1205 ;;		None               void
  1206 ;; Registers used:
  1207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1217 ;;Total ram usage:        0 bytes
  1218 ;; Hardware stack levels required when called:    7
  1219 ;; This function calls:
  1220 ;;		_loop
  1221 ;;		_setup
  1222 ;; This function is called by:
  1223 ;;		Startup code after reset
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text0
  1228  002F46                     __ptext0:
  1229                           	opt stack 0
  1230  002F46                     _main:
  1231                           	opt stack 24
  1232                           
  1233                           ;main.c: 39: setup();
  1234                           
  1235                           ;incstack = 0
  1236  002F46  ECC7  F012         	call	_setup	;wreg free
  1237  002F4A                     l5179:
  1238                           
  1239                           ;main.c: 41: loop();
  1240  002F4A  ECB9  F00D         	call	_loop	;wreg free
  1241                           
  1242                           ;main.c: 42: start = 0;
  1243  002F4E  0E00               	movlw	0
  1244  002F50  0100               	movlb	0	; () banked
  1245  002F52  6FD1               	movwf	_start& (0+255),b
  1246  002F54                     l5183:
  1247                           
  1248                           ; BSR set to: 0
  1249  002F54  0100               	movlb	0	; () banked
  1250  002F56  51D1               	movf	_start& (0+255),w,b
  1251  002F58  A4D8               	btfss	status,2,c
  1252  002F5A  D7F7               	goto	l5179
  1253  002F5C  D7FB               	goto	l5183
  1254  002F5E                     __end_of_main:
  1255                           	opt stack 0
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           status	equ	0xFD8
  1265                           
  1266 ;; *************** function _setup *****************
  1267 ;; Defined at:
  1268 ;;		line 47 in file "src/main.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;		None               void
  1275 ;; Registers used:
  1276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    6
  1289 ;; This function calls:
  1290 ;;		__I2CInit
  1291 ;;		__UART1Init
  1292 ;;		__UART2Init
  1293 ;;		__UART2Send
  1294 ;;		_sprintf
  1295 ;;		_timer0init
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text1
  1302  00258E                     __ptext1:
  1303                           	opt stack 0
  1304  00258E                     _setup:
  1305                           	opt stack 24
  1306                           
  1307                           ;main.c: 48: _UART1Init(9600);
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;incstack = 0
  1311  00258E  0E80               	movlw	128
  1312  002590  6E1C               	movwf	__UART1Init@BRate,c
  1313  002592  0E25               	movlw	37
  1314  002594  6E1D               	movwf	__UART1Init@BRate+1,c
  1315  002596  0E00               	movlw	0
  1316  002598  6E1E               	movwf	__UART1Init@BRate+2,c
  1317  00259A  0E00               	movlw	0
  1318  00259C  6E1F               	movwf	__UART1Init@BRate+3,c
  1319  00259E  EC42  F015         	call	__UART1Init	;wreg free
  1320                           
  1321                           ;main.c: 49: _UART2Init(9600);
  1322  0025A2  0E80               	movlw	128
  1323  0025A4  6E1C               	movwf	__UART2Init@BRate,c
  1324  0025A6  0E25               	movlw	37
  1325  0025A8  6E1D               	movwf	__UART2Init@BRate+1,c
  1326  0025AA  0E00               	movlw	0
  1327  0025AC  6E1E               	movwf	__UART2Init@BRate+2,c
  1328  0025AE  0E00               	movlw	0
  1329  0025B0  6E1F               	movwf	__UART2Init@BRate+3,c
  1330  0025B2  EC10  F015         	call	__UART2Init	;wreg free
  1331                           
  1332                           ;main.c: 50: _I2CInit(100000);
  1333  0025B6  0EA0               	movlw	160
  1334  0025B8  6E1C               	movwf	__I2CInit@BRate,c
  1335  0025BA  0E86               	movlw	134
  1336  0025BC  6E1D               	movwf	__I2CInit@BRate+1,c
  1337  0025BE  0E01               	movlw	1
  1338  0025C0  6E1E               	movwf	__I2CInit@BRate+2,c
  1339  0025C2  0E00               	movlw	0
  1340  0025C4  6E1F               	movwf	__I2CInit@BRate+3,c
  1341  0025C6  EC00  F016         	call	__I2CInit	;wreg free
  1342                           
  1343                           ;main.c: 51: timer0init(&timer0, 1);
  1344  0025CA  0100               	movlb	0	; () banked
  1345  0025CC  0E00               	movlw	high _timer0
  1346  0025CE  0100               	movlb	0	; () banked
  1347  0025D0  6F67               	movwf	(timer0init@timer0+1)& (0+255),b
  1348  0025D2  0100               	movlb	0	; () banked
  1349  0025D4  0ECA               	movlw	low _timer0
  1350  0025D6  0100               	movlb	0	; () banked
  1351  0025D8  6F66               	movwf	timer0init@timer0& (0+255),b
  1352  0025DA  0E00               	movlw	0
  1353  0025DC  0100               	movlb	0	; () banked
  1354  0025DE  6F68               	movwf	timer0init@seconds& (0+255),b
  1355  0025E0  0E80               	movlw	128
  1356  0025E2  0100               	movlb	0	; () banked
  1357  0025E4  6F69               	movwf	(timer0init@seconds+1)& (0+255),b
  1358  0025E6  0E3F               	movlw	63
  1359  0025E8  0100               	movlb	0	; () banked
  1360  0025EA  6F6A               	movwf	(timer0init@seconds+2)& (0+255),b
  1361  0025EC  ECC5  F011         	call	_timer0init	;wreg free
  1362                           
  1363                           ;main.c: 52: ANCON0bits.ANSEL1 = 0;
  1364  0025F0  010F               	movlb	15	; () banked
  1365  0025F2  935D               	bcf	93,1,b	;volatile
  1366                           
  1367                           ; BSR set to: 15
  1368                           ;main.c: 53: (INTCONbits.GIE = 1);
  1369  0025F4  8EF2               	bsf	intcon,7,c	;volatile
  1370                           
  1371                           ; BSR set to: 15
  1372                           ;main.c: 54: sprintf(&message, "append file.csv\n");
  1373  0025F6  0101               	movlb	1	; () banked
  1374  0025F8  0E01               	movlw	high _message
  1375  0025FA  0100               	movlb	0	; () banked
  1376  0025FC  6F97               	movwf	(sprintf@wh+1)& (0+255),b
  1377  0025FE  0101               	movlb	1	; () banked
  1378  002600  0E00               	movlw	low _message
  1379  002602  0100               	movlb	0	; () banked
  1380  002604  6F96               	movwf	sprintf@wh& (0+255),b
  1381  002606  0E7F               	movlw	high STR_1
  1382  002608  0100               	movlb	0	; () banked
  1383  00260A  6F99               	movwf	(sprintf@f+1)& (0+255),b
  1384  00260C  0EDC               	movlw	low STR_1
  1385  00260E  0100               	movlb	0	; () banked
  1386  002610  6F98               	movwf	sprintf@f& (0+255),b
  1387  002612  ECAA  F014         	call	_sprintf	;wreg free
  1388                           
  1389                           ;main.c: 55: _UART2Send(&message);
  1390  002616  0101               	movlb	1	; () banked
  1391  002618  0E01               	movlw	high _message
  1392  00261A  6E10               	movwf	__UART2Send@message+1,c
  1393  00261C  0101               	movlb	1	; () banked
  1394  00261E  0E00               	movlw	low _message
  1395  002620  6E0F               	movwf	__UART2Send@message,c
  1396  002622  EC71  F016         	call	__UART2Send	;wreg free
  1397  002626  0012               	return	
  1398  002628                     __end_of_setup:
  1399                           	opt stack 0
  1400                           tblptru	equ	0xFF8
  1401                           tblptrh	equ	0xFF7
  1402                           tblptrl	equ	0xFF6
  1403                           tablat	equ	0xFF5
  1404                           intcon	equ	0xFF2
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           postdec1	equ	0xFE5
  1408                           fsr1l	equ	0xFE1
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function _timer0init *****************
  1412 ;; Defined at:
  1413 ;;		line 3 in file "src/timers.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  timer0          2    6[BANK0 ] PTR struct .
  1416 ;;		 -> timer0(2), 
  1417 ;;  seconds         3    8[BANK0 ] float 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;		None
  1420 ;; Return value:  Size  Location     Type
  1421 ;;		None               void
  1422 ;; Registers used:
  1423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1429 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;Total ram usage:       12 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    3
  1436 ;; This function calls:
  1437 ;;		___ftadd
  1438 ;;		___ftmul
  1439 ;;		___ftneg
  1440 ;;		___fttol
  1441 ;; This function is called by:
  1442 ;;		_setup
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           	psect	text2
  1447  00238A                     __ptext2:
  1448                           	opt stack 0
  1449  00238A                     _timer0init:
  1450                           	opt stack 26
  1451                           
  1452                           ;timers.c: 4: timer0->ab = (uint16_t)((0x0BDC) + (0xF424/8.0*(8.0-seconds)));
  1453                           
  1454                           ;incstack = 0
  1455  00238A  0E24               	movlw	36
  1456  00238C  6E2D               	movwf	___ftmul@f2,c
  1457  00238E  0EF4               	movlw	244
  1458  002390  6E2E               	movwf	___ftmul@f2+1,c
  1459  002392  0E45               	movlw	69
  1460  002394  6E2F               	movwf	___ftmul@f2+2,c
  1461  002396  0E00               	movlw	0
  1462  002398  6E1A               	movwf	___ftadd@f2,c
  1463  00239A  0E00               	movlw	0
  1464  00239C  6E1B               	movwf	___ftadd@f2+1,c
  1465  00239E  0E41               	movlw	65
  1466  0023A0  6E1C               	movwf	___ftadd@f2+2,c
  1467  0023A2  C068  F00F         	movff	timer0init@seconds,___ftneg@f1
  1468  0023A6  C069  F010         	movff	timer0init@seconds+1,___ftneg@f1+1
  1469  0023AA  C06A  F011         	movff	timer0init@seconds+2,___ftneg@f1+2
  1470  0023AE  EC3D  F017         	call	___ftneg	;wreg free
  1471  0023B2  C00F  F017         	movff	?___ftneg,___ftadd@f1
  1472  0023B6  C010  F018         	movff	?___ftneg+1,___ftadd@f1+1
  1473  0023BA  C011  F019         	movff	?___ftneg+2,___ftadd@f1+2
  1474  0023BE  ECE3  F00C         	call	___ftadd	;wreg free
  1475  0023C2  C017  F02A         	movff	?___ftadd,___ftmul@f1
  1476  0023C6  C018  F02B         	movff	?___ftadd+1,___ftmul@f1+1
  1477  0023CA  C019  F02C         	movff	?___ftadd+2,___ftmul@f1+2
  1478  0023CE  EC72  F010         	call	___ftmul	;wreg free
  1479  0023D2  C02A  F06F         	movff	?___ftmul,_timer0init$2563
  1480  0023D6  C02B  F070         	movff	?___ftmul+1,_timer0init$2563+1
  1481  0023DA  C02C  F071         	movff	?___ftmul+2,_timer0init$2563+2
  1482                           
  1483                           ;timers.c: 4: timer0->ab = (uint16_t)((0x0BDC) + (0xF424/8.0*(8.0-seconds)));
  1484  0023DE  0EC0               	movlw	192
  1485  0023E0  6E1A               	movwf	___ftadd@f2,c
  1486  0023E2  0E3D               	movlw	61
  1487  0023E4  6E1B               	movwf	___ftadd@f2+1,c
  1488  0023E6  0E45               	movlw	69
  1489  0023E8  6E1C               	movwf	___ftadd@f2+2,c
  1490  0023EA  C06F  F017         	movff	_timer0init$2563,___ftadd@f1
  1491  0023EE  C070  F018         	movff	_timer0init$2563+1,___ftadd@f1+1
  1492  0023F2  C071  F019         	movff	_timer0init$2563+2,___ftadd@f1+2
  1493  0023F6  ECE3  F00C         	call	___ftadd	;wreg free
  1494  0023FA  C017  F040         	movff	?___ftadd,___fttol@f1
  1495  0023FE  C018  F041         	movff	?___ftadd+1,___fttol@f1+1
  1496  002402  C019  F042         	movff	?___ftadd+2,___fttol@f1+2
  1497  002406  EC3E  F00F         	call	___fttol	;wreg free
  1498  00240A  C040  F06B         	movff	?___fttol,??_timer0init
  1499  00240E  C041  F06C         	movff	?___fttol+1,??_timer0init+1
  1500  002412  C042  F06D         	movff	?___fttol+2,??_timer0init+2
  1501  002416  C043  F06E         	movff	?___fttol+3,??_timer0init+3
  1502  00241A  C066  FFD9         	movff	timer0init@timer0,fsr2l
  1503  00241E  C067  FFDA         	movff	timer0init@timer0+1,fsr2h
  1504  002422  C06B  FFDE         	movff	??_timer0init,postinc2
  1505  002426  C06C  FFDD         	movff	??_timer0init+1,postdec2
  1506                           
  1507                           ;timers.c: 5: T0CONbits.TMR0ON = 1;
  1508  00242A  8ED5               	bsf	4053,7,c	;volatile
  1509                           
  1510                           ;timers.c: 6: T0CONbits.T08BIT = 0;
  1511  00242C  9CD5               	bcf	4053,6,c	;volatile
  1512                           
  1513                           ;timers.c: 7: T0CONbits.T0CS = 0;
  1514  00242E  9AD5               	bcf	4053,5,c	;volatile
  1515                           
  1516                           ;timers.c: 8: T0CONbits.T0SE = 0;
  1517  002430  98D5               	bcf	4053,4,c	;volatile
  1518                           
  1519                           ;timers.c: 9: T0CONbits.PSA = 0;
  1520  002432  96D5               	bcf	4053,3,c	;volatile
  1521                           
  1522                           ;timers.c: 10: T0CONbits.T0PS = 0x7;
  1523  002434  80D5               	bsf	4053,0,c	;volatile
  1524  002436  82D5               	bsf	4053,1,c	;volatile
  1525  002438  84D5               	bsf	4053,2,c	;volatile
  1526                           
  1527                           ;timers.c: 11: INTCON2bits.TMR0IP = 1;
  1528  00243A  84F1               	bsf	intcon2,2,c	;volatile
  1529                           
  1530                           ;timers.c: 12: INTCONbits.TMR0IF = 0;
  1531  00243C  94F2               	bcf	intcon,2,c	;volatile
  1532                           
  1533                           ;timers.c: 13: INTCONbits.TMR0IE = 1;
  1534  00243E  8AF2               	bsf	intcon,5,c	;volatile
  1535  002440  0012               	return	
  1536  002442                     __end_of_timer0init:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           intcon	equ	0xFF2
  1543                           intcon2	equ	0xFF1
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1l	equ	0xFE1
  1548                           postinc2	equ	0xFDE
  1549                           postdec2	equ	0xFDD
  1550                           fsr2h	equ	0xFDA
  1551                           fsr2l	equ	0xFD9
  1552                           status	equ	0xFD8
  1553                           
  1554 ;; *************** function __UART2Init *****************
  1555 ;; Defined at:
  1556 ;;		line 46 in file "src/EUSART.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  BRate           4   27[COMRAM] unsigned long 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1570 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1572 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1573 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1574 ;;Total ram usage:        8 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    2
  1577 ;; This function calls:
  1578 ;;		___lldiv
  1579 ;; This function is called by:
  1580 ;;		_setup
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text3
  1585  002A20                     __ptext3:
  1586                           	opt stack 0
  1587  002A20                     __UART2Init:
  1588                           	opt stack 27
  1589                           
  1590                           ;EUSART.c: 47: TRISBbits.TRISB6 = 1;
  1591                           
  1592                           ;incstack = 0
  1593  002A20  8C93               	bsf	3987,6,c	;volatile
  1594                           
  1595                           ;EUSART.c: 48: TRISBbits.TRISB7 = 1;
  1596  002A22  8E93               	bsf	3987,7,c	;volatile
  1597                           
  1598                           ;EUSART.c: 49: PIR3bits.TX2IF = 0;
  1599  002A24  98A4               	bcf	4004,4,c	;volatile
  1600                           
  1601                           ;EUSART.c: 50: PIR3bits.RC2IF = 0;
  1602  002A26  9AA4               	bcf	4004,5,c	;volatile
  1603                           
  1604                           ;EUSART.c: 51: PIE3bits.RC2IE = 1;
  1605  002A28  8AA3               	bsf	4003,5,c	;volatile
  1606                           
  1607                           ;EUSART.c: 52: PIE3bits.TX2IE = 1;
  1608  002A2A  88A3               	bsf	4003,4,c	;volatile
  1609                           
  1610                           ;EUSART.c: 53: TXSTA2 = 0xA0;
  1611  002A2C  0EA0               	movlw	160
  1612  002A2E  6EBA               	movwf	4026,c	;volatile
  1613                           
  1614                           ;EUSART.c: 54: RCSTA2 = 0x90;
  1615  002A30  0E90               	movlw	144
  1616  002A32  6EA6               	movwf	4006,c	;volatile
  1617                           
  1618                           ;EUSART.c: 55: BAUDCON2 = 0x40;
  1619  002A34  0E40               	movlw	64
  1620  002A36  6EB9               	movwf	4025,c	;volatile
  1621                           
  1622                           ;EUSART.c: 56: SPBRG2 = (uint8_t) ((8000000 / BRate / 64) - 1);
  1623  002A38  0E00               	movlw	0
  1624  002A3A  6E0F               	movwf	___lldiv@dividend,c
  1625  002A3C  0E12               	movlw	18
  1626  002A3E  6E10               	movwf	___lldiv@dividend+1,c
  1627  002A40  0E7A               	movlw	122
  1628  002A42  6E11               	movwf	___lldiv@dividend+2,c
  1629  002A44  0E00               	movlw	0
  1630  002A46  6E12               	movwf	___lldiv@dividend+3,c
  1631  002A48  C01C  F013         	movff	__UART2Init@BRate,___lldiv@divisor
  1632  002A4C  C01D  F014         	movff	__UART2Init@BRate+1,___lldiv@divisor+1
  1633  002A50  C01E  F015         	movff	__UART2Init@BRate+2,___lldiv@divisor+2
  1634  002A54  C01F  F016         	movff	__UART2Init@BRate+3,___lldiv@divisor+3
  1635  002A58  EC2B  F014         	call	___lldiv	;wreg free
  1636  002A5C  C00F  F020         	movff	?___lldiv,??__UART2Init
  1637  002A60  C010  F021         	movff	?___lldiv+1,??__UART2Init+1
  1638  002A64  C011  F022         	movff	?___lldiv+2,??__UART2Init+2
  1639  002A68  C012  F023         	movff	?___lldiv+3,??__UART2Init+3
  1640  002A6C  0E07               	movlw	7
  1641  002A6E  D005               	goto	u4490
  1642  002A70                     u4495:
  1643  002A70  90D8               	bcf	status,0,c
  1644  002A72  3223               	rrcf	??__UART2Init+3,f,c
  1645  002A74  3222               	rrcf	??__UART2Init+2,f,c
  1646  002A76  3221               	rrcf	??__UART2Init+1,f,c
  1647  002A78  3220               	rrcf	??__UART2Init,f,c
  1648  002A7A                     u4490:
  1649  002A7A  2EE8               	decfsz	wreg,f,c
  1650  002A7C  D7F9               	goto	u4495
  1651  002A7E  0420               	decf	??__UART2Init,w,c
  1652  002A80  6E7B               	movwf	3963,c	;volatile
  1653  002A82  0012               	return	
  1654  002A84                     __end_of__UART2Init:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           intcon	equ	0xFF2
  1661                           intcon2	equ	0xFF1
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1l	equ	0xFE1
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function __UART1Init *****************
  1673 ;; Defined at:
  1674 ;;		line 18 in file "src/EUSART.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  BRate           4   27[COMRAM] unsigned long 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;		None               void
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1688 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1692 ;;Total ram usage:        8 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    2
  1695 ;; This function calls:
  1696 ;;		___lldiv
  1697 ;; This function is called by:
  1698 ;;		_setup
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text4
  1703  002A84                     __ptext4:
  1704                           	opt stack 0
  1705  002A84                     __UART1Init:
  1706                           	opt stack 27
  1707                           
  1708                           ;EUSART.c: 19: TRISCbits.TRISC6 = 1;
  1709                           
  1710                           ;incstack = 0
  1711  002A84  8C94               	bsf	3988,6,c	;volatile
  1712                           
  1713                           ;EUSART.c: 20: TRISCbits.TRISC7 = 1;
  1714  002A86  8E94               	bsf	3988,7,c	;volatile
  1715                           
  1716                           ;EUSART.c: 21: PIR1bits.TX1IF = 0;
  1717  002A88  989E               	bcf	3998,4,c	;volatile
  1718                           
  1719                           ;EUSART.c: 22: PIR1bits.RC1IF = 0;
  1720  002A8A  9A9E               	bcf	3998,5,c	;volatile
  1721                           
  1722                           ;EUSART.c: 23: PIE1bits.RC1IE = 1;
  1723  002A8C  8A9D               	bsf	3997,5,c	;volatile
  1724                           
  1725                           ;EUSART.c: 24: PIE1bits.TX1IE = 1;
  1726  002A8E  889D               	bsf	3997,4,c	;volatile
  1727                           
  1728                           ;EUSART.c: 25: TXSTA1 = 0xA0;
  1729  002A90  0EA0               	movlw	160
  1730  002A92  6EAC               	movwf	4012,c	;volatile
  1731                           
  1732                           ;EUSART.c: 26: RCSTA1 = 0x90;
  1733  002A94  0E90               	movlw	144
  1734  002A96  6EAB               	movwf	4011,c	;volatile
  1735                           
  1736                           ;EUSART.c: 27: BAUDCON1 = 0x40;
  1737  002A98  0E40               	movlw	64
  1738  002A9A  6EA7               	movwf	4007,c	;volatile
  1739                           
  1740                           ;EUSART.c: 28: SPBRG1 = (uint8_t) ((8000000 / BRate / 64) - 1);
  1741  002A9C  0E00               	movlw	0
  1742  002A9E  6E0F               	movwf	___lldiv@dividend,c
  1743  002AA0  0E12               	movlw	18
  1744  002AA2  6E10               	movwf	___lldiv@dividend+1,c
  1745  002AA4  0E7A               	movlw	122
  1746  002AA6  6E11               	movwf	___lldiv@dividend+2,c
  1747  002AA8  0E00               	movlw	0
  1748  002AAA  6E12               	movwf	___lldiv@dividend+3,c
  1749  002AAC  C01C  F013         	movff	__UART1Init@BRate,___lldiv@divisor
  1750  002AB0  C01D  F014         	movff	__UART1Init@BRate+1,___lldiv@divisor+1
  1751  002AB4  C01E  F015         	movff	__UART1Init@BRate+2,___lldiv@divisor+2
  1752  002AB8  C01F  F016         	movff	__UART1Init@BRate+3,___lldiv@divisor+3
  1753  002ABC  EC2B  F014         	call	___lldiv	;wreg free
  1754  002AC0  C00F  F020         	movff	?___lldiv,??__UART1Init
  1755  002AC4  C010  F021         	movff	?___lldiv+1,??__UART1Init+1
  1756  002AC8  C011  F022         	movff	?___lldiv+2,??__UART1Init+2
  1757  002ACC  C012  F023         	movff	?___lldiv+3,??__UART1Init+3
  1758  002AD0  0E07               	movlw	7
  1759  002AD2  D005               	goto	u4480
  1760  002AD4                     u4485:
  1761  002AD4  90D8               	bcf	status,0,c
  1762  002AD6  3223               	rrcf	??__UART1Init+3,f,c
  1763  002AD8  3222               	rrcf	??__UART1Init+2,f,c
  1764  002ADA  3221               	rrcf	??__UART1Init+1,f,c
  1765  002ADC  3220               	rrcf	??__UART1Init,f,c
  1766  002ADE                     u4480:
  1767  002ADE  2EE8               	decfsz	wreg,f,c
  1768  002AE0  D7F9               	goto	u4485
  1769  002AE2  0420               	decf	??__UART1Init,w,c
  1770  002AE4  6EAF               	movwf	4015,c	;volatile
  1771  002AE6  0012               	return	
  1772  002AE8                     __end_of__UART1Init:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           intcon	equ	0xFF2
  1779                           intcon2	equ	0xFF1
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           postinc2	equ	0xFDE
  1785                           postdec2	equ	0xFDD
  1786                           fsr2h	equ	0xFDA
  1787                           fsr2l	equ	0xFD9
  1788                           status	equ	0xFD8
  1789                           
  1790 ;; *************** function __I2CInit *****************
  1791 ;; Defined at:
  1792 ;;		line 57 in file "src/I2C.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  BRate           4   27[COMRAM] unsigned long 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;		None               void
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1808 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1809 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1810 ;;Total ram usage:        8 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    2
  1813 ;; This function calls:
  1814 ;;		___lldiv
  1815 ;; This function is called by:
  1816 ;;		_setup
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text5
  1821  002C00                     __ptext5:
  1822                           	opt stack 0
  1823  002C00                     __I2CInit:
  1824                           	opt stack 27
  1825                           
  1826                           ;I2C.c: 58: SSPCON1bits.SSPEN = 0;
  1827                           
  1828                           ;incstack = 0
  1829  002C00  9AC6               	bcf	4038,5,c	;volatile
  1830                           
  1831                           ;I2C.c: 59: TRISCbits.TRISC4 = 1;
  1832  002C02  8894               	bsf	3988,4,c	;volatile
  1833                           
  1834                           ;I2C.c: 60: TRISCbits.TRISC3 = 1;
  1835  002C04  8694               	bsf	3988,3,c	;volatile
  1836                           
  1837                           ;I2C.c: 61: SSPSTATbits.CKE = 0;
  1838  002C06  9CC7               	bcf	4039,6,c	;volatile
  1839                           
  1840                           ;I2C.c: 62: SSPSTATbits.SMP = 0;
  1841  002C08  9EC7               	bcf	4039,7,c	;volatile
  1842                           
  1843                           ;I2C.c: 63: SSPCON1bits.WCOL = 0;
  1844  002C0A  9EC6               	bcf	4038,7,c	;volatile
  1845                           
  1846                           ;I2C.c: 64: SSPCON1bits.SSPOV = 0;
  1847  002C0C  9CC6               	bcf	4038,6,c	;volatile
  1848                           
  1849                           ;I2C.c: 65: SSPCON1bits.SSPM = 0x8;
  1850  002C0E  50C6               	movf	4038,w,c	;volatile
  1851  002C10  0BF0               	andlw	-16
  1852  002C12  0908               	iorlw	8
  1853  002C14  6EC6               	movwf	4038,c	;volatile
  1854                           
  1855                           ;I2C.c: 66: SSPADD = (8000000 / 4 / BRate - 1);
  1856  002C16  0E80               	movlw	128
  1857  002C18  6E0F               	movwf	___lldiv@dividend,c
  1858  002C1A  0E84               	movlw	132
  1859  002C1C  6E10               	movwf	___lldiv@dividend+1,c
  1860  002C1E  0E1E               	movlw	30
  1861  002C20  6E11               	movwf	___lldiv@dividend+2,c
  1862  002C22  0E00               	movlw	0
  1863  002C24  6E12               	movwf	___lldiv@dividend+3,c
  1864  002C26  C01C  F013         	movff	__I2CInit@BRate,___lldiv@divisor
  1865  002C2A  C01D  F014         	movff	__I2CInit@BRate+1,___lldiv@divisor+1
  1866  002C2E  C01E  F015         	movff	__I2CInit@BRate+2,___lldiv@divisor+2
  1867  002C32  C01F  F016         	movff	__I2CInit@BRate+3,___lldiv@divisor+3
  1868  002C36  EC2B  F014         	call	___lldiv	;wreg free
  1869  002C3A  C00F  F020         	movff	?___lldiv,??__I2CInit
  1870  002C3E  C010  F021         	movff	?___lldiv+1,??__I2CInit+1
  1871  002C42  C011  F022         	movff	?___lldiv+2,??__I2CInit+2
  1872  002C46  C012  F023         	movff	?___lldiv+3,??__I2CInit+3
  1873  002C4A  0420               	decf	??__I2CInit,w,c
  1874  002C4C  6EC8               	movwf	4040,c	;volatile
  1875                           
  1876                           ;I2C.c: 67: PIR1bits.SSPIF = 0;
  1877  002C4E  969E               	bcf	3998,3,c	;volatile
  1878                           
  1879                           ;I2C.c: 68: PIE1bits.SSPIE = 1;
  1880  002C50  869D               	bsf	3997,3,c	;volatile
  1881                           
  1882                           ;I2C.c: 70: PIR2bits.BCLIF = 0;
  1883  002C52  96A1               	bcf	4001,3,c	;volatile
  1884                           
  1885                           ;I2C.c: 71: PIE2bits.BCLIE = 1;
  1886  002C54  86A0               	bsf	4000,3,c	;volatile
  1887                           
  1888                           ;I2C.c: 73: SSPCON1bits.SSPEN = 1;
  1889  002C56  8AC6               	bsf	4038,5,c	;volatile
  1890  002C58  0012               	return	
  1891  002C5A                     __end_of__I2CInit:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           intcon	equ	0xFF2
  1898                           intcon2	equ	0xFF1
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1l	equ	0xFE1
  1903                           postinc2	equ	0xFDE
  1904                           postdec2	equ	0xFDD
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _loop *****************
  1910 ;; Defined at:
  1911 ;;		line 58 in file "src/main.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;		None
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;		None
  1916 ;; Return value:  Size  Location     Type
  1917 ;;		None               void
  1918 ;; Registers used:
  1919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1929 ;;Total ram usage:        0 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    6
  1932 ;; This function calls:
  1933 ;;		__UART1Send
  1934 ;;		__UART2Send
  1935 ;;		_broadcastConvert
  1936 ;;		_getADC9
  1937 ;;		_getDate
  1938 ;;		_getTemperature
  1939 ;;		_getTime
  1940 ;;		_sprintf
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text6
  1947  001B72                     __ptext6:
  1948                           	opt stack 0
  1949  001B72                     _loop:
  1950                           	opt stack 24
  1951                           
  1952                           ;main.c: 59: broadcastConvert();
  1953                           
  1954                           ;incstack = 0
  1955  001B72  EC95  F017         	call	_broadcastConvert	;wreg free
  1956                           
  1957                           ;main.c: 60: temp = getTemperature(tempAddress);
  1958  001B76  0100               	movlb	0	; () banked
  1959  001B78  0E00               	movlw	high _tempAddress
  1960  001B7A  6E3A               	movwf	getTemperature@address+1,c
  1961  001B7C  0100               	movlb	0	; () banked
  1962  001B7E  0ED2               	movlw	low _tempAddress
  1963  001B80  6E39               	movwf	getTemperature@address,c
  1964  001B82  EC5B  F011         	call	_getTemperature	;wreg free
  1965  001B86  C039  F0C4         	movff	?_getTemperature,_temp
  1966  001B8A  C03A  F0C5         	movff	?_getTemperature+1,_temp+1
  1967  001B8E  C03B  F0C6         	movff	?_getTemperature+2,_temp+2
  1968                           
  1969                           ;main.c: 61: getTime(&hour, &minute, &second);
  1970  001B92  0100               	movlb	0	; () banked
  1971  001B94  0E00               	movlw	high _hour
  1972  001B96  6E14               	movwf	getTime@hour+1,c
  1973  001B98  0100               	movlb	0	; () banked
  1974  001B9A  0ECC               	movlw	low _hour
  1975  001B9C  6E13               	movwf	getTime@hour,c
  1976  001B9E  0100               	movlb	0	; () banked
  1977  001BA0  0E00               	movlw	high _minute
  1978  001BA2  6E16               	movwf	getTime@minute+1,c
  1979  001BA4  0100               	movlb	0	; () banked
  1980  001BA6  0ECD               	movlw	low _minute
  1981  001BA8  6E15               	movwf	getTime@minute,c
  1982  001BAA  0100               	movlb	0	; () banked
  1983  001BAC  0E00               	movlw	high _second
  1984  001BAE  6E18               	movwf	getTime@second+1,c
  1985  001BB0  0100               	movlb	0	; () banked
  1986  001BB2  0ECE               	movlw	low _second
  1987  001BB4  6E17               	movwf	getTime@second,c
  1988  001BB6  EC6C  F014         	call	_getTime	;wreg free
  1989                           
  1990                           ;main.c: 62: getDate(&day, &month, &year);
  1991  001BBA  0100               	movlb	0	; () banked
  1992  001BBC  0E00               	movlw	high _day
  1993  001BBE  6E16               	movwf	getDate@day+1,c
  1994  001BC0  0100               	movlb	0	; () banked
  1995  001BC2  0EDA               	movlw	low _day
  1996  001BC4  6E15               	movwf	getDate@day,c
  1997  001BC6  0100               	movlb	0	; () banked
  1998  001BC8  0E00               	movlw	high _month
  1999  001BCA  6E18               	movwf	getDate@month+1,c
  2000  001BCC  0100               	movlb	0	; () banked
  2001  001BCE  0EDB               	movlw	low _month
  2002  001BD0  6E17               	movwf	getDate@month,c
  2003  001BD2  0100               	movlb	0	; () banked
  2004  001BD4  0E00               	movlw	high _year
  2005  001BD6  6E1A               	movwf	getDate@year+1,c
  2006  001BD8  0100               	movlb	0	; () banked
  2007  001BDA  0EDC               	movlw	low _year
  2008  001BDC  6E19               	movwf	getDate@year,c
  2009  001BDE  ECE9  F013         	call	_getDate	;wreg free
  2010                           
  2011                           ;main.c: 63: getADC9(&adc);
  2012  001BE2  0100               	movlb	0	; () banked
  2013  001BE4  0E00               	movlw	high _adc
  2014  001BE6  6E3A               	movwf	getADC9@zonnekracht+1,c
  2015  001BE8  0100               	movlb	0	; () banked
  2016  001BEA  0EC7               	movlw	low _adc
  2017  001BEC  6E39               	movwf	getADC9@zonnekracht,c
  2018  001BEE  ECA4  F013         	call	_getADC9	;wreg free
  2019                           
  2020                           ;main.c: 64: sprintf(&message, "%04d/%02d/%02d-%02d:%02d:%02d   Temperatuur: %f C   Volt
      +                          age: %f V\n",
  2021                           ;main.c: 65: (year1 + year), month, day, hour, minute, second, temp, adc);
  2022  001BF2  0101               	movlb	1	; () banked
  2023  001BF4  0E01               	movlw	high _message
  2024  001BF6  0100               	movlb	0	; () banked
  2025  001BF8  6F97               	movwf	(sprintf@wh+1)& (0+255),b
  2026  001BFA  0101               	movlb	1	; () banked
  2027  001BFC  0E00               	movlw	low _message
  2028  001BFE  0100               	movlb	0	; () banked
  2029  001C00  6F96               	movwf	sprintf@wh& (0+255),b
  2030  001C02  0E7F               	movlw	high STR_2
  2031  001C04  0100               	movlb	0	; () banked
  2032  001C06  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2033  001C08  0E63               	movlw	low STR_2
  2034  001C0A  0100               	movlb	0	; () banked
  2035  001C0C  6F98               	movwf	sprintf@f& (0+255),b
  2036  001C0E  0100               	movlb	0	; () banked
  2037  001C10  51DC               	movf	_year& (0+255),w,b
  2038  001C12  0100               	movlb	0	; () banked
  2039  001C14  25CF               	addwf	_year1& (0+255),w,b
  2040  001C16  0100               	movlb	0	; () banked
  2041  001C18  6F9A               	movwf	(?_sprintf+4)& (0+255),b
  2042  001C1A  0E00               	movlw	0
  2043  001C1C  0100               	movlb	0	; () banked
  2044  001C1E  21D0               	addwfc	(_year1+1)& (0+255),w,b
  2045  001C20  0100               	movlb	0	; () banked
  2046  001C22  6F9B               	movwf	(?_sprintf+5)& (0+255),b
  2047  001C24  0100               	movlb	0	; () banked
  2048  001C26  C0DB  F09C         	movff	_month,?_sprintf+6
  2049  001C2A  0100               	movlb	0	; () banked
  2050  001C2C  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2051  001C2E  0100               	movlb	0	; () banked
  2052  001C30  C0DA  F09E         	movff	_day,?_sprintf+8
  2053  001C34  0100               	movlb	0	; () banked
  2054  001C36  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2055  001C38  0100               	movlb	0	; () banked
  2056  001C3A  C0CC  F0A0         	movff	_hour,?_sprintf+10
  2057  001C3E  0100               	movlb	0	; () banked
  2058  001C40  6BA1               	clrf	(?_sprintf+11)& (0+255),b
  2059  001C42  0100               	movlb	0	; () banked
  2060  001C44  C0CD  F0A2         	movff	_minute,?_sprintf+12
  2061  001C48  0100               	movlb	0	; () banked
  2062  001C4A  6BA3               	clrf	(?_sprintf+13)& (0+255),b
  2063  001C4C  0100               	movlb	0	; () banked
  2064  001C4E  C0CE  F0A4         	movff	_second,?_sprintf+14
  2065  001C52  0100               	movlb	0	; () banked
  2066  001C54  6BA5               	clrf	(?_sprintf+15)& (0+255),b
  2067  001C56  C0C4  F0A6         	movff	_temp,?_sprintf+16
  2068  001C5A  C0C5  F0A7         	movff	_temp+1,?_sprintf+17
  2069  001C5E  C0C6  F0A8         	movff	_temp+2,?_sprintf+18
  2070  001C62  C0C7  F0A9         	movff	_adc,?_sprintf+19
  2071  001C66  C0C8  F0AA         	movff	_adc+1,?_sprintf+20
  2072  001C6A  C0C9  F0AB         	movff	_adc+2,?_sprintf+21
  2073  001C6E  ECAA  F014         	call	_sprintf	;wreg free
  2074                           
  2075                           ;main.c: 66: _UART1Send(&message);
  2076  001C72  0101               	movlb	1	; () banked
  2077  001C74  0E01               	movlw	high _message
  2078  001C76  6E10               	movwf	__UART1Send@message+1,c
  2079  001C78  0101               	movlb	1	; () banked
  2080  001C7A  0E00               	movlw	low _message
  2081  001C7C  6E0F               	movwf	__UART1Send@message,c
  2082  001C7E  EC90  F016         	call	__UART1Send	;wreg free
  2083                           
  2084                           ;main.c: 67: sprintf(&message, "%04d,%02d,%02d,%02d,%02d,%02d,%f,%f\n",
  2085                           ;main.c: 68: (year1 + year), month, day, hour, minute, second, temp, adc);
  2086  001C82  0101               	movlb	1	; () banked
  2087  001C84  0E01               	movlw	high _message
  2088  001C86  0100               	movlb	0	; () banked
  2089  001C88  6F97               	movwf	(sprintf@wh+1)& (0+255),b
  2090  001C8A  0101               	movlb	1	; () banked
  2091  001C8C  0E00               	movlw	low _message
  2092  001C8E  0100               	movlb	0	; () banked
  2093  001C90  6F96               	movwf	sprintf@wh& (0+255),b
  2094  001C92  0E7F               	movlw	high STR_3
  2095  001C94  0100               	movlb	0	; () banked
  2096  001C96  6F99               	movwf	(sprintf@f+1)& (0+255),b
  2097  001C98  0EA6               	movlw	low STR_3
  2098  001C9A  0100               	movlb	0	; () banked
  2099  001C9C  6F98               	movwf	sprintf@f& (0+255),b
  2100  001C9E  0100               	movlb	0	; () banked
  2101  001CA0  51DC               	movf	_year& (0+255),w,b
  2102  001CA2  0100               	movlb	0	; () banked
  2103  001CA4  25CF               	addwf	_year1& (0+255),w,b
  2104  001CA6  0100               	movlb	0	; () banked
  2105  001CA8  6F9A               	movwf	(?_sprintf+4)& (0+255),b
  2106  001CAA  0E00               	movlw	0
  2107  001CAC  0100               	movlb	0	; () banked
  2108  001CAE  21D0               	addwfc	(_year1+1)& (0+255),w,b
  2109  001CB0  0100               	movlb	0	; () banked
  2110  001CB2  6F9B               	movwf	(?_sprintf+5)& (0+255),b
  2111  001CB4  0100               	movlb	0	; () banked
  2112  001CB6  C0DB  F09C         	movff	_month,?_sprintf+6
  2113  001CBA  0100               	movlb	0	; () banked
  2114  001CBC  6B9D               	clrf	(?_sprintf+7)& (0+255),b
  2115  001CBE  0100               	movlb	0	; () banked
  2116  001CC0  C0DA  F09E         	movff	_day,?_sprintf+8
  2117  001CC4  0100               	movlb	0	; () banked
  2118  001CC6  6B9F               	clrf	(?_sprintf+9)& (0+255),b
  2119  001CC8  0100               	movlb	0	; () banked
  2120  001CCA  C0CC  F0A0         	movff	_hour,?_sprintf+10
  2121  001CCE  0100               	movlb	0	; () banked
  2122  001CD0  6BA1               	clrf	(?_sprintf+11)& (0+255),b
  2123  001CD2  0100               	movlb	0	; () banked
  2124  001CD4  C0CD  F0A2         	movff	_minute,?_sprintf+12
  2125  001CD8  0100               	movlb	0	; () banked
  2126  001CDA  6BA3               	clrf	(?_sprintf+13)& (0+255),b
  2127  001CDC  0100               	movlb	0	; () banked
  2128  001CDE  C0CE  F0A4         	movff	_second,?_sprintf+14
  2129  001CE2  0100               	movlb	0	; () banked
  2130  001CE4  6BA5               	clrf	(?_sprintf+15)& (0+255),b
  2131  001CE6  C0C4  F0A6         	movff	_temp,?_sprintf+16
  2132  001CEA  C0C5  F0A7         	movff	_temp+1,?_sprintf+17
  2133  001CEE  C0C6  F0A8         	movff	_temp+2,?_sprintf+18
  2134  001CF2  C0C7  F0A9         	movff	_adc,?_sprintf+19
  2135  001CF6  C0C8  F0AA         	movff	_adc+1,?_sprintf+20
  2136  001CFA  C0C9  F0AB         	movff	_adc+2,?_sprintf+21
  2137  001CFE  ECAA  F014         	call	_sprintf	;wreg free
  2138                           
  2139                           ;main.c: 69: _UART2Send(&message);
  2140  001D02  0101               	movlb	1	; () banked
  2141  001D04  0E01               	movlw	high _message
  2142  001D06  6E10               	movwf	__UART2Send@message+1,c
  2143  001D08  0101               	movlb	1	; () banked
  2144  001D0A  0E00               	movlw	low _message
  2145  001D0C  6E0F               	movwf	__UART2Send@message,c
  2146  001D0E  EC71  F016         	call	__UART2Send	;wreg free
  2147  001D12  0012               	return	
  2148  001D14                     __end_of_loop:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           postinc2	equ	0xFDE
  2161                           postdec2	equ	0xFDD
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _sprintf *****************
  2167 ;; Defined at:
  2168 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\sprintf.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  wh              2   54[BANK0 ] PTR unsigned char 
  2171 ;;		 -> message(80), 
  2172 ;;  f               2   56[BANK0 ] PTR const unsigned char 
  2173 ;;		 -> STR_3(37), STR_2(67), STR_1(17), 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  pb              4   78[BANK0 ] struct __prbuf
  2176 ;;  ap              2   76[BANK0 ] PTR void [1]
  2177 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2   54[BANK0 ] int 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2187 ;;      Params:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2188 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2191 ;;Total ram usage:       28 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    5
  2194 ;; This function calls:
  2195 ;;		__doprnt
  2196 ;; This function is called by:
  2197 ;;		_setup
  2198 ;;		_loop
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text7
  2203  002954                     __ptext7:
  2204                           	opt stack 0
  2205  002954                     _sprintf:
  2206                           	opt stack 24
  2207                           
  2208                           ;incstack = 0
  2209  002954  0100               	movlb	0	; () banked
  2210  002956  C097  F0AF         	movff	sprintf@wh+1,sprintf@pb+1
  2211  00295A  0100               	movlb	0	; () banked
  2212  00295C  C096  F0AE         	movff	sprintf@wh,sprintf@pb
  2213  002960  0E00               	movlw	0
  2214  002962  0100               	movlb	0	; () banked
  2215  002964  6FB1               	movwf	(sprintf@pb+3)& (0+255),b
  2216  002966  0E00               	movlw	0
  2217  002968  0100               	movlb	0	; () banked
  2218  00296A  6FB0               	movwf	(sprintf@pb+2)& (0+255),b
  2219  00296C  0100               	movlb	0	; () banked
  2220  00296E  0E00               	movlw	high (?_sprintf+4)
  2221  002970  0100               	movlb	0	; () banked
  2222  002972  6FAD               	movwf	(sprintf@ap+1)& (0+255),b
  2223  002974  0100               	movlb	0	; () banked
  2224  002976  0E9A               	movlw	low (?_sprintf+4)
  2225  002978  0100               	movlb	0	; () banked
  2226  00297A  6FAC               	movwf	sprintf@ap& (0+255),b
  2227                           
  2228                           ; BSR set to: 0
  2229  00297C  0100               	movlb	0	; () banked
  2230  00297E  0E00               	movlw	high sprintf@pb
  2231  002980  0100               	movlb	0	; () banked
  2232  002982  6F67               	movwf	(__doprnt@pb+1)& (0+255),b
  2233  002984  0100               	movlb	0	; () banked
  2234  002986  0EAE               	movlw	low sprintf@pb
  2235  002988  0100               	movlb	0	; () banked
  2236  00298A  6F66               	movwf	__doprnt@pb& (0+255),b
  2237  00298C  0100               	movlb	0	; () banked
  2238  00298E  C099  F069         	movff	sprintf@f+1,__doprnt@f+1
  2239  002992  0100               	movlb	0	; () banked
  2240  002994  C098  F068         	movff	sprintf@f,__doprnt@f
  2241  002998  0100               	movlb	0	; () banked
  2242  00299A  0E00               	movlw	high sprintf@ap
  2243  00299C  0100               	movlb	0	; () banked
  2244  00299E  6F6B               	movwf	(__doprnt@ap+1)& (0+255),b
  2245  0029A0  0100               	movlb	0	; () banked
  2246  0029A2  0EAC               	movlw	low sprintf@ap
  2247  0029A4  0100               	movlb	0	; () banked
  2248  0029A6  6F6A               	movwf	__doprnt@ap& (0+255),b
  2249  0029A8  EC58  F000         	call	__doprnt	;wreg free
  2250  0029AC  C0AE  FFD9         	movff	sprintf@pb,fsr2l
  2251  0029B0  C0AF  FFDA         	movff	sprintf@pb+1,fsr2h
  2252  0029B4  0E00               	movlw	0
  2253  0029B6  6EDF               	movwf	indf2,c
  2254  0029B8  0012               	return	
  2255  0029BA                     __end_of_sprintf:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1l	equ	0xFE1
  2267                           indf2	equ	0xFDF
  2268                           postinc2	equ	0xFDE
  2269                           postdec2	equ	0xFDD
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function __doprnt *****************
  2275 ;; Defined at:
  2276 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  pb              2    6[BANK0 ] PTR struct __prbuf
  2279 ;;		 -> sprintf@pb(4), printf@pb(4), 
  2280 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  2281 ;;		 -> STR_5(12), STR_4(6), STR_3(37), STR_2(67), 
  2282 ;;		 -> STR_1(17), 
  2283 ;;  ap              2   10[BANK0 ] PTR PTR void 
  2284 ;;		 -> sprintf@ap(2), printf@ap(2), 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  idx             1   25[BANK0 ] unsigned char 
  2287 ;;  vd              4   26[BANK0 ] unsigned long 
  2288 ;;  vd              4   30[BANK0 ] unsigned long 
  2289 ;;  _val            5   43[BANK0 ] struct .
  2290 ;;  fval            3   50[BANK0 ] struct .
  2291 ;;  integ           3   34[BANK0 ] struct .
  2292 ;;  ival            3    0        struct .
  2293 ;;  flag            2   48[BANK0 ] unsigned short 
  2294 ;;  exp             2   41[BANK0 ] int 
  2295 ;;  width           2   39[BANK0 ] int 
  2296 ;;  prec            2   37[BANK0 ] int 
  2297 ;;  c               1   53[BANK0 ] char 
  2298 ;;  d               1    0        unsigned char 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  2    6[BANK0 ] int 
  2301 ;; Registers used:
  2302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2308 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2309 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2310 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2311 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2312 ;;Total ram usage:       48 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    4
  2315 ;; This function calls:
  2316 ;;		Absolute function
  2317 ;;		___awdiv
  2318 ;;		___ftadd
  2319 ;;		___ftge
  2320 ;;		___ftmul
  2321 ;;		___ftneg
  2322 ;;		___ftsub
  2323 ;;		___fttol
  2324 ;;		___lldiv
  2325 ;;		___llmod
  2326 ;;		___lltoft
  2327 ;;		___wmul
  2328 ;;		__div_to_l_
  2329 ;;		__tdiv_to_l_
  2330 ;;		_fround
  2331 ;;		_isdigit
  2332 ;;		_putch
  2333 ;;		_scale
  2334 ;; This function is called by:
  2335 ;;		_sprintf
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text8
  2340  0000B0                     __ptext8:
  2341                           	opt stack 0
  2342  0000B0                     __doprnt:
  2343                           	opt stack 24
  2344                           
  2345                           ;doprnt.c: 499: signed char c;
  2346                           ;doprnt.c: 501: int width;
  2347                           ;doprnt.c: 504: int prec;
  2348                           ;doprnt.c: 508: unsigned short flag;
  2349                           ;doprnt.c: 515: char d;
  2350                           ;doprnt.c: 516: double fval, integ;
  2351                           ;doprnt.c: 517: int exp;
  2352                           ;doprnt.c: 518: double ival;
  2353                           ;doprnt.c: 519: union {
  2354                           ;doprnt.c: 520: unsigned long _val;
  2355                           ;doprnt.c: 521: struct {
  2356                           ;doprnt.c: 522: const char * _cp;
  2357                           ;doprnt.c: 523: unsigned _len;
  2358                           ;doprnt.c: 524: } _str;
  2359                           ;doprnt.c: 525: } _val;
  2360                           ;doprnt.c: 545: while(c = *f++) {
  2361                           
  2362                           ;incstack = 0
  2363  0000B0  EF9E  F009         	goto	l4997
  2364  0000B4                     l4627:
  2365                           
  2366                           ;doprnt.c: 547: if(c != '%')
  2367  0000B4  0100               	movlb	0	; () banked
  2368  0000B6  5195               	movf	__doprnt@c& (0+255),w,b
  2369  0000B8  0A25               	xorlw	37
  2370  0000BA  B4D8               	btfsc	status,2,c
  2371  0000BC  D03D               	goto	l4637
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;doprnt.c: 549: {
  2375                           ;doprnt.c: 550: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2376  0000BE  0100               	movlb	0	; () banked
  2377  0000C0  EE20 F002          	lfsr	2,2
  2378  0000C4  0100               	movlb	0	; () banked
  2379  0000C6  5166               	movf	__doprnt@pb& (0+255),w,b
  2380  0000C8  26D9               	addwf	fsr2l,f,c
  2381  0000CA  0100               	movlb	0	; () banked
  2382  0000CC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  2383  0000CE  22DA               	addwfc	fsr2h,f,c
  2384  0000D0  50DE               	movf	postinc2,w,c
  2385  0000D2  10DD               	iorwf	postdec2,w,c
  2386  0000D4  B4D8               	btfsc	status,2,c
  2387  0000D6  D018               	goto	l4633
  2388                           
  2389                           ; BSR set to: 0
  2390  0000D8  0100               	movlb	0	; () banked
  2391  0000DA  EE20 F002          	lfsr	2,2
  2392  0000DE  0100               	movlb	0	; () banked
  2393  0000E0  5166               	movf	__doprnt@pb& (0+255),w,b
  2394  0000E2  26D9               	addwf	fsr2l,f,c
  2395  0000E4  0100               	movlb	0	; () banked
  2396  0000E6  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  2397  0000E8  22DA               	addwfc	fsr2h,f,c
  2398  0000EA  D802               	call	u5418
  2399  0000EC  EF9E  F009         	goto	l4997
  2400  0000F0                     u5418:
  2401  0000F0  0005               	push	
  2402  0000F2  6EFA               	movwf	pclath,c
  2403  0000F4  50DE               	movf	postinc2,w,c
  2404  0000F6  6EFD               	movwf	tosl,c
  2405  0000F8  50DE               	movf	postinc2,w,c
  2406  0000FA  6EFE               	movwf	tosh,c
  2407  0000FC  50F8               	movf	tblptru,w,c
  2408  0000FE  6EFF               	movwf	tosu,c
  2409  000100  50FA               	movf	pclath,w,c
  2410  000102  0100               	movlb	0	; () banked
  2411  000104  5195               	movf	__doprnt@c& (0+255),w,b
  2412  000106  0012               	return		;indir
  2413  000108                     l4633:
  2414  000108  C066  FFD9         	movff	__doprnt@pb,fsr2l
  2415  00010C  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  2416  000110  CFDE F06C          	movff	postinc2,??__doprnt
  2417  000114  CFDD F06D          	movff	postdec2,??__doprnt+1
  2418  000118  C06C  FFD9         	movff	??__doprnt,fsr2l
  2419  00011C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  2420  000120  0100               	movlb	0	; () banked
  2421  000122  C095  FFDF         	movff	__doprnt@c,indf2
  2422                           
  2423                           ; BSR set to: 0
  2424  000126  C066  FFD9         	movff	__doprnt@pb,fsr2l
  2425  00012A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  2426  00012E  2ADE               	incf	postinc2,f,c
  2427  000130  0E00               	movlw	0
  2428  000132  22DD               	addwfc	postdec2,f,c
  2429  000134  EF9E  F009         	goto	l4997
  2430  000138                     l4637:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;doprnt.c: 552: }
  2434                           ;doprnt.c: 555: width = 0;
  2435  000138  0E00               	movlw	0
  2436  00013A  0100               	movlb	0	; () banked
  2437  00013C  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  2438  00013E  0E00               	movlw	0
  2439  000140  0100               	movlb	0	; () banked
  2440  000142  6F87               	movwf	__doprnt@width& (0+255),b
  2441                           
  2442                           ;doprnt.c: 557: flag = 0;
  2443  000144  0E00               	movlw	0
  2444  000146  0100               	movlb	0	; () banked
  2445  000148  6F91               	movwf	(__doprnt@flag+1)& (0+255),b
  2446  00014A  0E00               	movlw	0
  2447  00014C  0100               	movlb	0	; () banked
  2448  00014E  6F90               	movwf	__doprnt@flag& (0+255),b
  2449  000150  D005               	goto	l4643
  2450  000152                     l4639:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;doprnt.c: 589: flag |= 0x04;
  2454  000152  0100               	movlb	0	; () banked
  2455  000154  8590               	bsf	__doprnt@flag& (0+255),2,b
  2456                           
  2457                           ;doprnt.c: 590: f++;
  2458  000156  0100               	movlb	0	; () banked
  2459  000158  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2460  00015A  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2461  00015C                     l4643:
  2462                           
  2463                           ; BSR set to: 0
  2464  00015C  0100               	movlb	0	; () banked
  2465  00015E  C068  FFF6         	movff	__doprnt@f,tblptrl
  2466  000162  0100               	movlb	0	; () banked
  2467  000164  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2468  000168                     	if	0	;tblptru may be non-zero
  2469  000168                     	endif
  2470  000168                     	if	0	;tblptru may be non-zero
  2471  000168                     	endif
  2472  000168  0008               	tblrd		*
  2473  00016A  50F5               	movf	tablat,w,c
  2474                           
  2475                           ; Switch size 1, requested type "space"
  2476                           ; Number of cases is 1, Range of values is 48 to 48
  2477                           ; switch strategies available:
  2478                           ; Name         Instructions Cycles
  2479                           ; simple_byte            4     3 (average)
  2480                           ;	Chosen strategy is simple_byte
  2481  00016C  0A30               	xorlw	48	; case 48
  2482  00016E  B4D8               	btfsc	status,2,c
  2483  000170  D7F0               	goto	l4639
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2487                           
  2488                           ; BSR set to: 0
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;doprnt.c: 595: }
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;doprnt.c: 594: break;
  2495  000172  0100               	movlb	0	; () banked
  2496  000174  C068  FFF6         	movff	__doprnt@f,tblptrl
  2497  000178  0100               	movlb	0	; () banked
  2498  00017A  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2499  00017E                     	if	0	;tblptru may be non-zero
  2500  00017E                     	endif
  2501  00017E                     	if	0	;tblptru may be non-zero
  2502  00017E                     	endif
  2503  00017E  0008               	tblrd		*
  2504  000180  50F5               	movf	tablat,w,c
  2505  000182  EC85  F017         	call	_isdigit
  2506  000186  A0D8               	btfss	status,0,c
  2507  000188  D04A               	goto	l4663
  2508                           
  2509                           ;doprnt.c: 607: width = 0;
  2510  00018A  0E00               	movlw	0
  2511  00018C  0100               	movlb	0	; () banked
  2512  00018E  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  2513  000190  0E00               	movlw	0
  2514  000192  0100               	movlb	0	; () banked
  2515  000194  6F87               	movwf	__doprnt@width& (0+255),b
  2516  000196                     l4649:
  2517                           
  2518                           ;doprnt.c: 609: width *= 10;
  2519  000196  C087  F01D         	movff	__doprnt@width,___wmul@multiplier
  2520  00019A  C088  F01E         	movff	__doprnt@width+1,___wmul@multiplier+1
  2521  00019E  0E00               	movlw	0
  2522  0001A0  6E20               	movwf	___wmul@multiplicand+1,c
  2523  0001A2  0E0A               	movlw	10
  2524  0001A4  6E1F               	movwf	___wmul@multiplicand,c
  2525  0001A6  EC2A  F017         	call	___wmul	;wreg free
  2526  0001AA  C01D  F087         	movff	?___wmul,__doprnt@width
  2527  0001AE  C01E  F088         	movff	?___wmul+1,__doprnt@width+1
  2528                           
  2529                           ;doprnt.c: 610: width += *f++ - '0';
  2530  0001B2  0ED0               	movlw	208
  2531  0001B4  0100               	movlb	0	; () banked
  2532  0001B6  6F6C               	movwf	??__doprnt& (0+255),b
  2533  0001B8  0EFF               	movlw	255
  2534  0001BA  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  2535  0001BC  0100               	movlb	0	; () banked
  2536  0001BE  C068  FFF6         	movff	__doprnt@f,tblptrl
  2537  0001C2  0100               	movlb	0	; () banked
  2538  0001C4  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2539  0001C8                     	if	0	;tblptru may be non-zero
  2540  0001C8                     	endif
  2541  0001C8                     	if	0	;tblptru may be non-zero
  2542  0001C8                     	endif
  2543  0001C8  0008               	tblrd		*
  2544  0001CA  50F5               	movf	tablat,w,c
  2545  0001CC  0100               	movlb	0	; () banked
  2546  0001CE  6F6E               	movwf	(??__doprnt+2)& (0+255),b
  2547  0001D0  6B6F               	clrf	(??__doprnt+3)& (0+255),b
  2548  0001D2  0100               	movlb	0	; () banked
  2549  0001D4  516C               	movf	??__doprnt& (0+255),w,b
  2550  0001D6  0100               	movlb	0	; () banked
  2551  0001D8  276E               	addwf	(??__doprnt+2)& (0+255),f,b
  2552  0001DA  0100               	movlb	0	; () banked
  2553  0001DC  516D               	movf	(??__doprnt+1)& (0+255),w,b
  2554  0001DE  0100               	movlb	0	; () banked
  2555  0001E0  236F               	addwfc	(??__doprnt+3)& (0+255),f,b
  2556  0001E2  0100               	movlb	0	; () banked
  2557  0001E4  516E               	movf	(??__doprnt+2)& (0+255),w,b
  2558  0001E6  0100               	movlb	0	; () banked
  2559  0001E8  2787               	addwf	__doprnt@width& (0+255),f,b
  2560  0001EA  0100               	movlb	0	; () banked
  2561  0001EC  516F               	movf	(??__doprnt+3)& (0+255),w,b
  2562  0001EE  0100               	movlb	0	; () banked
  2563  0001F0  2388               	addwfc	(__doprnt@width+1)& (0+255),f,b
  2564                           
  2565                           ; BSR set to: 0
  2566  0001F2  0100               	movlb	0	; () banked
  2567  0001F4  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2568  0001F6  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2572  0001F8  0100               	movlb	0	; () banked
  2573  0001FA  C068  FFF6         	movff	__doprnt@f,tblptrl
  2574  0001FE  0100               	movlb	0	; () banked
  2575  000200  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2576  000204                     	if	0	;tblptru may be non-zero
  2577  000204                     	endif
  2578  000204                     	if	0	;tblptru may be non-zero
  2579  000204                     	endif
  2580  000204  0008               	tblrd		*
  2581  000206  50F5               	movf	tablat,w,c
  2582  000208  EC85  F017         	call	_isdigit
  2583  00020C  A0D8               	btfss	status,0,c
  2584  00020E  D007               	goto	l4663
  2585  000210  D7C2               	goto	l4649
  2586  000212                     l4657:
  2587                           
  2588                           ;doprnt.c: 672: flag |= 0x400;
  2589  000212  0100               	movlb	0	; () banked
  2590  000214  8591               	bsf	(__doprnt@flag+1)& (0+255),2,b
  2591                           
  2592                           ;doprnt.c: 673: break;
  2593  000216  D024               	goto	l4665
  2594  000218                     l4659:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;doprnt.c: 730: flag |= 0x80;
  2598  000218  0100               	movlb	0	; () banked
  2599  00021A  8F90               	bsf	__doprnt@flag& (0+255),7,b
  2600                           
  2601                           ;doprnt.c: 732: break;
  2602  00021C  D021               	goto	l4665
  2603  00021E                     l4663:
  2604  00021E  0100               	movlb	0	; () banked
  2605  000220  C068  FFF6         	movff	__doprnt@f,tblptrl
  2606  000224  0100               	movlb	0	; () banked
  2607  000226  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  2608  00022A  0100               	movlb	0	; () banked
  2609  00022C  4B68               	infsnz	__doprnt@f& (0+255),f,b
  2610  00022E  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  2611  000230                     	if	0	;tblptru may be non-zero
  2612  000230                     	endif
  2613  000230                     	if	0	;tblptru may be non-zero
  2614  000230                     	endif
  2615  000230  0008               	tblrd		*
  2616  000232  0100               	movlb	0	; () banked
  2617  000234  CFF5 F095          	movff	tablat,__doprnt@c
  2618  000238  0100               	movlb	0	; () banked
  2619  00023A  5195               	movf	__doprnt@c& (0+255),w,b
  2620                           
  2621                           ; Switch size 1, requested type "space"
  2622                           ; Number of cases is 5, Range of values is 0 to 120
  2623                           ; switch strategies available:
  2624                           ; Name         Instructions Cycles
  2625                           ; simple_byte           16     9 (average)
  2626                           ;	Chosen strategy is simple_byte
  2627  00023C  0A00               	xorlw	0	; case 0
  2628  00023E  B4D8               	btfsc	status,2,c
  2629  000240  EFAF  F009         	goto	l4999
  2630  000244  0A64               	xorlw	100	; case 100
  2631  000246  B4D8               	btfsc	status,2,c
  2632  000248  D00B               	goto	l4665
  2633  00024A  0A02               	xorlw	2	; case 102
  2634  00024C  B4D8               	btfsc	status,2,c
  2635  00024E  D7E1               	goto	l4657
  2636  000250  0A0F               	xorlw	15	; case 105
  2637  000252  B4D8               	btfsc	status,2,c
  2638  000254  D005               	goto	l4665
  2639  000256  0A11               	xorlw	17	; case 120
  2640  000258  B4D8               	btfsc	status,2,c
  2641  00025A  D7DE               	goto	l4659
  2642  00025C  EF9E  F009         	goto	l4997
  2643  000260                     l4665:
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 834: if(flag & (0x700)) {
  2647  000260  0E07               	movlw	7
  2648  000262  0100               	movlb	0	; () banked
  2649  000264  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  2650  000266  B4D8               	btfsc	status,2,c
  2651  000268  EFA7  F006         	goto	l499
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;doprnt.c: 838: prec = 6;
  2655  00026C  0E00               	movlw	0
  2656  00026E  0100               	movlb	0	; () banked
  2657  000270  6F86               	movwf	(__doprnt@prec+1)& (0+255),b
  2658  000272  0E06               	movlw	6
  2659  000274  0100               	movlb	0	; () banked
  2660  000276  6F85               	movwf	__doprnt@prec& (0+255),b
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2664  000278  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  2665  00027C  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  2666  000280  CFDF F06C          	movff	indf2,??__doprnt
  2667  000284  0E03               	movlw	3
  2668  000286  26DE               	addwf	postinc2,f,c
  2669  000288  CFDF F06D          	movff	indf2,??__doprnt+1
  2670  00028C  0E00               	movlw	0
  2671  00028E  22DD               	addwfc	postdec2,f,c
  2672  000290  C06C  FFD9         	movff	??__doprnt,fsr2l
  2673  000294  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  2674  000298  0100               	movlb	0	; () banked
  2675  00029A  CFDE F092          	movff	postinc2,__doprnt@fval
  2676  00029E  0100               	movlb	0	; () banked
  2677  0002A0  CFDE F093          	movff	postinc2,__doprnt@fval+1
  2678  0002A4  0100               	movlb	0	; () banked
  2679  0002A6  CFDD F094          	movff	postdec2,__doprnt@fval+2
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;doprnt.c: 840: if(fval < 0.0) {
  2683  0002AA  0100               	movlb	0	; () banked
  2684  0002AC  5194               	movf	(__doprnt@fval+2)& (0+255),w,b
  2685  0002AE  0A80               	xorlw	128
  2686  0002B0  0F80               	addlw	128
  2687  0002B2  E107               	bnz	u5455
  2688  0002B4  0E00               	movlw	0
  2689  0002B6  0100               	movlb	0	; () banked
  2690  0002B8  5D93               	subwf	(__doprnt@fval+1)& (0+255),w,b
  2691  0002BA  E103               	bnz	u5455
  2692  0002BC  0E00               	movlw	0
  2693  0002BE  0100               	movlb	0	; () banked
  2694  0002C0  5D92               	subwf	__doprnt@fval& (0+255),w,b
  2695  0002C2                     u5455:
  2696  0002C2  B0D8               	btfsc	status,0,c
  2697  0002C4  D011               	goto	l4677
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;doprnt.c: 841: fval = -fval;
  2701  0002C6  C092  F00F         	movff	__doprnt@fval,___ftneg@f1
  2702  0002CA  C093  F010         	movff	__doprnt@fval+1,___ftneg@f1+1
  2703  0002CE  C094  F011         	movff	__doprnt@fval+2,___ftneg@f1+2
  2704  0002D2  EC3D  F017         	call	___ftneg	;wreg free
  2705  0002D6  C00F  F092         	movff	?___ftneg,__doprnt@fval
  2706  0002DA  C010  F093         	movff	?___ftneg+1,__doprnt@fval+1
  2707  0002DE  C011  F094         	movff	?___ftneg+2,__doprnt@fval+2
  2708                           
  2709                           ;doprnt.c: 842: flag |= 0x03;
  2710  0002E2  0E03               	movlw	3
  2711  0002E4  0100               	movlb	0	; () banked
  2712  0002E6  1390               	iorwf	__doprnt@flag& (0+255),f,b
  2713  0002E8                     l4677:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 843: }
  2717                           ;doprnt.c: 844: exp = 0;
  2718  0002E8  0E00               	movlw	0
  2719  0002EA  0100               	movlb	0	; () banked
  2720  0002EC  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  2721  0002EE  0E00               	movlw	0
  2722  0002F0  0100               	movlb	0	; () banked
  2723  0002F2  6F89               	movwf	__doprnt@exp& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 845: if( fval!=0) {
  2727  0002F4  0E7F               	movlw	127
  2728  0002F6  0100               	movlb	0	; () banked
  2729  0002F8  1594               	andwf	(__doprnt@fval+2)& (0+255),w,b
  2730  0002FA  0100               	movlb	0	; () banked
  2731  0002FC  1193               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  2732  0002FE  0100               	movlb	0	; () banked
  2733  000300  1192               	iorwf	__doprnt@fval& (0+255),w,b
  2734  000302  B4D8               	btfsc	status,2,c
  2735  000304  D09C               	goto	l4705
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2739  000306  0E82               	movlw	130
  2740  000308  0100               	movlb	0	; () banked
  2741  00030A  6F6C               	movwf	??__doprnt& (0+255),b
  2742  00030C  0EFF               	movlw	255
  2743  00030E  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  2744  000310  0100               	movlb	0	; () banked
  2745  000312  C092  F06E         	movff	__doprnt@fval,??__doprnt+2
  2746  000316  0100               	movlb	0	; () banked
  2747  000318  C093  F06F         	movff	__doprnt@fval+1,??__doprnt+3
  2748  00031C  0100               	movlb	0	; () banked
  2749  00031E  C094  F070         	movff	__doprnt@fval+2,??__doprnt+4
  2750  000322  0100               	movlb	0	; () banked
  2751  000324  C095  F071         	movff	__doprnt@fval+3,??__doprnt+5
  2752  000328  0E10               	movlw	16
  2753  00032A  D006               	goto	u5470
  2754  00032C                     u5475:
  2755  00032C  0100               	movlb	0	; () banked
  2756  00032E  90D8               	bcf	status,0,c
  2757  000330  3371               	rrcf	(??__doprnt+5)& (0+255),f,b
  2758  000332  3370               	rrcf	(??__doprnt+4)& (0+255),f,b
  2759  000334  336F               	rrcf	(??__doprnt+3)& (0+255),f,b
  2760  000336  336E               	rrcf	(??__doprnt+2)& (0+255),f,b
  2761  000338                     u5470:
  2762  000338  2EE8               	decfsz	wreg,f,c
  2763  00033A  D7F8               	goto	u5475
  2764  00033C  0100               	movlb	0	; () banked
  2765  00033E  516E               	movf	(??__doprnt+2)& (0+255),w,b
  2766  000340  0100               	movlb	0	; () banked
  2767  000342  256C               	addwf	??__doprnt& (0+255),w,b
  2768  000344  0100               	movlb	0	; () banked
  2769  000346  6F89               	movwf	__doprnt@exp& (0+255),b
  2770  000348  0E00               	movlw	0
  2771  00034A  0100               	movlb	0	; () banked
  2772  00034C  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  2773  00034E  0100               	movlb	0	; () banked
  2774  000350  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;doprnt.c: 847: exp--;
  2778  000352  0100               	movlb	0	; () banked
  2779  000354  0789               	decf	__doprnt@exp& (0+255),f,b
  2780  000356  A0D8               	btfss	status,0,c
  2781  000358  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;doprnt.c: 848: exp *= 3;
  2785  00035A  C089  F01D         	movff	__doprnt@exp,___wmul@multiplier
  2786  00035E  C08A  F01E         	movff	__doprnt@exp+1,___wmul@multiplier+1
  2787  000362  0E00               	movlw	0
  2788  000364  6E20               	movwf	___wmul@multiplicand+1,c
  2789  000366  0E03               	movlw	3
  2790  000368  6E1F               	movwf	___wmul@multiplicand,c
  2791  00036A  EC2A  F017         	call	___wmul	;wreg free
  2792  00036E  C01D  F089         	movff	?___wmul,__doprnt@exp
  2793  000372  C01E  F08A         	movff	?___wmul+1,__doprnt@exp+1
  2794                           
  2795                           ;doprnt.c: 849: exp /= 10;
  2796  000376  C089  F015         	movff	__doprnt@exp,___awdiv@dividend
  2797  00037A  C08A  F016         	movff	__doprnt@exp+1,___awdiv@dividend+1
  2798  00037E  0E00               	movlw	0
  2799  000380  6E18               	movwf	___awdiv@divisor+1,c
  2800  000382  0E0A               	movlw	10
  2801  000384  6E17               	movwf	___awdiv@divisor,c
  2802  000386  EC75  F012         	call	___awdiv	;wreg free
  2803  00038A  C015  F089         	movff	?___awdiv,__doprnt@exp
  2804  00038E  C016  F08A         	movff	?___awdiv+1,__doprnt@exp+1
  2805                           
  2806                           ;doprnt.c: 850: if(exp < 0)
  2807  000392  0100               	movlb	0	; () banked
  2808  000394  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2809  000396  0A80               	xorlw	128
  2810  000398  6EF3               	movwf	prodl,c
  2811  00039A  0E80               	movlw	128
  2812  00039C  5CF3               	subwf	prodl,w,c
  2813  00039E  0E00               	movlw	0
  2814  0003A0  B4D8               	btfsc	status,2,c
  2815  0003A2  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2816  0003A4  B0D8               	btfsc	status,0,c
  2817  0003A6  D004               	goto	l4693
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;doprnt.c: 851: exp--;
  2821  0003A8  0100               	movlb	0	; () banked
  2822  0003AA  0789               	decf	__doprnt@exp& (0+255),f,b
  2823  0003AC  A0D8               	btfss	status,0,c
  2824  0003AE  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2825  0003B0                     l4693:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;doprnt.c: 855: integ = scale(-exp);
  2829  0003B0  0100               	movlb	0	; () banked
  2830  0003B2  5189               	movf	__doprnt@exp& (0+255),w,b
  2831  0003B4  0800               	sublw	0
  2832  0003B6  ECB6  F009         	call	_scale
  2833  0003BA  C039  F082         	movff	?_scale,__doprnt@integ
  2834  0003BE  C03A  F083         	movff	?_scale+1,__doprnt@integ+1
  2835  0003C2  C03B  F084         	movff	?_scale+2,__doprnt@integ+2
  2836                           
  2837                           ;doprnt.c: 856: integ *= fval;
  2838  0003C6  C082  F02A         	movff	__doprnt@integ,___ftmul@f1
  2839  0003CA  C083  F02B         	movff	__doprnt@integ+1,___ftmul@f1+1
  2840  0003CE  C084  F02C         	movff	__doprnt@integ+2,___ftmul@f1+2
  2841  0003D2  C092  F02D         	movff	__doprnt@fval,___ftmul@f2
  2842  0003D6  C093  F02E         	movff	__doprnt@fval+1,___ftmul@f2+1
  2843  0003DA  C094  F02F         	movff	__doprnt@fval+2,___ftmul@f2+2
  2844  0003DE  EC72  F010         	call	___ftmul	;wreg free
  2845  0003E2  C02A  F082         	movff	?___ftmul,__doprnt@integ
  2846  0003E6  C02B  F083         	movff	?___ftmul+1,__doprnt@integ+1
  2847  0003EA  C02C  F084         	movff	?___ftmul+2,__doprnt@integ+2
  2848                           
  2849                           ;doprnt.c: 857: if(integ < 1.0)
  2850  0003EE  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2851  0003F2  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2852  0003F6  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2853  0003FA  0E00               	movlw	0
  2854  0003FC  6E12               	movwf	___ftge@ff2,c
  2855  0003FE  0E80               	movlw	128
  2856  000400  6E13               	movwf	___ftge@ff2+1,c
  2857  000402  0E3F               	movlw	63
  2858  000404  6E14               	movwf	___ftge@ff2+2,c
  2859  000406  EC5C  F013         	call	___ftge	;wreg free
  2860  00040A  B0D8               	btfsc	status,0,c
  2861  00040C  D005               	goto	l4701
  2862                           
  2863                           ;doprnt.c: 858: exp--;
  2864  00040E  0100               	movlb	0	; () banked
  2865  000410  0789               	decf	__doprnt@exp& (0+255),f,b
  2866  000412  A0D8               	btfss	status,0,c
  2867  000414  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  2868  000416  D013               	goto	l4705
  2869  000418                     l4701:
  2870                           
  2871                           ;doprnt.c: 859: else if(integ >= 10.0)
  2872  000418  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2873  00041C  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2874  000420  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2875  000424  0E00               	movlw	0
  2876  000426  6E12               	movwf	___ftge@ff2,c
  2877  000428  0E20               	movlw	32
  2878  00042A  6E13               	movwf	___ftge@ff2+1,c
  2879  00042C  0E41               	movlw	65
  2880  00042E  6E14               	movwf	___ftge@ff2+2,c
  2881  000430  EC5C  F013         	call	___ftge	;wreg free
  2882  000434  A0D8               	btfss	status,0,c
  2883  000436  D003               	goto	l4705
  2884                           
  2885                           ;doprnt.c: 860: exp++;
  2886  000438  0100               	movlb	0	; () banked
  2887  00043A  4B89               	infsnz	__doprnt@exp& (0+255),f,b
  2888  00043C  2B8A               	incf	(__doprnt@exp+1)& (0+255),f,b
  2889  00043E                     l4705:
  2890                           
  2891                           ;doprnt.c: 861: }
  2892                           ;doprnt.c: 1121: if(prec <= 12)
  2893  00043E  0100               	movlb	0	; () banked
  2894  000440  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  2895  000442  0A80               	xorlw	128
  2896  000444  6EF3               	movwf	prodl,c
  2897  000446  0E80               	movlw	128
  2898  000448  5CF3               	subwf	prodl,w,c
  2899  00044A  0E0D               	movlw	13
  2900  00044C  B4D8               	btfsc	status,2,c
  2901  00044E  5D85               	subwf	__doprnt@prec& (0+255),w,b
  2902  000450  B0D8               	btfsc	status,0,c
  2903  000452  D018               	goto	l4709
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 1122: fval += fround(prec);
  2907  000454  C092  F017         	movff	__doprnt@fval,___ftadd@f1
  2908  000458  C093  F018         	movff	__doprnt@fval+1,___ftadd@f1+1
  2909  00045C  C094  F019         	movff	__doprnt@fval+2,___ftadd@f1+2
  2910  000460  0100               	movlb	0	; () banked
  2911  000462  5185               	movf	__doprnt@prec& (0+255),w,b
  2912  000464  ECBA  F00B         	call	_fround
  2913  000468  C039  F01A         	movff	?_fround,___ftadd@f2
  2914  00046C  C03A  F01B         	movff	?_fround+1,___ftadd@f2+1
  2915  000470  C03B  F01C         	movff	?_fround+2,___ftadd@f2+2
  2916  000474  ECE3  F00C         	call	___ftadd	;wreg free
  2917  000478  C017  F092         	movff	?___ftadd,__doprnt@fval
  2918  00047C  C018  F093         	movff	?___ftadd+1,__doprnt@fval+1
  2919  000480  C019  F094         	movff	?___ftadd+2,__doprnt@fval+2
  2920  000484                     l4709:
  2921                           
  2922                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2923  000484  0100               	movlb	0	; () banked
  2924  000486  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2925  000488  0A80               	xorlw	128
  2926  00048A  6EF3               	movwf	prodl,c
  2927  00048C  0E80               	movlw	128
  2928  00048E  5CF3               	subwf	prodl,w,c
  2929  000490  0E0A               	movlw	10
  2930  000492  B4D8               	btfsc	status,2,c
  2931  000494  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2932  000496  B0D8               	btfsc	status,0,c
  2933  000498  D029               	goto	l4717
  2934                           
  2935                           ; BSR set to: 0
  2936  00049A  0E7F               	movlw	127
  2937  00049C  0100               	movlb	0	; () banked
  2938  00049E  1594               	andwf	(__doprnt@fval+2)& (0+255),w,b
  2939  0004A0  0100               	movlb	0	; () banked
  2940  0004A2  1193               	iorwf	(__doprnt@fval+1)& (0+255),w,b
  2941  0004A4  0100               	movlb	0	; () banked
  2942  0004A6  1192               	iorwf	__doprnt@fval& (0+255),w,b
  2943  0004A8  B4D8               	btfsc	status,2,c
  2944  0004AA  D06C               	goto	l4733
  2945                           
  2946                           ; BSR set to: 0
  2947  0004AC  C092  F040         	movff	__doprnt@fval,___fttol@f1
  2948  0004B0  C093  F041         	movff	__doprnt@fval+1,___fttol@f1+1
  2949  0004B4  C094  F042         	movff	__doprnt@fval+2,___fttol@f1+2
  2950  0004B8  EC3E  F00F         	call	___fttol	;wreg free
  2951  0004BC  C040  F06C         	movff	?___fttol,??__doprnt
  2952  0004C0  C041  F06D         	movff	?___fttol+1,??__doprnt+1
  2953  0004C4  C042  F06E         	movff	?___fttol+2,??__doprnt+2
  2954  0004C8  C043  F06F         	movff	?___fttol+3,??__doprnt+3
  2955  0004CC  0100               	movlb	0	; () banked
  2956  0004CE  516F               	movf	(??__doprnt+3)& (0+255),w,b
  2957  0004D0  116C               	iorwf	??__doprnt& (0+255),w,b
  2958  0004D2  116D               	iorwf	(??__doprnt+1)& (0+255),w,b
  2959  0004D4  116E               	iorwf	(??__doprnt+2)& (0+255),w,b
  2960  0004D6  A4D8               	btfss	status,2,c
  2961  0004D8  D055               	goto	l4733
  2962                           
  2963                           ; BSR set to: 0
  2964  0004DA  0100               	movlb	0	; () banked
  2965  0004DC  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  2966  0004DE  0A80               	xorlw	128
  2967  0004E0  0F80               	addlw	-128
  2968  0004E2  0E02               	movlw	2
  2969  0004E4  B4D8               	btfsc	status,2,c
  2970  0004E6  5D89               	subwf	__doprnt@exp& (0+255),w,b
  2971  0004E8  A0D8               	btfss	status,0,c
  2972  0004EA  D04C               	goto	l4733
  2973  0004EC                     l4717:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2977  0004EC  C082  F00F         	movff	__doprnt@integ,___ftge@ff1
  2978  0004F0  C083  F010         	movff	__doprnt@integ+1,___ftge@ff1+1
  2979  0004F4  C084  F011         	movff	__doprnt@integ+2,___ftge@ff1+2
  2980  0004F8  0E70               	movlw	112
  2981  0004FA  6E12               	movwf	___ftge@ff2,c
  2982  0004FC  0E89               	movlw	137
  2983  0004FE  6E13               	movwf	___ftge@ff2+1,c
  2984  000500  0E40               	movlw	64
  2985  000502  6E14               	movwf	___ftge@ff2+2,c
  2986  000504  EC5C  F013         	call	___ftge	;wreg free
  2987  000508  B0D8               	btfsc	status,0,c
  2988  00050A  D003               	goto	l4721
  2989                           
  2990                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2991  00050C  0100               	movlb	0	; () banked
  2992  00050E  0EF7               	movlw	247
  2993  000510  D002               	goto	L1
  2994  000512                     l4721:
  2995                           
  2996                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2997  000512  0100               	movlb	0	; () banked
  2998  000514  0EF8               	movlw	248
  2999  000516                     L1:
  3000  000516  0100               	movlb	0	; () banked
  3001  000518  2789               	addwf	__doprnt@exp& (0+255),f,b
  3002  00051A  0EFF               	movlw	255
  3003  00051C  0100               	movlb	0	; () banked
  3004  00051E  238A               	addwfc	(__doprnt@exp+1)& (0+255),f,b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;doprnt.c: 1133: }
  3008                           ;doprnt.c: 1134: integ = scale(exp);
  3009                           
  3010                           ; BSR set to: 0
  3011  000520  0100               	movlb	0	; () banked
  3012  000522  5189               	movf	__doprnt@exp& (0+255),w,b
  3013  000524  ECB6  F009         	call	_scale
  3014  000528  C039  F082         	movff	?_scale,__doprnt@integ
  3015  00052C  C03A  F083         	movff	?_scale+1,__doprnt@integ+1
  3016  000530  C03B  F084         	movff	?_scale+2,__doprnt@integ+2
  3017                           
  3018                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3019  000534  C092  F00F         	movff	__doprnt@fval,__tdiv_to_l_@f1
  3020  000538  C093  F010         	movff	__doprnt@fval+1,__tdiv_to_l_@f1+1
  3021  00053C  C094  F011         	movff	__doprnt@fval+2,__tdiv_to_l_@f1+2
  3022  000540  C082  F012         	movff	__doprnt@integ,__tdiv_to_l_@f2
  3023  000544  C083  F013         	movff	__doprnt@integ+1,__tdiv_to_l_@f2+1
  3024  000548  C084  F014         	movff	__doprnt@integ+2,__tdiv_to_l_@f2+2
  3025  00054C  ECD9  F00F         	call	__tdiv_to_l_	;wreg free
  3026  000550  C00F  F075         	movff	?__tdiv_to_l_,__doprnt$1972
  3027  000554  C010  F076         	movff	?__tdiv_to_l_+1,__doprnt$1972+1
  3028  000558  C011  F077         	movff	?__tdiv_to_l_+2,__doprnt$1972+2
  3029  00055C  C012  F078         	movff	?__tdiv_to_l_+3,__doprnt$1972+3
  3030  000560  C075  F08B         	movff	__doprnt$1972,__doprnt@_val
  3031  000564  C076  F08C         	movff	__doprnt$1972+1,__doprnt@_val+1
  3032  000568  C077  F08D         	movff	__doprnt$1972+2,__doprnt@_val+2
  3033  00056C  C078  F08E         	movff	__doprnt$1972+3,__doprnt@_val+3
  3034                           
  3035                           ;doprnt.c: 1138: fval = 0.0;
  3036  000570  0E00               	movlw	0
  3037  000572  0100               	movlb	0	; () banked
  3038  000574  6F92               	movwf	__doprnt@fval& (0+255),b
  3039  000576  0E00               	movlw	0
  3040  000578  0100               	movlb	0	; () banked
  3041  00057A  6F93               	movwf	(__doprnt@fval+1)& (0+255),b
  3042  00057C  0E00               	movlw	0
  3043  00057E  0100               	movlb	0	; () banked
  3044  000580  6F94               	movwf	(__doprnt@fval+2)& (0+255),b
  3045                           
  3046                           ;doprnt.c: 1139: } else {
  3047  000582  D034               	goto	l4737
  3048  000584                     l4733:
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3052  000584  C092  F040         	movff	__doprnt@fval,___fttol@f1
  3053  000588  C093  F041         	movff	__doprnt@fval+1,___fttol@f1+1
  3054  00058C  C094  F042         	movff	__doprnt@fval+2,___fttol@f1+2
  3055  000590  EC3E  F00F         	call	___fttol	;wreg free
  3056  000594  C040  F08B         	movff	?___fttol,__doprnt@_val
  3057  000598  C041  F08C         	movff	?___fttol+1,__doprnt@_val+1
  3058  00059C  C042  F08D         	movff	?___fttol+2,__doprnt@_val+2
  3059  0005A0  C043  F08E         	movff	?___fttol+3,__doprnt@_val+3
  3060                           
  3061                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3062  0005A4  C092  F023         	movff	__doprnt@fval,___ftsub@f1
  3063  0005A8  C093  F024         	movff	__doprnt@fval+1,___ftsub@f1+1
  3064  0005AC  C094  F025         	movff	__doprnt@fval+2,___ftsub@f1+2
  3065  0005B0  C08B  F017         	movff	__doprnt@_val,___lltoft@c
  3066  0005B4  C08C  F018         	movff	__doprnt@_val+1,___lltoft@c+1
  3067  0005B8  C08D  F019         	movff	__doprnt@_val+2,___lltoft@c+2
  3068  0005BC  C08E  F01A         	movff	__doprnt@_val+3,___lltoft@c+3
  3069  0005C0  ECA4  F015         	call	___lltoft	;wreg free
  3070  0005C4  C017  F026         	movff	?___lltoft,___ftsub@f2
  3071  0005C8  C018  F027         	movff	?___lltoft+1,___ftsub@f2+1
  3072  0005CC  C019  F028         	movff	?___lltoft+2,___ftsub@f2+2
  3073  0005D0  ECCC  F016         	call	___ftsub	;wreg free
  3074  0005D4  C023  F092         	movff	?___ftsub,__doprnt@fval
  3075  0005D8  C024  F093         	movff	?___ftsub+1,__doprnt@fval+1
  3076  0005DC  C025  F094         	movff	?___ftsub+2,__doprnt@fval+2
  3077                           
  3078                           ;doprnt.c: 1142: exp = 0;
  3079  0005E0  0E00               	movlw	0
  3080  0005E2  0100               	movlb	0	; () banked
  3081  0005E4  6F8A               	movwf	(__doprnt@exp+1)& (0+255),b
  3082  0005E6  0E00               	movlw	0
  3083  0005E8  0100               	movlb	0	; () banked
  3084  0005EA  6F89               	movwf	__doprnt@exp& (0+255),b
  3085  0005EC                     l4737:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 1143: }
  3089                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3090  0005EC  0E01               	movlw	1
  3091  0005EE  0100               	movlb	0	; () banked
  3092  0005F0  6F95               	movwf	__doprnt@c& (0+255),b
  3093  0005F2                     
  3094                           ; BSR set to: 0
  3095  0005F2  0100               	movlb	0	; () banked
  3096  0005F4  5195               	movf	__doprnt@c& (0+255),w,b
  3097  0005F6  0A0A               	xorlw	10
  3098  0005F8  B4D8               	btfsc	status,2,c
  3099  0005FA  D01E               	goto	l4751
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3103                           
  3104                           ; BSR set to: 0
  3105                           
  3106                           ; BSR set to: 0
  3107  0005FC  0100               	movlb	0	; () banked
  3108  0005FE  5195               	movf	__doprnt@c& (0+255),w,b
  3109  000600  0D04               	mullw	4
  3110  000602  0ECD               	movlw	low _dpowers
  3111  000604  24F3               	addwf	prodl,w,c
  3112  000606  6EF6               	movwf	tblptrl,c
  3113  000608  0E7E               	movlw	high _dpowers
  3114  00060A  20F4               	addwfc	prodh,w,c
  3115  00060C  6EF7               	movwf	tblptrh,c
  3116  00060E                     	if	0	;There are less than 3 active tblptr bytes
  3117  00060E                     	endif
  3118  00060E  0009               	tblrd		*+
  3119  000610  50F5               	movf	tablat,w,c
  3120  000612  0100               	movlb	0	; () banked
  3121  000614  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  3122  000616  0009               	tblrd		*+
  3123  000618  50F5               	movf	tablat,w,c
  3124  00061A  0100               	movlb	0	; () banked
  3125  00061C  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  3126  00061E  0009               	tblrd		*+
  3127  000620  50F5               	movf	tablat,w,c
  3128  000622  0100               	movlb	0	; () banked
  3129  000624  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  3130  000626  0009               	tblrd		*+
  3131  000628  50F5               	movf	tablat,w,c
  3132  00062A  0100               	movlb	0	; () banked
  3133  00062C  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  3134  00062E  A0D8               	btfss	status,0,c
  3135  000630  D003               	goto	l4751
  3136                           
  3137                           ; BSR set to: 0
  3138                           
  3139                           ; BSR set to: 0
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;doprnt.c: 1147: break;
  3143  000632  0100               	movlb	0	; () banked
  3144  000634  2B95               	incf	__doprnt@c& (0+255),f,b
  3145  000636  D7DD               	goto	L2
  3146  000638                     l4751:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;doprnt.c: 1151: width -= prec + c + exp;
  3150  000638  0100               	movlb	0	; () banked
  3151  00063A  C095  F06C         	movff	__doprnt@c,??__doprnt
  3152  00063E  0100               	movlb	0	; () banked
  3153  000640  6B6D               	clrf	(??__doprnt+1)& (0+255),b
  3154  000642  BF6C               	btfsc	??__doprnt& (0+255),7,b
  3155  000644  076D               	decf	(??__doprnt+1)& (0+255),f,b
  3156  000646  0100               	movlb	0	; () banked
  3157  000648  5185               	movf	__doprnt@prec& (0+255),w,b
  3158  00064A  0100               	movlb	0	; () banked
  3159  00064C  276C               	addwf	??__doprnt& (0+255),f,b
  3160  00064E  0100               	movlb	0	; () banked
  3161  000650  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3162  000652  0100               	movlb	0	; () banked
  3163  000654  236D               	addwfc	(??__doprnt+1)& (0+255),f,b
  3164  000656  0100               	movlb	0	; () banked
  3165  000658  5189               	movf	__doprnt@exp& (0+255),w,b
  3166  00065A  0100               	movlb	0	; () banked
  3167  00065C  276C               	addwf	??__doprnt& (0+255),f,b
  3168  00065E  0100               	movlb	0	; () banked
  3169  000660  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  3170  000662  0100               	movlb	0	; () banked
  3171  000664  236D               	addwfc	(??__doprnt+1)& (0+255),f,b
  3172  000666  0100               	movlb	0	; () banked
  3173  000668  516C               	movf	??__doprnt& (0+255),w,b
  3174  00066A  0100               	movlb	0	; () banked
  3175  00066C  5F87               	subwf	__doprnt@width& (0+255),f,b
  3176  00066E  0100               	movlb	0	; () banked
  3177  000670  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3178  000672  0100               	movlb	0	; () banked
  3179  000674  5B88               	subwfb	(__doprnt@width+1)& (0+255),f,b
  3180                           
  3181                           ;doprnt.c: 1152: if(
  3182                           ;doprnt.c: 1156: prec)
  3183  000676  0100               	movlb	0	; () banked
  3184  000678  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3185  00067A  1185               	iorwf	__doprnt@prec& (0+255),w,b
  3186  00067C  B4D8               	btfsc	status,2,c
  3187  00067E  D004               	goto	l4755
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;doprnt.c: 1157: width--;
  3191  000680  0100               	movlb	0	; () banked
  3192  000682  0787               	decf	__doprnt@width& (0+255),f,b
  3193  000684  A0D8               	btfss	status,0,c
  3194  000686  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3195  000688                     l4755:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;doprnt.c: 1158: if(flag & 0x03)
  3199  000688  0E03               	movlw	3
  3200  00068A  0100               	movlb	0	; () banked
  3201  00068C  1590               	andwf	__doprnt@flag& (0+255),w,b
  3202  00068E  0100               	movlb	0	; () banked
  3203  000690  6F6C               	movwf	??__doprnt& (0+255),b
  3204  000692  0E00               	movlw	0
  3205  000694  0100               	movlb	0	; () banked
  3206  000696  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3207  000698  0100               	movlb	0	; () banked
  3208  00069A  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3209  00069C  0100               	movlb	0	; () banked
  3210  00069E  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3211  0006A0  116C               	iorwf	??__doprnt& (0+255),w,b
  3212  0006A2  B4D8               	btfsc	status,2,c
  3213  0006A4  D004               	goto	l4759
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;doprnt.c: 1159: width--;
  3217  0006A6  0100               	movlb	0	; () banked
  3218  0006A8  0787               	decf	__doprnt@width& (0+255),f,b
  3219  0006AA  A0D8               	btfss	status,0,c
  3220  0006AC  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3221  0006AE                     l4759:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;doprnt.c: 1162: if(flag & 0x04) {
  3225  0006AE  0100               	movlb	0	; () banked
  3226  0006B0  A590               	btfss	__doprnt@flag& (0+255),2,b
  3227  0006B2  D0CC               	goto	l4793
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;doprnt.c: 1166: if(flag & 0x03)
  3231  0006B4  0E03               	movlw	3
  3232  0006B6  0100               	movlb	0	; () banked
  3233  0006B8  1590               	andwf	__doprnt@flag& (0+255),w,b
  3234  0006BA  0100               	movlb	0	; () banked
  3235  0006BC  6F6C               	movwf	??__doprnt& (0+255),b
  3236  0006BE  0E00               	movlw	0
  3237  0006C0  0100               	movlb	0	; () banked
  3238  0006C2  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3239  0006C4  0100               	movlb	0	; () banked
  3240  0006C6  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3241  0006C8  0100               	movlb	0	; () banked
  3242  0006CA  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3243  0006CC  116C               	iorwf	??__doprnt& (0+255),w,b
  3244  0006CE  B4D8               	btfsc	status,2,c
  3245  0006D0  D075               	goto	l4781
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;doprnt.c: 1168: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3249  0006D2  0100               	movlb	0	; () banked
  3250  0006D4  EE20 F002          	lfsr	2,2
  3251  0006D8  0100               	movlb	0	; () banked
  3252  0006DA  5166               	movf	__doprnt@pb& (0+255),w,b
  3253  0006DC  26D9               	addwf	fsr2l,f,c
  3254  0006DE  0100               	movlb	0	; () banked
  3255  0006E0  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3256  0006E2  22DA               	addwfc	fsr2h,f,c
  3257  0006E4  50DE               	movf	postinc2,w,c
  3258  0006E6  10DD               	iorwf	postdec2,w,c
  3259  0006E8  B4D8               	btfsc	status,2,c
  3260  0006EA  D016               	goto	l4767
  3261                           
  3262                           ; BSR set to: 0
  3263  0006EC  0100               	movlb	0	; () banked
  3264  0006EE  EE20 F002          	lfsr	2,2
  3265  0006F2  0100               	movlb	0	; () banked
  3266  0006F4  5166               	movf	__doprnt@pb& (0+255),w,b
  3267  0006F6  26D9               	addwf	fsr2l,f,c
  3268  0006F8  0100               	movlb	0	; () banked
  3269  0006FA  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3270  0006FC  22DA               	addwfc	fsr2h,f,c
  3271  0006FE  D801               	call	u5658
  3272  000700  D05D               	goto	l4781
  3273  000702                     u5658:
  3274  000702  0005               	push	
  3275  000704  6EFA               	movwf	pclath,c
  3276  000706  50DE               	movf	postinc2,w,c
  3277  000708  6EFD               	movwf	tosl,c
  3278  00070A  50DE               	movf	postinc2,w,c
  3279  00070C  6EFE               	movwf	tosh,c
  3280  00070E  50F8               	movf	tblptru,w,c
  3281  000710  6EFF               	movwf	tosu,c
  3282  000712  50FA               	movf	pclath,w,c
  3283  000714  0E2D               	movlw	45
  3284  000716  0012               	return		;indir
  3285  000718                     l4767:
  3286  000718  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3287  00071C  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3288  000720  CFDE F06C          	movff	postinc2,??__doprnt
  3289  000724  CFDD F06D          	movff	postdec2,??__doprnt+1
  3290  000728  C06C  FFD9         	movff	??__doprnt,fsr2l
  3291  00072C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3292  000730  0E2D               	movlw	45
  3293  000732  6EDF               	movwf	indf2,c
  3294  000734  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3295  000738  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3296  00073C  2ADE               	incf	postinc2,f,c
  3297  00073E  0E00               	movlw	0
  3298  000740  22DD               	addwfc	postdec2,f,c
  3299  000742  D03C               	goto	l4781
  3300  000744                     l4771:
  3301                           
  3302                           ;doprnt.c: 1178: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3303  000744  0100               	movlb	0	; () banked
  3304  000746  EE20 F002          	lfsr	2,2
  3305  00074A  0100               	movlb	0	; () banked
  3306  00074C  5166               	movf	__doprnt@pb& (0+255),w,b
  3307  00074E  26D9               	addwf	fsr2l,f,c
  3308  000750  0100               	movlb	0	; () banked
  3309  000752  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3310  000754  22DA               	addwfc	fsr2h,f,c
  3311  000756  50DE               	movf	postinc2,w,c
  3312  000758  10DD               	iorwf	postdec2,w,c
  3313  00075A  B4D8               	btfsc	status,2,c
  3314  00075C  D016               	goto	l4775
  3315                           
  3316                           ; BSR set to: 0
  3317  00075E  0100               	movlb	0	; () banked
  3318  000760  EE20 F002          	lfsr	2,2
  3319  000764  0100               	movlb	0	; () banked
  3320  000766  5166               	movf	__doprnt@pb& (0+255),w,b
  3321  000768  26D9               	addwf	fsr2l,f,c
  3322  00076A  0100               	movlb	0	; () banked
  3323  00076C  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3324  00076E  22DA               	addwfc	fsr2h,f,c
  3325  000770  D801               	call	u5678
  3326  000772  D020               	goto	l4779
  3327  000774                     u5678:
  3328  000774  0005               	push	
  3329  000776  6EFA               	movwf	pclath,c
  3330  000778  50DE               	movf	postinc2,w,c
  3331  00077A  6EFD               	movwf	tosl,c
  3332  00077C  50DE               	movf	postinc2,w,c
  3333  00077E  6EFE               	movwf	tosh,c
  3334  000780  50F8               	movf	tblptru,w,c
  3335  000782  6EFF               	movwf	tosu,c
  3336  000784  50FA               	movf	pclath,w,c
  3337  000786  0E30               	movlw	48
  3338  000788  0012               	return		;indir
  3339  00078A                     l4775:
  3340  00078A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3341  00078E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3342  000792  CFDE F06C          	movff	postinc2,??__doprnt
  3343  000796  CFDD F06D          	movff	postdec2,??__doprnt+1
  3344  00079A  C06C  FFD9         	movff	??__doprnt,fsr2l
  3345  00079E  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3346  0007A2  0E30               	movlw	48
  3347  0007A4  6EDF               	movwf	indf2,c
  3348  0007A6  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3349  0007AA  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3350  0007AE  2ADE               	incf	postinc2,f,c
  3351  0007B0  0E00               	movlw	0
  3352  0007B2  22DD               	addwfc	postdec2,f,c
  3353  0007B4                     l4779:
  3354                           
  3355                           ;doprnt.c: 1179: width--;
  3356  0007B4  0100               	movlb	0	; () banked
  3357  0007B6  0787               	decf	__doprnt@width& (0+255),f,b
  3358  0007B8  A0D8               	btfss	status,0,c
  3359  0007BA  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3360  0007BC                     l4781:
  3361  0007BC  0100               	movlb	0	; () banked
  3362  0007BE  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  3363  0007C0  0A80               	xorlw	128
  3364  0007C2  6EF3               	movwf	prodl,c
  3365  0007C4  0E80               	movlw	128
  3366  0007C6  5CF3               	subwf	prodl,w,c
  3367  0007C8  0E01               	movlw	1
  3368  0007CA  B4D8               	btfsc	status,2,c
  3369  0007CC  5D87               	subwf	__doprnt@width& (0+255),w,b
  3370  0007CE  A0D8               	btfss	status,0,c
  3371  0007D0  D105               	goto	l4815
  3372  0007D2  D7B8               	goto	l4771
  3373  0007D4                     l4783:
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;doprnt.c: 1190: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  3377  0007D4  0100               	movlb	0	; () banked
  3378  0007D6  EE20 F002          	lfsr	2,2
  3379  0007DA  0100               	movlb	0	; () banked
  3380  0007DC  5166               	movf	__doprnt@pb& (0+255),w,b
  3381  0007DE  26D9               	addwf	fsr2l,f,c
  3382  0007E0  0100               	movlb	0	; () banked
  3383  0007E2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3384  0007E4  22DA               	addwfc	fsr2h,f,c
  3385  0007E6  50DE               	movf	postinc2,w,c
  3386  0007E8  10DD               	iorwf	postdec2,w,c
  3387  0007EA  B4D8               	btfsc	status,2,c
  3388  0007EC  D016               	goto	l4787
  3389                           
  3390                           ; BSR set to: 0
  3391  0007EE  0100               	movlb	0	; () banked
  3392  0007F0  EE20 F002          	lfsr	2,2
  3393  0007F4  0100               	movlb	0	; () banked
  3394  0007F6  5166               	movf	__doprnt@pb& (0+255),w,b
  3395  0007F8  26D9               	addwf	fsr2l,f,c
  3396  0007FA  0100               	movlb	0	; () banked
  3397  0007FC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3398  0007FE  22DA               	addwfc	fsr2h,f,c
  3399  000800  D801               	call	u5708
  3400  000802  D020               	goto	l4791
  3401  000804                     u5708:
  3402  000804  0005               	push	
  3403  000806  6EFA               	movwf	pclath,c
  3404  000808  50DE               	movf	postinc2,w,c
  3405  00080A  6EFD               	movwf	tosl,c
  3406  00080C  50DE               	movf	postinc2,w,c
  3407  00080E  6EFE               	movwf	tosh,c
  3408  000810  50F8               	movf	tblptru,w,c
  3409  000812  6EFF               	movwf	tosu,c
  3410  000814  50FA               	movf	pclath,w,c
  3411  000816  0E20               	movlw	32
  3412  000818  0012               	return		;indir
  3413  00081A                     l4787:
  3414  00081A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3415  00081E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3416  000822  CFDE F06C          	movff	postinc2,??__doprnt
  3417  000826  CFDD F06D          	movff	postdec2,??__doprnt+1
  3418  00082A  C06C  FFD9         	movff	??__doprnt,fsr2l
  3419  00082E  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3420  000832  0E20               	movlw	32
  3421  000834  6EDF               	movwf	indf2,c
  3422  000836  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3423  00083A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3424  00083E  2ADE               	incf	postinc2,f,c
  3425  000840  0E00               	movlw	0
  3426  000842  22DD               	addwfc	postdec2,f,c
  3427  000844                     l4791:
  3428                           
  3429                           ;doprnt.c: 1191: width--;
  3430  000844  0100               	movlb	0	; () banked
  3431  000846  0787               	decf	__doprnt@width& (0+255),f,b
  3432  000848  A0D8               	btfss	status,0,c
  3433  00084A  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  3434  00084C                     l4793:
  3435                           
  3436                           ; BSR set to: 0
  3437  00084C  0100               	movlb	0	; () banked
  3438  00084E  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  3439  000850  0A80               	xorlw	128
  3440  000852  6EF3               	movwf	prodl,c
  3441  000854  0E80               	movlw	128
  3442  000856  5CF3               	subwf	prodl,w,c
  3443  000858  0E01               	movlw	1
  3444  00085A  B4D8               	btfsc	status,2,c
  3445  00085C  5D87               	subwf	__doprnt@width& (0+255),w,b
  3446  00085E  B0D8               	btfsc	status,0,c
  3447  000860  D7B9               	goto	l4783
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;doprnt.c: 1192: }
  3451                           ;doprnt.c: 1197: if(flag & 0x03)
  3452                           
  3453                           ; BSR set to: 0
  3454  000862  0E03               	movlw	3
  3455  000864  0100               	movlb	0	; () banked
  3456  000866  1590               	andwf	__doprnt@flag& (0+255),w,b
  3457  000868  0100               	movlb	0	; () banked
  3458  00086A  6F6C               	movwf	??__doprnt& (0+255),b
  3459  00086C  0E00               	movlw	0
  3460  00086E  0100               	movlb	0	; () banked
  3461  000870  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  3462  000872  0100               	movlb	0	; () banked
  3463  000874  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  3464  000876  0100               	movlb	0	; () banked
  3465  000878  516D               	movf	(??__doprnt+1)& (0+255),w,b
  3466  00087A  116C               	iorwf	??__doprnt& (0+255),w,b
  3467  00087C  B4D8               	btfsc	status,2,c
  3468  00087E  D0AE               	goto	l4815
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;doprnt.c: 1199: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3472  000880  0100               	movlb	0	; () banked
  3473  000882  EE20 F002          	lfsr	2,2
  3474  000886  0100               	movlb	0	; () banked
  3475  000888  5166               	movf	__doprnt@pb& (0+255),w,b
  3476  00088A  26D9               	addwf	fsr2l,f,c
  3477  00088C  0100               	movlb	0	; () banked
  3478  00088E  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3479  000890  22DA               	addwfc	fsr2h,f,c
  3480  000892  50DE               	movf	postinc2,w,c
  3481  000894  10DD               	iorwf	postdec2,w,c
  3482  000896  B4D8               	btfsc	status,2,c
  3483  000898  D016               	goto	l4801
  3484                           
  3485                           ; BSR set to: 0
  3486  00089A  0100               	movlb	0	; () banked
  3487  00089C  EE20 F002          	lfsr	2,2
  3488  0008A0  0100               	movlb	0	; () banked
  3489  0008A2  5166               	movf	__doprnt@pb& (0+255),w,b
  3490  0008A4  26D9               	addwf	fsr2l,f,c
  3491  0008A6  0100               	movlb	0	; () banked
  3492  0008A8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3493  0008AA  22DA               	addwfc	fsr2h,f,c
  3494  0008AC  D801               	call	u5748
  3495  0008AE  D096               	goto	l4815
  3496  0008B0                     u5748:
  3497  0008B0  0005               	push	
  3498  0008B2  6EFA               	movwf	pclath,c
  3499  0008B4  50DE               	movf	postinc2,w,c
  3500  0008B6  6EFD               	movwf	tosl,c
  3501  0008B8  50DE               	movf	postinc2,w,c
  3502  0008BA  6EFE               	movwf	tosh,c
  3503  0008BC  50F8               	movf	tblptru,w,c
  3504  0008BE  6EFF               	movwf	tosu,c
  3505  0008C0  50FA               	movf	pclath,w,c
  3506  0008C2  0E2D               	movlw	45
  3507  0008C4  0012               	return		;indir
  3508  0008C6                     l4801:
  3509  0008C6  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3510  0008CA  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3511  0008CE  CFDE F06C          	movff	postinc2,??__doprnt
  3512  0008D2  CFDD F06D          	movff	postdec2,??__doprnt+1
  3513  0008D6  C06C  FFD9         	movff	??__doprnt,fsr2l
  3514  0008DA  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3515  0008DE  0E2D               	movlw	45
  3516  0008E0  D075               	goto	L3
  3517  0008E2                     l4805:
  3518                           
  3519                           ;doprnt.c: 1209: {
  3520                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3521  0008E2  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  3522  0008E6  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  3523  0008EA  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  3524  0008EE  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  3525  0008F2  0100               	movlb	0	; () banked
  3526  0008F4  5195               	movf	__doprnt@c& (0+255),w,b
  3527  0008F6  0D04               	mullw	4
  3528  0008F8  0ECD               	movlw	low _dpowers
  3529  0008FA  24F3               	addwf	prodl,w,c
  3530  0008FC  6EF6               	movwf	tblptrl,c
  3531  0008FE  0E7E               	movlw	high _dpowers
  3532  000900  20F4               	addwfc	prodh,w,c
  3533  000902  6EF7               	movwf	tblptrh,c
  3534  000904                     	if	0	;There are less than 3 active tblptr bytes
  3535  000904                     	endif
  3536  000904  0009               	tblrd		*+
  3537  000906  CFF5 F013          	movff	tablat,___lldiv@divisor
  3538  00090A  0009               	tblrd		*+
  3539  00090C  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3540  000910  0009               	tblrd		*+
  3541  000912  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3542  000916  000A               	tblrd		*-
  3543  000918  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3544  00091C  EC2B  F014         	call	___lldiv
  3545  000920  C00F  F07A         	movff	?___lldiv,__doprnt@vd
  3546  000924  C010  F07B         	movff	?___lldiv+1,__doprnt@vd+1
  3547  000928  C011  F07C         	movff	?___lldiv+2,__doprnt@vd+2
  3548  00092C  C012  F07D         	movff	?___lldiv+3,__doprnt@vd+3
  3549                           
  3550                           ;doprnt.c: 1211: vd %= 10;
  3551  000930  C07A  F01C         	movff	__doprnt@vd,___llmod@dividend
  3552  000934  C07B  F01D         	movff	__doprnt@vd+1,___llmod@dividend+1
  3553  000938  C07C  F01E         	movff	__doprnt@vd+2,___llmod@dividend+2
  3554  00093C  C07D  F01F         	movff	__doprnt@vd+3,___llmod@dividend+3
  3555  000940  0E0A               	movlw	10
  3556  000942  6E20               	movwf	___llmod@divisor,c
  3557  000944  0E00               	movlw	0
  3558  000946  6E21               	movwf	___llmod@divisor+1,c
  3559  000948  0E00               	movlw	0
  3560  00094A  6E22               	movwf	___llmod@divisor+2,c
  3561  00094C  0E00               	movlw	0
  3562  00094E  6E23               	movwf	___llmod@divisor+3,c
  3563  000950  ECDD  F014         	call	___llmod	;wreg free
  3564  000954  C01C  F07A         	movff	?___llmod,__doprnt@vd
  3565  000958  C01D  F07B         	movff	?___llmod+1,__doprnt@vd+1
  3566  00095C  C01E  F07C         	movff	?___llmod+2,__doprnt@vd+2
  3567  000960  C01F  F07D         	movff	?___llmod+3,__doprnt@vd+3
  3568                           
  3569                           ;doprnt.c: 1212: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
  3570  000964  0100               	movlb	0	; () banked
  3571  000966  EE20 F002          	lfsr	2,2
  3572  00096A  0100               	movlb	0	; () banked
  3573  00096C  5166               	movf	__doprnt@pb& (0+255),w,b
  3574  00096E  26D9               	addwf	fsr2l,f,c
  3575  000970  0100               	movlb	0	; () banked
  3576  000972  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3577  000974  22DA               	addwfc	fsr2h,f,c
  3578  000976  50DE               	movf	postinc2,w,c
  3579  000978  10DD               	iorwf	postdec2,w,c
  3580  00097A  B4D8               	btfsc	status,2,c
  3581  00097C  D018               	goto	l4813
  3582                           
  3583                           ; BSR set to: 0
  3584  00097E  0100               	movlb	0	; () banked
  3585  000980  EE20 F002          	lfsr	2,2
  3586  000984  0100               	movlb	0	; () banked
  3587  000986  5166               	movf	__doprnt@pb& (0+255),w,b
  3588  000988  26D9               	addwf	fsr2l,f,c
  3589  00098A  0100               	movlb	0	; () banked
  3590  00098C  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3591  00098E  22DA               	addwfc	fsr2h,f,c
  3592  000990  D801               	call	u5768
  3593  000992  D024               	goto	l4815
  3594  000994                     u5768:
  3595  000994  0005               	push	
  3596  000996  6EFA               	movwf	pclath,c
  3597  000998  50DE               	movf	postinc2,w,c
  3598  00099A  6EFD               	movwf	tosl,c
  3599  00099C  50DE               	movf	postinc2,w,c
  3600  00099E  6EFE               	movwf	tosh,c
  3601  0009A0  50F8               	movf	tblptru,w,c
  3602  0009A2  6EFF               	movwf	tosu,c
  3603  0009A4  50FA               	movf	pclath,w,c
  3604  0009A6  0100               	movlb	0	; () banked
  3605  0009A8  517A               	movf	__doprnt@vd& (0+255),w,b
  3606  0009AA  0F30               	addlw	48
  3607  0009AC  0012               	return		;indir
  3608  0009AE                     l4813:
  3609  0009AE  0100               	movlb	0	; () banked
  3610  0009B0  517A               	movf	__doprnt@vd& (0+255),w,b
  3611  0009B2  0F30               	addlw	48
  3612  0009B4  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3613  0009B8  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3614  0009BC  CFDE F06C          	movff	postinc2,??__doprnt
  3615  0009C0  CFDD F06D          	movff	postdec2,??__doprnt+1
  3616  0009C4  C06C  FFD9         	movff	??__doprnt,fsr2l
  3617  0009C8  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3618  0009CC                     L3:
  3619  0009CC  6EDF               	movwf	indf2,c
  3620  0009CE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3621  0009D2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3622  0009D6  2ADE               	incf	postinc2,f,c
  3623  0009D8  0E00               	movlw	0
  3624  0009DA  22DD               	addwfc	postdec2,f,c
  3625  0009DC                     l4815:
  3626  0009DC  0100               	movlb	0	; () banked
  3627  0009DE  0795               	decf	__doprnt@c& (0+255),f,b
  3628  0009E0  0100               	movlb	0	; () banked
  3629  0009E2  2995               	incf	__doprnt@c& (0+255),w,b
  3630  0009E4  B4D8               	btfsc	status,2,c
  3631  0009E6  D03D               	goto	l4827
  3632  0009E8  D77C               	goto	l4805
  3633  0009EA                     l4817:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;doprnt.c: 1217: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3637  0009EA  0100               	movlb	0	; () banked
  3638  0009EC  EE20 F002          	lfsr	2,2
  3639  0009F0  0100               	movlb	0	; () banked
  3640  0009F2  5166               	movf	__doprnt@pb& (0+255),w,b
  3641  0009F4  26D9               	addwf	fsr2l,f,c
  3642  0009F6  0100               	movlb	0	; () banked
  3643  0009F8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3644  0009FA  22DA               	addwfc	fsr2h,f,c
  3645  0009FC  50DE               	movf	postinc2,w,c
  3646  0009FE  10DD               	iorwf	postdec2,w,c
  3647  000A00  B4D8               	btfsc	status,2,c
  3648  000A02  D016               	goto	l4821
  3649                           
  3650                           ; BSR set to: 0
  3651  000A04  0100               	movlb	0	; () banked
  3652  000A06  EE20 F002          	lfsr	2,2
  3653  000A0A  0100               	movlb	0	; () banked
  3654  000A0C  5166               	movf	__doprnt@pb& (0+255),w,b
  3655  000A0E  26D9               	addwf	fsr2l,f,c
  3656  000A10  0100               	movlb	0	; () banked
  3657  000A12  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3658  000A14  22DA               	addwfc	fsr2h,f,c
  3659  000A16  D801               	call	u5798
  3660  000A18  D020               	goto	l4825
  3661  000A1A                     u5798:
  3662  000A1A  0005               	push	
  3663  000A1C  6EFA               	movwf	pclath,c
  3664  000A1E  50DE               	movf	postinc2,w,c
  3665  000A20  6EFD               	movwf	tosl,c
  3666  000A22  50DE               	movf	postinc2,w,c
  3667  000A24  6EFE               	movwf	tosh,c
  3668  000A26  50F8               	movf	tblptru,w,c
  3669  000A28  6EFF               	movwf	tosu,c
  3670  000A2A  50FA               	movf	pclath,w,c
  3671  000A2C  0E30               	movlw	48
  3672  000A2E  0012               	return		;indir
  3673  000A30                     l4821:
  3674  000A30  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3675  000A34  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3676  000A38  CFDE F06C          	movff	postinc2,??__doprnt
  3677  000A3C  CFDD F06D          	movff	postdec2,??__doprnt+1
  3678  000A40  C06C  FFD9         	movff	??__doprnt,fsr2l
  3679  000A44  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3680  000A48  0E30               	movlw	48
  3681  000A4A  6EDF               	movwf	indf2,c
  3682  000A4C  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3683  000A50  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3684  000A54  2ADE               	incf	postinc2,f,c
  3685  000A56  0E00               	movlw	0
  3686  000A58  22DD               	addwfc	postdec2,f,c
  3687  000A5A                     l4825:
  3688                           
  3689                           ;doprnt.c: 1218: exp--;
  3690  000A5A  0100               	movlb	0	; () banked
  3691  000A5C  0789               	decf	__doprnt@exp& (0+255),f,b
  3692  000A5E  A0D8               	btfss	status,0,c
  3693  000A60  078A               	decf	(__doprnt@exp+1)& (0+255),f,b
  3694  000A62                     l4827:
  3695                           
  3696                           ; BSR set to: 0
  3697  000A62  0100               	movlb	0	; () banked
  3698  000A64  518A               	movf	(__doprnt@exp+1)& (0+255),w,b
  3699  000A66  0A80               	xorlw	128
  3700  000A68  6EF3               	movwf	prodl,c
  3701  000A6A  0E80               	movlw	128
  3702  000A6C  5CF3               	subwf	prodl,w,c
  3703  000A6E  0E01               	movlw	1
  3704  000A70  B4D8               	btfsc	status,2,c
  3705  000A72  5D89               	subwf	__doprnt@exp& (0+255),w,b
  3706  000A74  B0D8               	btfsc	status,0,c
  3707  000A76  D7B9               	goto	l4817
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;doprnt.c: 1219: }
  3711                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3712                           
  3713                           ; BSR set to: 0
  3714  000A78  0100               	movlb	0	; () banked
  3715  000A7A  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  3716  000A7C  0A80               	xorlw	128
  3717  000A7E  0F80               	addlw	-128
  3718  000A80  0E09               	movlw	9
  3719  000A82  B4D8               	btfsc	status,2,c
  3720  000A84  5D85               	subwf	__doprnt@prec& (0+255),w,b
  3721  000A86  A0D8               	btfss	status,0,c
  3722  000A88  D004               	goto	l550
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3726  000A8A  0E08               	movlw	8
  3727  000A8C  0100               	movlb	0	; () banked
  3728  000A8E  6F95               	movwf	__doprnt@c& (0+255),b
  3729  000A90  D002               	goto	l4833
  3730  000A92                     l550:
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 1222: else
  3734                           ;doprnt.c: 1223: c = prec;
  3735  000A92  C085  F095         	movff	__doprnt@prec,__doprnt@c
  3736  000A96                     l4833:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;doprnt.c: 1224: prec -= c;
  3740  000A96  0100               	movlb	0	; () banked
  3741  000A98  5195               	movf	__doprnt@c& (0+255),w,b
  3742  000A9A  0100               	movlb	0	; () banked
  3743  000A9C  5F85               	subwf	__doprnt@prec& (0+255),f,b
  3744  000A9E  0E00               	movlw	0
  3745  000AA0  0100               	movlb	0	; () banked
  3746  000AA2  BF95               	btfsc	__doprnt@c& (0+255),7,b
  3747  000AA4  0EFF               	movlw	255
  3748  000AA6  0100               	movlb	0	; () banked
  3749  000AA8  5B86               	subwfb	(__doprnt@prec+1)& (0+255),f,b
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;doprnt.c: 1228: if(c)
  3753  000AAA  0100               	movlb	0	; () banked
  3754  000AAC  5195               	movf	__doprnt@c& (0+255),w,b
  3755  000AAE  B4D8               	btfsc	status,2,c
  3756  000AB0  D038               	goto	l4845
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;doprnt.c: 1230: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
  3760  000AB2  0100               	movlb	0	; () banked
  3761  000AB4  EE20 F002          	lfsr	2,2
  3762  000AB8  0100               	movlb	0	; () banked
  3763  000ABA  5166               	movf	__doprnt@pb& (0+255),w,b
  3764  000ABC  26D9               	addwf	fsr2l,f,c
  3765  000ABE  0100               	movlb	0	; () banked
  3766  000AC0  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3767  000AC2  22DA               	addwfc	fsr2h,f,c
  3768  000AC4  50DE               	movf	postinc2,w,c
  3769  000AC6  10DD               	iorwf	postdec2,w,c
  3770  000AC8  B4D8               	btfsc	status,2,c
  3771  000ACA  D016               	goto	l4841
  3772                           
  3773                           ; BSR set to: 0
  3774  000ACC  0100               	movlb	0	; () banked
  3775  000ACE  EE20 F002          	lfsr	2,2
  3776  000AD2  0100               	movlb	0	; () banked
  3777  000AD4  5166               	movf	__doprnt@pb& (0+255),w,b
  3778  000AD6  26D9               	addwf	fsr2l,f,c
  3779  000AD8  0100               	movlb	0	; () banked
  3780  000ADA  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3781  000ADC  22DA               	addwfc	fsr2h,f,c
  3782  000ADE  D801               	call	u5848
  3783  000AE0  D020               	goto	l4845
  3784  000AE2                     u5848:
  3785  000AE2  0005               	push	
  3786  000AE4  6EFA               	movwf	pclath,c
  3787  000AE6  50DE               	movf	postinc2,w,c
  3788  000AE8  6EFD               	movwf	tosl,c
  3789  000AEA  50DE               	movf	postinc2,w,c
  3790  000AEC  6EFE               	movwf	tosh,c
  3791  000AEE  50F8               	movf	tblptru,w,c
  3792  000AF0  6EFF               	movwf	tosu,c
  3793  000AF2  50FA               	movf	pclath,w,c
  3794  000AF4  0E2E               	movlw	46
  3795  000AF6  0012               	return		;indir
  3796  000AF8                     l4841:
  3797  000AF8  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3798  000AFC  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3799  000B00  CFDE F06C          	movff	postinc2,??__doprnt
  3800  000B04  CFDD F06D          	movff	postdec2,??__doprnt+1
  3801  000B08  C06C  FFD9         	movff	??__doprnt,fsr2l
  3802  000B0C  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3803  000B10  0E2E               	movlw	46
  3804  000B12  6EDF               	movwf	indf2,c
  3805  000B14  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3806  000B18  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3807  000B1C  2ADE               	incf	postinc2,f,c
  3808  000B1E  0E00               	movlw	0
  3809  000B20  22DD               	addwfc	postdec2,f,c
  3810  000B22                     l4845:
  3811                           
  3812                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3813  000B22  0100               	movlb	0	; () banked
  3814  000B24  5195               	movf	__doprnt@c& (0+255),w,b
  3815  000B26  ECB6  F009         	call	_scale
  3816  000B2A  C039  F072         	movff	?_scale,__doprnt$2567
  3817  000B2E  C03A  F073         	movff	?_scale+1,__doprnt$2567+1
  3818  000B32  C03B  F074         	movff	?_scale+2,__doprnt$2567+2
  3819                           
  3820                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3821  000B36  C092  F02D         	movff	__doprnt@fval,___ftmul@f2
  3822  000B3A  C093  F02E         	movff	__doprnt@fval+1,___ftmul@f2+1
  3823  000B3E  C094  F02F         	movff	__doprnt@fval+2,___ftmul@f2+2
  3824  000B42  C072  F02A         	movff	__doprnt$2567,___ftmul@f1
  3825  000B46  C073  F02B         	movff	__doprnt$2567+1,___ftmul@f1+1
  3826  000B4A  C074  F02C         	movff	__doprnt$2567+2,___ftmul@f1+2
  3827  000B4E  EC72  F010         	call	___ftmul	;wreg free
  3828  000B52  C02A  F040         	movff	?___ftmul,___fttol@f1
  3829  000B56  C02B  F041         	movff	?___ftmul+1,___fttol@f1+1
  3830  000B5A  C02C  F042         	movff	?___ftmul+2,___fttol@f1+2
  3831  000B5E  EC3E  F00F         	call	___fttol	;wreg free
  3832  000B62  C040  F08B         	movff	?___fttol,__doprnt@_val
  3833  000B66  C041  F08C         	movff	?___fttol+1,__doprnt@_val+1
  3834  000B6A  C042  F08D         	movff	?___fttol+2,__doprnt@_val+2
  3835  000B6E  C043  F08E         	movff	?___fttol+3,__doprnt@_val+3
  3836                           
  3837                           ;doprnt.c: 1237: while(c--) {
  3838  000B72  D0A4               	goto	l4861
  3839  000B74                     l4849:
  3840                           
  3841                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3842  000B74  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  3843  000B78  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  3844  000B7C  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  3845  000B80  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  3846  000B84  0100               	movlb	0	; () banked
  3847  000B86  5195               	movf	__doprnt@c& (0+255),w,b
  3848  000B88  0D04               	mullw	4
  3849  000B8A  0ECD               	movlw	low _dpowers
  3850  000B8C  24F3               	addwf	prodl,w,c
  3851  000B8E  6EF6               	movwf	tblptrl,c
  3852  000B90  0E7E               	movlw	high _dpowers
  3853  000B92  20F4               	addwfc	prodh,w,c
  3854  000B94  6EF7               	movwf	tblptrh,c
  3855  000B96                     	if	0	;There are less than 3 active tblptr bytes
  3856  000B96                     	endif
  3857  000B96  0009               	tblrd		*+
  3858  000B98  CFF5 F013          	movff	tablat,___lldiv@divisor
  3859  000B9C  0009               	tblrd		*+
  3860  000B9E  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  3861  000BA2  0009               	tblrd		*+
  3862  000BA4  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  3863  000BA8  000A               	tblrd		*-
  3864  000BAA  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  3865  000BAE  EC2B  F014         	call	___lldiv	;wreg free
  3866  000BB2  C00F  F07E         	movff	?___lldiv,__doprnt@vd_1974
  3867  000BB6  C010  F07F         	movff	?___lldiv+1,__doprnt@vd_1974+1
  3868  000BBA  C011  F080         	movff	?___lldiv+2,__doprnt@vd_1974+2
  3869  000BBE  C012  F081         	movff	?___lldiv+3,__doprnt@vd_1974+3
  3870                           
  3871                           ;doprnt.c: 1239: vd %= 10;
  3872  000BC2  C07E  F01C         	movff	__doprnt@vd_1974,___llmod@dividend
  3873  000BC6  C07F  F01D         	movff	__doprnt@vd_1974+1,___llmod@dividend+1
  3874  000BCA  C080  F01E         	movff	__doprnt@vd_1974+2,___llmod@dividend+2
  3875  000BCE  C081  F01F         	movff	__doprnt@vd_1974+3,___llmod@dividend+3
  3876  000BD2  0E0A               	movlw	10
  3877  000BD4  6E20               	movwf	___llmod@divisor,c
  3878  000BD6  0E00               	movlw	0
  3879  000BD8  6E21               	movwf	___llmod@divisor+1,c
  3880  000BDA  0E00               	movlw	0
  3881  000BDC  6E22               	movwf	___llmod@divisor+2,c
  3882  000BDE  0E00               	movlw	0
  3883  000BE0  6E23               	movwf	___llmod@divisor+3,c
  3884  000BE2  ECDD  F014         	call	___llmod	;wreg free
  3885  000BE6  C01C  F07E         	movff	?___llmod,__doprnt@vd_1974
  3886  000BEA  C01D  F07F         	movff	?___llmod+1,__doprnt@vd_1974+1
  3887  000BEE  C01E  F080         	movff	?___llmod+2,__doprnt@vd_1974+2
  3888  000BF2  C01F  F081         	movff	?___llmod+3,__doprnt@vd_1974+3
  3889                           
  3890                           ;doprnt.c: 1240: if(pb->func) (pb->func('0' + vd)); else ((*pb->ptr++ = '0' + vd));
  3891  000BF6  0100               	movlb	0	; () banked
  3892  000BF8  EE20 F002          	lfsr	2,2
  3893  000BFC  0100               	movlb	0	; () banked
  3894  000BFE  5166               	movf	__doprnt@pb& (0+255),w,b
  3895  000C00  26D9               	addwf	fsr2l,f,c
  3896  000C02  0100               	movlb	0	; () banked
  3897  000C04  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3898  000C06  22DA               	addwfc	fsr2h,f,c
  3899  000C08  50DE               	movf	postinc2,w,c
  3900  000C0A  10DD               	iorwf	postdec2,w,c
  3901  000C0C  B4D8               	btfsc	status,2,c
  3902  000C0E  D018               	goto	l4857
  3903                           
  3904                           ; BSR set to: 0
  3905  000C10  0100               	movlb	0	; () banked
  3906  000C12  EE20 F002          	lfsr	2,2
  3907  000C16  0100               	movlb	0	; () banked
  3908  000C18  5166               	movf	__doprnt@pb& (0+255),w,b
  3909  000C1A  26D9               	addwf	fsr2l,f,c
  3910  000C1C  0100               	movlb	0	; () banked
  3911  000C1E  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3912  000C20  22DA               	addwfc	fsr2h,f,c
  3913  000C22  D801               	call	u5868
  3914  000C24  D024               	goto	l4859
  3915  000C26                     u5868:
  3916  000C26  0005               	push	
  3917  000C28  6EFA               	movwf	pclath,c
  3918  000C2A  50DE               	movf	postinc2,w,c
  3919  000C2C  6EFD               	movwf	tosl,c
  3920  000C2E  50DE               	movf	postinc2,w,c
  3921  000C30  6EFE               	movwf	tosh,c
  3922  000C32  50F8               	movf	tblptru,w,c
  3923  000C34  6EFF               	movwf	tosu,c
  3924  000C36  50FA               	movf	pclath,w,c
  3925  000C38  0100               	movlb	0	; () banked
  3926  000C3A  517E               	movf	__doprnt@vd_1974& (0+255),w,b
  3927  000C3C  0F30               	addlw	48
  3928  000C3E  0012               	return		;indir
  3929  000C40                     l4857:
  3930  000C40  0100               	movlb	0	; () banked
  3931  000C42  517E               	movf	__doprnt@vd_1974& (0+255),w,b
  3932  000C44  0F30               	addlw	48
  3933  000C46  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3934  000C4A  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3935  000C4E  CFDE F06C          	movff	postinc2,??__doprnt
  3936  000C52  CFDD F06D          	movff	postdec2,??__doprnt+1
  3937  000C56  C06C  FFD9         	movff	??__doprnt,fsr2l
  3938  000C5A  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  3939  000C5E  6EDF               	movwf	indf2,c
  3940  000C60  C066  FFD9         	movff	__doprnt@pb,fsr2l
  3941  000C64  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  3942  000C68  2ADE               	incf	postinc2,f,c
  3943  000C6A  0E00               	movlw	0
  3944  000C6C  22DD               	addwfc	postdec2,f,c
  3945  000C6E                     l4859:
  3946                           
  3947                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3948  000C6E  C08B  F01C         	movff	__doprnt@_val,___llmod@dividend
  3949  000C72  C08C  F01D         	movff	__doprnt@_val+1,___llmod@dividend+1
  3950  000C76  C08D  F01E         	movff	__doprnt@_val+2,___llmod@dividend+2
  3951  000C7A  C08E  F01F         	movff	__doprnt@_val+3,___llmod@dividend+3
  3952  000C7E  0100               	movlb	0	; () banked
  3953  000C80  5195               	movf	__doprnt@c& (0+255),w,b
  3954  000C82  0D04               	mullw	4
  3955  000C84  0ECD               	movlw	low _dpowers
  3956  000C86  24F3               	addwf	prodl,w,c
  3957  000C88  6EF6               	movwf	tblptrl,c
  3958  000C8A  0E7E               	movlw	high _dpowers
  3959  000C8C  20F4               	addwfc	prodh,w,c
  3960  000C8E  6EF7               	movwf	tblptrh,c
  3961  000C90                     	if	0	;There are less than 3 active tblptr bytes
  3962  000C90                     	endif
  3963  000C90  0009               	tblrd		*+
  3964  000C92  CFF5 F020          	movff	tablat,___llmod@divisor
  3965  000C96  0009               	tblrd		*+
  3966  000C98  CFF5 F021          	movff	tablat,___llmod@divisor+1
  3967  000C9C  0009               	tblrd		*+
  3968  000C9E  CFF5 F022          	movff	tablat,___llmod@divisor+2
  3969  000CA2  000A               	tblrd		*-
  3970  000CA4  CFF5 F023          	movff	tablat,___llmod@divisor+3
  3971  000CA8  ECDD  F014         	call	___llmod
  3972  000CAC  C01C  F08B         	movff	?___llmod,__doprnt@_val
  3973  000CB0  C01D  F08C         	movff	?___llmod+1,__doprnt@_val+1
  3974  000CB4  C01E  F08D         	movff	?___llmod+2,__doprnt@_val+2
  3975  000CB8  C01F  F08E         	movff	?___llmod+3,__doprnt@_val+3
  3976  000CBC                     l4861:
  3977  000CBC  0100               	movlb	0	; () banked
  3978  000CBE  0795               	decf	__doprnt@c& (0+255),f,b
  3979  000CC0  0100               	movlb	0	; () banked
  3980  000CC2  2995               	incf	__doprnt@c& (0+255),w,b
  3981  000CC4  B4D8               	btfsc	status,2,c
  3982  000CC6  D03D               	goto	l4873
  3983  000CC8  D755               	goto	l4849
  3984  000CCA                     l4863:
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;doprnt.c: 1245: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  3988  000CCA  0100               	movlb	0	; () banked
  3989  000CCC  EE20 F002          	lfsr	2,2
  3990  000CD0  0100               	movlb	0	; () banked
  3991  000CD2  5166               	movf	__doprnt@pb& (0+255),w,b
  3992  000CD4  26D9               	addwf	fsr2l,f,c
  3993  000CD6  0100               	movlb	0	; () banked
  3994  000CD8  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  3995  000CDA  22DA               	addwfc	fsr2h,f,c
  3996  000CDC  50DE               	movf	postinc2,w,c
  3997  000CDE  10DD               	iorwf	postdec2,w,c
  3998  000CE0  B4D8               	btfsc	status,2,c
  3999  000CE2  D016               	goto	l4867
  4000                           
  4001                           ; BSR set to: 0
  4002  000CE4  0100               	movlb	0	; () banked
  4003  000CE6  EE20 F002          	lfsr	2,2
  4004  000CEA  0100               	movlb	0	; () banked
  4005  000CEC  5166               	movf	__doprnt@pb& (0+255),w,b
  4006  000CEE  26D9               	addwf	fsr2l,f,c
  4007  000CF0  0100               	movlb	0	; () banked
  4008  000CF2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4009  000CF4  22DA               	addwfc	fsr2h,f,c
  4010  000CF6  D801               	call	u5898
  4011  000CF8  D020               	goto	l4871
  4012  000CFA                     u5898:
  4013  000CFA  0005               	push	
  4014  000CFC  6EFA               	movwf	pclath,c
  4015  000CFE  50DE               	movf	postinc2,w,c
  4016  000D00  6EFD               	movwf	tosl,c
  4017  000D02  50DE               	movf	postinc2,w,c
  4018  000D04  6EFE               	movwf	tosh,c
  4019  000D06  50F8               	movf	tblptru,w,c
  4020  000D08  6EFF               	movwf	tosu,c
  4021  000D0A  50FA               	movf	pclath,w,c
  4022  000D0C  0E30               	movlw	48
  4023  000D0E  0012               	return		;indir
  4024  000D10                     l4867:
  4025  000D10  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4026  000D14  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4027  000D18  CFDE F06C          	movff	postinc2,??__doprnt
  4028  000D1C  CFDD F06D          	movff	postdec2,??__doprnt+1
  4029  000D20  C06C  FFD9         	movff	??__doprnt,fsr2l
  4030  000D24  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4031  000D28  0E30               	movlw	48
  4032  000D2A  6EDF               	movwf	indf2,c
  4033  000D2C  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4034  000D30  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4035  000D34  2ADE               	incf	postinc2,f,c
  4036  000D36  0E00               	movlw	0
  4037  000D38  22DD               	addwfc	postdec2,f,c
  4038  000D3A                     l4871:
  4039                           
  4040                           ;doprnt.c: 1246: prec--;
  4041  000D3A  0100               	movlb	0	; () banked
  4042  000D3C  0785               	decf	__doprnt@prec& (0+255),f,b
  4043  000D3E  A0D8               	btfss	status,0,c
  4044  000D40  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4045  000D42                     l4873:
  4046                           
  4047                           ; BSR set to: 0
  4048  000D42  0100               	movlb	0	; () banked
  4049  000D44  5186               	movf	(__doprnt@prec+1)& (0+255),w,b
  4050  000D46  1185               	iorwf	__doprnt@prec& (0+255),w,b
  4051  000D48  B4D8               	btfsc	status,2,c
  4052  000D4A  D2F8               	goto	l4997
  4053  000D4C  D7BE               	goto	l4863
  4054  000D4E                     l499:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 1255: }
  4058                           ;doprnt.c: 1260: if((flag & 0x80) == 0x00)
  4059  000D4E  0100               	movlb	0	; () banked
  4060  000D50  BF90               	btfsc	__doprnt@flag& (0+255),7,b
  4061  000D52  D044               	goto	l4883
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;doprnt.c: 1262: {
  4065                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4066  000D54  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  4067  000D58  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4068  000D5C  CFDF F06C          	movff	indf2,??__doprnt
  4069  000D60  0E02               	movlw	2
  4070  000D62  26DE               	addwf	postinc2,f,c
  4071  000D64  CFDF F06D          	movff	indf2,??__doprnt+1
  4072  000D68  0E00               	movlw	0
  4073  000D6A  22DD               	addwfc	postdec2,f,c
  4074  000D6C  C06C  FFD9         	movff	??__doprnt,fsr2l
  4075  000D70  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4076  000D74  0100               	movlb	0	; () banked
  4077  000D76  CFDE F08B          	movff	postinc2,__doprnt@_val
  4078  000D7A  0100               	movlb	0	; () banked
  4079  000D7C  CFDD F08C          	movff	postdec2,__doprnt@_val+1
  4080  000D80  0100               	movlb	0	; () banked
  4081  000D82  0E00               	movlw	0
  4082  000D84  0100               	movlb	0	; () banked
  4083  000D86  BF8C               	btfsc	(__doprnt@_val+1)& (0+255),7,b
  4084  000D88  0EFF               	movlw	-1
  4085  000D8A  0100               	movlb	0	; () banked
  4086  000D8C  6F8D               	movwf	(__doprnt@_val+2)& (0+255),b
  4087  000D8E  0100               	movlb	0	; () banked
  4088  000D90  6F8E               	movwf	(__doprnt@_val+3)& (0+255),b
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  4092  000D92  0100               	movlb	0	; () banked
  4093  000D94  518E               	movf	(__doprnt@_val+3)& (0+255),w,b
  4094  000D96  0A80               	xorlw	128
  4095  000D98  0F80               	addlw	128
  4096  000D9A  E10B               	bnz	u5925
  4097  000D9C  0E00               	movlw	0
  4098  000D9E  0100               	movlb	0	; () banked
  4099  000DA0  5D8D               	subwf	(__doprnt@_val+2)& (0+255),w,b
  4100  000DA2  E107               	bnz	u5925
  4101  000DA4  0E00               	movlw	0
  4102  000DA6  0100               	movlb	0	; () banked
  4103  000DA8  5D8C               	subwf	(__doprnt@_val+1)& (0+255),w,b
  4104  000DAA  E103               	bnz	u5925
  4105  000DAC  0E00               	movlw	0
  4106  000DAE  0100               	movlb	0	; () banked
  4107  000DB0  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4108  000DB2                     u5925:
  4109  000DB2  B0D8               	btfsc	status,0,c
  4110  000DB4  D07E               	goto	l4915
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;doprnt.c: 1271: flag |= 0x03;
  4114  000DB6  0E03               	movlw	3
  4115  000DB8  0100               	movlb	0	; () banked
  4116  000DBA  1390               	iorwf	__doprnt@flag& (0+255),f,b
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;doprnt.c: 1272: _val._val = -_val._val;
  4120  000DBC  0100               	movlb	0	; () banked
  4121  000DBE  1F8E               	comf	(__doprnt@_val+3)& (0+255),f,b
  4122  000DC0  0100               	movlb	0	; () banked
  4123  000DC2  1F8D               	comf	(__doprnt@_val+2)& (0+255),f,b
  4124  000DC4  0100               	movlb	0	; () banked
  4125  000DC6  1F8C               	comf	(__doprnt@_val+1)& (0+255),f,b
  4126  000DC8  0100               	movlb	0	; () banked
  4127  000DCA  6D8B               	negf	__doprnt@_val& (0+255),b
  4128  000DCC  0E00               	movlw	0
  4129  000DCE  0100               	movlb	0	; () banked
  4130  000DD0  238C               	addwfc	(__doprnt@_val+1)& (0+255),f,b
  4131  000DD2  0100               	movlb	0	; () banked
  4132  000DD4  238D               	addwfc	(__doprnt@_val+2)& (0+255),f,b
  4133  000DD6  0100               	movlb	0	; () banked
  4134  000DD8  238E               	addwfc	(__doprnt@_val+3)& (0+255),f,b
  4135  000DDA  D06B               	goto	l4915
  4136  000DDC                     l4883:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;doprnt.c: 1277: else
  4140                           ;doprnt.c: 1282: {
  4141                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4142  000DDC  C06A  FFD9         	movff	__doprnt@ap,fsr2l
  4143  000DE0  C06B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4144  000DE4  CFDF F06C          	movff	indf2,??__doprnt
  4145  000DE8  0E02               	movlw	2
  4146  000DEA  26DE               	addwf	postinc2,f,c
  4147  000DEC  CFDF F06D          	movff	indf2,??__doprnt+1
  4148  000DF0  0E00               	movlw	0
  4149  000DF2  22DD               	addwfc	postdec2,f,c
  4150  000DF4  C06C  FFD9         	movff	??__doprnt,fsr2l
  4151  000DF8  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4152  000DFC  CFDE F06E          	movff	postinc2,??__doprnt+2
  4153  000E00  CFDD F06F          	movff	postdec2,??__doprnt+3
  4154  000E04  0100               	movlb	0	; () banked
  4155  000E06  C06E  F08B         	movff	??__doprnt+2,__doprnt@_val
  4156  000E0A  0100               	movlb	0	; () banked
  4157  000E0C  C06F  F08C         	movff	??__doprnt+3,__doprnt@_val+1
  4158  000E10  0100               	movlb	0	; () banked
  4159  000E12  6B8D               	clrf	(__doprnt@_val+2)& (0+255),b
  4160  000E14  0100               	movlb	0	; () banked
  4161  000E16  6B8E               	clrf	(__doprnt@_val+3)& (0+255),b
  4162  000E18  D04C               	goto	l4915
  4163  000E1A                     l4885:
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4167  000E1A  0E01               	movlw	1
  4168  000E1C  0100               	movlb	0	; () banked
  4169  000E1E  6F95               	movwf	__doprnt@c& (0+255),b
  4170  000E20                     
  4171                           ; BSR set to: 0
  4172  000E20  0100               	movlb	0	; () banked
  4173  000E22  5195               	movf	__doprnt@c& (0+255),w,b
  4174  000E24  0A0A               	xorlw	10
  4175  000E26  B4D8               	btfsc	status,2,c
  4176  000E28  D04D               	goto	l4917
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  4180                           
  4181                           ; BSR set to: 0
  4182                           
  4183                           ; BSR set to: 0
  4184  000E2A  0100               	movlb	0	; () banked
  4185  000E2C  5195               	movf	__doprnt@c& (0+255),w,b
  4186  000E2E  0D04               	mullw	4
  4187  000E30  0ECD               	movlw	low _dpowers
  4188  000E32  24F3               	addwf	prodl,w,c
  4189  000E34  6EF6               	movwf	tblptrl,c
  4190  000E36  0E7E               	movlw	high _dpowers
  4191  000E38  20F4               	addwfc	prodh,w,c
  4192  000E3A  6EF7               	movwf	tblptrh,c
  4193  000E3C                     	if	0	;There are less than 3 active tblptr bytes
  4194  000E3C                     	endif
  4195  000E3C  0009               	tblrd		*+
  4196  000E3E  50F5               	movf	tablat,w,c
  4197  000E40  0100               	movlb	0	; () banked
  4198  000E42  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4199  000E44  0009               	tblrd		*+
  4200  000E46  50F5               	movf	tablat,w,c
  4201  000E48  0100               	movlb	0	; () banked
  4202  000E4A  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  4203  000E4C  0009               	tblrd		*+
  4204  000E4E  50F5               	movf	tablat,w,c
  4205  000E50  0100               	movlb	0	; () banked
  4206  000E52  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  4207  000E54  0009               	tblrd		*+
  4208  000E56  50F5               	movf	tablat,w,c
  4209  000E58  0100               	movlb	0	; () banked
  4210  000E5A  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  4211  000E5C  A0D8               	btfss	status,0,c
  4212  000E5E  D032               	goto	l4917
  4213                           
  4214                           ; BSR set to: 0
  4215                           
  4216                           ; BSR set to: 0
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;doprnt.c: 1316: break;
  4220  000E60  0100               	movlb	0	; () banked
  4221  000E62  2B95               	incf	__doprnt@c& (0+255),f,b
  4222  000E64  D7DD               	goto	L4
  4223  000E66                     l4899:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;doprnt.c: 1325: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4227  000E66  0E01               	movlw	1
  4228  000E68  0100               	movlb	0	; () banked
  4229  000E6A  6F95               	movwf	__doprnt@c& (0+255),b
  4230  000E6C                     
  4231                           ; BSR set to: 0
  4232  000E6C  0100               	movlb	0	; () banked
  4233  000E6E  5195               	movf	__doprnt@c& (0+255),w,b
  4234  000E70  0A08               	xorlw	8
  4235  000E72  B4D8               	btfsc	status,2,c
  4236  000E74  D027               	goto	l4917
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;doprnt.c: 1326: if(_val._val < hexpowers[c])
  4240                           
  4241                           ; BSR set to: 0
  4242                           
  4243                           ; BSR set to: 0
  4244  000E76  0100               	movlb	0	; () banked
  4245  000E78  5195               	movf	__doprnt@c& (0+255),w,b
  4246  000E7A  0D04               	mullw	4
  4247  000E7C  0E43               	movlw	low _hexpowers
  4248  000E7E  24F3               	addwf	prodl,w,c
  4249  000E80  6EF6               	movwf	tblptrl,c
  4250  000E82  0E7F               	movlw	high _hexpowers
  4251  000E84  20F4               	addwfc	prodh,w,c
  4252  000E86  6EF7               	movwf	tblptrh,c
  4253  000E88                     	if	0	;There are less than 3 active tblptr bytes
  4254  000E88                     	endif
  4255  000E88  0009               	tblrd		*+
  4256  000E8A  50F5               	movf	tablat,w,c
  4257  000E8C  0100               	movlb	0	; () banked
  4258  000E8E  5D8B               	subwf	__doprnt@_val& (0+255),w,b
  4259  000E90  0009               	tblrd		*+
  4260  000E92  50F5               	movf	tablat,w,c
  4261  000E94  0100               	movlb	0	; () banked
  4262  000E96  598C               	subwfb	(__doprnt@_val+1)& (0+255),w,b
  4263  000E98  0009               	tblrd		*+
  4264  000E9A  50F5               	movf	tablat,w,c
  4265  000E9C  0100               	movlb	0	; () banked
  4266  000E9E  598D               	subwfb	(__doprnt@_val+2)& (0+255),w,b
  4267  000EA0  0009               	tblrd		*+
  4268  000EA2  50F5               	movf	tablat,w,c
  4269  000EA4  0100               	movlb	0	; () banked
  4270  000EA6  598E               	subwfb	(__doprnt@_val+3)& (0+255),w,b
  4271  000EA8  A0D8               	btfss	status,0,c
  4272  000EAA  D00C               	goto	l4917
  4273                           
  4274                           ; BSR set to: 0
  4275                           
  4276                           ; BSR set to: 0
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;doprnt.c: 1327: break;
  4280  000EAC  0100               	movlb	0	; () banked
  4281  000EAE  2B95               	incf	__doprnt@c& (0+255),f,b
  4282  000EB0  D7DD               	goto	L5
  4283  000EB2                     l4915:
  4284                           
  4285                           ; BSR set to: 0
  4286  000EB2  0100               	movlb	0	; () banked
  4287  000EB4  5190               	movf	__doprnt@flag& (0+255),w,b
  4288  000EB6  0B80               	andlw	128
  4289                           
  4290                           ; Switch size 1, requested type "space"
  4291                           ; Number of cases is 2, Range of values is 0 to 128
  4292                           ; switch strategies available:
  4293                           ; Name         Instructions Cycles
  4294                           ; simple_byte            7     4 (average)
  4295                           ;	Chosen strategy is simple_byte
  4296  000EB8  0A00               	xorlw	0	; case 0
  4297  000EBA  B4D8               	btfsc	status,2,c
  4298  000EBC  D7AE               	goto	l4885
  4299  000EBE  0A80               	xorlw	128	; case 128
  4300  000EC0  B4D8               	btfsc	status,2,c
  4301  000EC2  D7D1               	goto	l4899
  4302  000EC4                     l4917:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;doprnt.c: 1354: if(width && flag & 0x03)
  4306  000EC4  0100               	movlb	0	; () banked
  4307  000EC6  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4308  000EC8  1187               	iorwf	__doprnt@width& (0+255),w,b
  4309  000ECA  B4D8               	btfsc	status,2,c
  4310  000ECC  D013               	goto	l4923
  4311                           
  4312                           ; BSR set to: 0
  4313  000ECE  0E03               	movlw	3
  4314  000ED0  0100               	movlb	0	; () banked
  4315  000ED2  1590               	andwf	__doprnt@flag& (0+255),w,b
  4316  000ED4  0100               	movlb	0	; () banked
  4317  000ED6  6F6C               	movwf	??__doprnt& (0+255),b
  4318  000ED8  0E00               	movlw	0
  4319  000EDA  0100               	movlb	0	; () banked
  4320  000EDC  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4321  000EDE  0100               	movlb	0	; () banked
  4322  000EE0  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4323  000EE2  0100               	movlb	0	; () banked
  4324  000EE4  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4325  000EE6  116C               	iorwf	??__doprnt& (0+255),w,b
  4326  000EE8  B4D8               	btfsc	status,2,c
  4327  000EEA  D004               	goto	l4923
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;doprnt.c: 1355: width--;
  4331  000EEC  0100               	movlb	0	; () banked
  4332  000EEE  0787               	decf	__doprnt@width& (0+255),f,b
  4333  000EF0  A0D8               	btfss	status,0,c
  4334  000EF2  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4335  000EF4                     l4923:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;doprnt.c: 1390: if(width > c)
  4339  000EF4  0E80               	movlw	128
  4340  000EF6  0100               	movlb	0	; () banked
  4341  000EF8  BF95               	btfsc	__doprnt@c& (0+255),7,b
  4342  000EFA  0E7F               	movlw	127
  4343  000EFC  0100               	movlb	0	; () banked
  4344  000EFE  6F6C               	movwf	??__doprnt& (0+255),b
  4345  000F00  0100               	movlb	0	; () banked
  4346  000F02  5187               	movf	__doprnt@width& (0+255),w,b
  4347  000F04  0100               	movlb	0	; () banked
  4348  000F06  5D95               	subwf	__doprnt@c& (0+255),w,b
  4349  000F08  0100               	movlb	0	; () banked
  4350  000F0A  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4351  000F0C  0A80               	xorlw	128
  4352  000F0E  0100               	movlb	0	; () banked
  4353  000F10  596C               	subwfb	??__doprnt& (0+255),w,b
  4354  000F12  B0D8               	btfsc	status,0,c
  4355  000F14  D00B               	goto	l4927
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;doprnt.c: 1391: width -= c;
  4359  000F16  0100               	movlb	0	; () banked
  4360  000F18  5195               	movf	__doprnt@c& (0+255),w,b
  4361  000F1A  0100               	movlb	0	; () banked
  4362  000F1C  5F87               	subwf	__doprnt@width& (0+255),f,b
  4363  000F1E  0E00               	movlw	0
  4364  000F20  0100               	movlb	0	; () banked
  4365  000F22  BF95               	btfsc	__doprnt@c& (0+255),7,b
  4366  000F24  0EFF               	movlw	255
  4367  000F26  0100               	movlb	0	; () banked
  4368  000F28  5B88               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4369  000F2A  D006               	goto	l4929
  4370  000F2C                     l4927:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;doprnt.c: 1392: else
  4374                           ;doprnt.c: 1393: width = 0;
  4375  000F2C  0E00               	movlw	0
  4376  000F2E  0100               	movlb	0	; () banked
  4377  000F30  6F88               	movwf	(__doprnt@width+1)& (0+255),b
  4378  000F32  0E00               	movlw	0
  4379  000F34  0100               	movlb	0	; () banked
  4380  000F36  6F87               	movwf	__doprnt@width& (0+255),b
  4381  000F38                     l4929:
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;doprnt.c: 1396: if(flag & 0x04) {
  4385  000F38  0100               	movlb	0	; () banked
  4386  000F3A  A590               	btfss	__doprnt@flag& (0+255),2,b
  4387  000F3C  D08A               	goto	l4953
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1401: if(flag & 0x03)
  4391  000F3E  0E03               	movlw	3
  4392  000F40  0100               	movlb	0	; () banked
  4393  000F42  1590               	andwf	__doprnt@flag& (0+255),w,b
  4394  000F44  0100               	movlb	0	; () banked
  4395  000F46  6F6C               	movwf	??__doprnt& (0+255),b
  4396  000F48  0E00               	movlw	0
  4397  000F4A  0100               	movlb	0	; () banked
  4398  000F4C  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4399  000F4E  0100               	movlb	0	; () banked
  4400  000F50  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4401  000F52  0100               	movlb	0	; () banked
  4402  000F54  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4403  000F56  116C               	iorwf	??__doprnt& (0+255),w,b
  4404  000F58  B4D8               	btfsc	status,2,c
  4405  000F5A  D038               	goto	l4941
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;doprnt.c: 1402: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4409  000F5C  0100               	movlb	0	; () banked
  4410  000F5E  EE20 F002          	lfsr	2,2
  4411  000F62  0100               	movlb	0	; () banked
  4412  000F64  5166               	movf	__doprnt@pb& (0+255),w,b
  4413  000F66  26D9               	addwf	fsr2l,f,c
  4414  000F68  0100               	movlb	0	; () banked
  4415  000F6A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4416  000F6C  22DA               	addwfc	fsr2h,f,c
  4417  000F6E  50DE               	movf	postinc2,w,c
  4418  000F70  10DD               	iorwf	postdec2,w,c
  4419  000F72  B4D8               	btfsc	status,2,c
  4420  000F74  D016               	goto	l4937
  4421                           
  4422                           ; BSR set to: 0
  4423  000F76  0100               	movlb	0	; () banked
  4424  000F78  EE20 F002          	lfsr	2,2
  4425  000F7C  0100               	movlb	0	; () banked
  4426  000F7E  5166               	movf	__doprnt@pb& (0+255),w,b
  4427  000F80  26D9               	addwf	fsr2l,f,c
  4428  000F82  0100               	movlb	0	; () banked
  4429  000F84  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4430  000F86  22DA               	addwfc	fsr2h,f,c
  4431  000F88  D801               	call	u6058
  4432  000F8A  D020               	goto	l4941
  4433  000F8C                     u6058:
  4434  000F8C  0005               	push	
  4435  000F8E  6EFA               	movwf	pclath,c
  4436  000F90  50DE               	movf	postinc2,w,c
  4437  000F92  6EFD               	movwf	tosl,c
  4438  000F94  50DE               	movf	postinc2,w,c
  4439  000F96  6EFE               	movwf	tosh,c
  4440  000F98  50F8               	movf	tblptru,w,c
  4441  000F9A  6EFF               	movwf	tosu,c
  4442  000F9C  50FA               	movf	pclath,w,c
  4443  000F9E  0E2D               	movlw	45
  4444  000FA0  0012               	return		;indir
  4445  000FA2                     l4937:
  4446  000FA2  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4447  000FA6  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4448  000FAA  CFDE F06C          	movff	postinc2,??__doprnt
  4449  000FAE  CFDD F06D          	movff	postdec2,??__doprnt+1
  4450  000FB2  C06C  FFD9         	movff	??__doprnt,fsr2l
  4451  000FB6  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4452  000FBA  0E2D               	movlw	45
  4453  000FBC  6EDF               	movwf	indf2,c
  4454  000FBE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4455  000FC2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4456  000FC6  2ADE               	incf	postinc2,f,c
  4457  000FC8  0E00               	movlw	0
  4458  000FCA  22DD               	addwfc	postdec2,f,c
  4459  000FCC                     l4941:
  4460                           
  4461                           ;doprnt.c: 1424: if(width)
  4462  000FCC  0100               	movlb	0	; () banked
  4463  000FCE  0100               	movlb	0	; () banked
  4464  000FD0  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4465  000FD2  1187               	iorwf	__doprnt@width& (0+255),w,b
  4466  000FD4  B4D8               	btfsc	status,2,c
  4467  000FD6  D0CA               	goto	l4975
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;doprnt.c: 1426: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  4471                           
  4472                           ; BSR set to: 0
  4473                           
  4474                           ;doprnt.c: 1425: do
  4475  000FD8  0100               	movlb	0	; () banked
  4476  000FDA  EE20 F002          	lfsr	2,2
  4477  000FDE  0100               	movlb	0	; () banked
  4478  000FE0  5166               	movf	__doprnt@pb& (0+255),w,b
  4479  000FE2  26D9               	addwf	fsr2l,f,c
  4480  000FE4  0100               	movlb	0	; () banked
  4481  000FE6  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4482  000FE8  22DA               	addwfc	fsr2h,f,c
  4483  000FEA  50DE               	movf	postinc2,w,c
  4484  000FEC  10DD               	iorwf	postdec2,w,c
  4485  000FEE  B4D8               	btfsc	status,2,c
  4486  000FF0  D016               	goto	l4947
  4487                           
  4488                           ; BSR set to: 0
  4489  000FF2  0100               	movlb	0	; () banked
  4490  000FF4  EE20 F002          	lfsr	2,2
  4491  000FF8  0100               	movlb	0	; () banked
  4492  000FFA  5166               	movf	__doprnt@pb& (0+255),w,b
  4493  000FFC  26D9               	addwf	fsr2l,f,c
  4494  000FFE  0100               	movlb	0	; () banked
  4495  001000  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4496  001002  22DA               	addwfc	fsr2h,f,c
  4497  001004  D801               	call	u6088
  4498  001006  D020               	goto	l4951
  4499  001008                     u6088:
  4500  001008  0005               	push	
  4501  00100A  6EFA               	movwf	pclath,c
  4502  00100C  50DE               	movf	postinc2,w,c
  4503  00100E  6EFD               	movwf	tosl,c
  4504  001010  50DE               	movf	postinc2,w,c
  4505  001012  6EFE               	movwf	tosh,c
  4506  001014  50F8               	movf	tblptru,w,c
  4507  001016  6EFF               	movwf	tosu,c
  4508  001018  50FA               	movf	pclath,w,c
  4509  00101A  0E30               	movlw	48
  4510  00101C  0012               	return		;indir
  4511  00101E                     l4947:
  4512  00101E  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4513  001022  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4514  001026  CFDE F06C          	movff	postinc2,??__doprnt
  4515  00102A  CFDD F06D          	movff	postdec2,??__doprnt+1
  4516  00102E  C06C  FFD9         	movff	??__doprnt,fsr2l
  4517  001032  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4518  001036  0E30               	movlw	48
  4519  001038  6EDF               	movwf	indf2,c
  4520  00103A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4521  00103E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4522  001042  2ADE               	incf	postinc2,f,c
  4523  001044  0E00               	movlw	0
  4524  001046  22DD               	addwfc	postdec2,f,c
  4525  001048                     l4951:
  4526                           
  4527                           ;doprnt.c: 1427: while(--width);
  4528  001048  0100               	movlb	0	; () banked
  4529  00104A  0787               	decf	__doprnt@width& (0+255),f,b
  4530  00104C  A0D8               	btfss	status,0,c
  4531  00104E  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4532  001050  D7BE               	goto	L6
  4533  001052                     l4953:
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;doprnt.c: 1431: {
  4537                           ;doprnt.c: 1433: if(width
  4538                           ;doprnt.c: 1437: )
  4539  001052  0100               	movlb	0	; () banked
  4540  001054  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4541  001056  1187               	iorwf	__doprnt@width& (0+255),w,b
  4542  001058  B4D8               	btfsc	status,2,c
  4543  00105A  D041               	goto	l4965
  4544  00105C                     l4955:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;doprnt.c: 1439: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4548  00105C  0100               	movlb	0	; () banked
  4549  00105E  EE20 F002          	lfsr	2,2
  4550  001062  0100               	movlb	0	; () banked
  4551  001064  5166               	movf	__doprnt@pb& (0+255),w,b
  4552  001066  26D9               	addwf	fsr2l,f,c
  4553  001068  0100               	movlb	0	; () banked
  4554  00106A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4555  00106C  22DA               	addwfc	fsr2h,f,c
  4556  00106E  50DE               	movf	postinc2,w,c
  4557  001070  10DD               	iorwf	postdec2,w,c
  4558  001072  B4D8               	btfsc	status,2,c
  4559  001074  D016               	goto	l4959
  4560                           
  4561                           ; BSR set to: 0
  4562  001076  0100               	movlb	0	; () banked
  4563  001078  EE20 F002          	lfsr	2,2
  4564  00107C  0100               	movlb	0	; () banked
  4565  00107E  5166               	movf	__doprnt@pb& (0+255),w,b
  4566  001080  26D9               	addwf	fsr2l,f,c
  4567  001082  0100               	movlb	0	; () banked
  4568  001084  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4569  001086  22DA               	addwfc	fsr2h,f,c
  4570  001088  D801               	call	u6128
  4571  00108A  D020               	goto	l4963
  4572  00108C                     u6128:
  4573  00108C  0005               	push	
  4574  00108E  6EFA               	movwf	pclath,c
  4575  001090  50DE               	movf	postinc2,w,c
  4576  001092  6EFD               	movwf	tosl,c
  4577  001094  50DE               	movf	postinc2,w,c
  4578  001096  6EFE               	movwf	tosh,c
  4579  001098  50F8               	movf	tblptru,w,c
  4580  00109A  6EFF               	movwf	tosu,c
  4581  00109C  50FA               	movf	pclath,w,c
  4582  00109E  0E20               	movlw	32
  4583  0010A0  0012               	return		;indir
  4584  0010A2                     l4959:
  4585  0010A2  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4586  0010A6  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4587  0010AA  CFDE F06C          	movff	postinc2,??__doprnt
  4588  0010AE  CFDD F06D          	movff	postdec2,??__doprnt+1
  4589  0010B2  C06C  FFD9         	movff	??__doprnt,fsr2l
  4590  0010B6  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4591  0010BA  0E20               	movlw	32
  4592  0010BC  6EDF               	movwf	indf2,c
  4593  0010BE  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4594  0010C2  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4595  0010C6  2ADE               	incf	postinc2,f,c
  4596  0010C8  0E00               	movlw	0
  4597  0010CA  22DD               	addwfc	postdec2,f,c
  4598  0010CC                     l4963:
  4599                           
  4600                           ;doprnt.c: 1440: while(--width);
  4601  0010CC  0100               	movlb	0	; () banked
  4602  0010CE  0787               	decf	__doprnt@width& (0+255),f,b
  4603  0010D0  A0D8               	btfss	status,0,c
  4604  0010D2  0788               	decf	(__doprnt@width+1)& (0+255),f,b
  4605  0010D4  0100               	movlb	0	; () banked
  4606  0010D6  5188               	movf	(__doprnt@width+1)& (0+255),w,b
  4607  0010D8  1187               	iorwf	__doprnt@width& (0+255),w,b
  4608  0010DA  A4D8               	btfss	status,2,c
  4609  0010DC  D7BF               	goto	l4955
  4610  0010DE                     l4965:
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;doprnt.c: 1447: if(flag & 0x03)
  4614  0010DE  0E03               	movlw	3
  4615  0010E0  0100               	movlb	0	; () banked
  4616  0010E2  1590               	andwf	__doprnt@flag& (0+255),w,b
  4617  0010E4  0100               	movlb	0	; () banked
  4618  0010E6  6F6C               	movwf	??__doprnt& (0+255),b
  4619  0010E8  0E00               	movlw	0
  4620  0010EA  0100               	movlb	0	; () banked
  4621  0010EC  1591               	andwf	(__doprnt@flag+1)& (0+255),w,b
  4622  0010EE  0100               	movlb	0	; () banked
  4623  0010F0  6F6D               	movwf	(??__doprnt+1)& (0+255),b
  4624  0010F2  0100               	movlb	0	; () banked
  4625  0010F4  516D               	movf	(??__doprnt+1)& (0+255),w,b
  4626  0010F6  116C               	iorwf	??__doprnt& (0+255),w,b
  4627  0010F8  B4D8               	btfsc	status,2,c
  4628  0010FA  D038               	goto	l4975
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;doprnt.c: 1448: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4632  0010FC  0100               	movlb	0	; () banked
  4633  0010FE  EE20 F002          	lfsr	2,2
  4634  001102  0100               	movlb	0	; () banked
  4635  001104  5166               	movf	__doprnt@pb& (0+255),w,b
  4636  001106  26D9               	addwf	fsr2l,f,c
  4637  001108  0100               	movlb	0	; () banked
  4638  00110A  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4639  00110C  22DA               	addwfc	fsr2h,f,c
  4640  00110E  50DE               	movf	postinc2,w,c
  4641  001110  10DD               	iorwf	postdec2,w,c
  4642  001112  B4D8               	btfsc	status,2,c
  4643  001114  D016               	goto	l4971
  4644                           
  4645                           ; BSR set to: 0
  4646  001116  0100               	movlb	0	; () banked
  4647  001118  EE20 F002          	lfsr	2,2
  4648  00111C  0100               	movlb	0	; () banked
  4649  00111E  5166               	movf	__doprnt@pb& (0+255),w,b
  4650  001120  26D9               	addwf	fsr2l,f,c
  4651  001122  0100               	movlb	0	; () banked
  4652  001124  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4653  001126  22DA               	addwfc	fsr2h,f,c
  4654  001128  D801               	call	u6168
  4655  00112A  D020               	goto	l4975
  4656  00112C                     u6168:
  4657  00112C  0005               	push	
  4658  00112E  6EFA               	movwf	pclath,c
  4659  001130  50DE               	movf	postinc2,w,c
  4660  001132  6EFD               	movwf	tosl,c
  4661  001134  50DE               	movf	postinc2,w,c
  4662  001136  6EFE               	movwf	tosh,c
  4663  001138  50F8               	movf	tblptru,w,c
  4664  00113A  6EFF               	movwf	tosu,c
  4665  00113C  50FA               	movf	pclath,w,c
  4666  00113E  0E2D               	movlw	45
  4667  001140  0012               	return		;indir
  4668  001142                     l4971:
  4669  001142  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4670  001146  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4671  00114A  CFDE F06C          	movff	postinc2,??__doprnt
  4672  00114E  CFDD F06D          	movff	postdec2,??__doprnt+1
  4673  001152  C06C  FFD9         	movff	??__doprnt,fsr2l
  4674  001156  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4675  00115A  0E2D               	movlw	45
  4676  00115C  6EDF               	movwf	indf2,c
  4677  00115E  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4678  001162  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4679  001166  2ADE               	incf	postinc2,f,c
  4680  001168  0E00               	movlw	0
  4681  00116A  22DD               	addwfc	postdec2,f,c
  4682  00116C                     l4975:
  4683                           
  4684                           ;doprnt.c: 1478: }
  4685                           ;doprnt.c: 1481: prec = c;
  4686  00116C  0100               	movlb	0	; () banked
  4687  00116E  5195               	movf	__doprnt@c& (0+255),w,b
  4688  001170  0100               	movlb	0	; () banked
  4689  001172  6F85               	movwf	__doprnt@prec& (0+255),b
  4690  001174  0100               	movlb	0	; () banked
  4691  001176  6B86               	clrf	(__doprnt@prec+1)& (0+255),b
  4692  001178  0100               	movlb	0	; () banked
  4693  00117A  BF85               	btfsc	__doprnt@prec& (0+255),7,b
  4694  00117C  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4695                           
  4696                           ;doprnt.c: 1483: while(prec--) {
  4697  00117E  D0D4               	goto	l4995
  4698  001180                     l4977:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  4702  001180  0100               	movlb	0	; () banked
  4703  001182  C085  F06C         	movff	__doprnt@prec,??__doprnt
  4704  001186  0100               	movlb	0	; () banked
  4705  001188  C086  F06D         	movff	__doprnt@prec+1,??__doprnt+1
  4706  00118C  0100               	movlb	0	; () banked
  4707  00118E  90D8               	bcf	status,0,c
  4708  001190  376C               	rlcf	??__doprnt& (0+255),f,b
  4709  001192  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4710  001194  0100               	movlb	0	; () banked
  4711  001196  90D8               	bcf	status,0,c
  4712  001198  376C               	rlcf	??__doprnt& (0+255),f,b
  4713  00119A  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4714  00119C  0ECD               	movlw	low _dpowers
  4715  00119E  0100               	movlb	0	; () banked
  4716  0011A0  256C               	addwf	??__doprnt& (0+255),w,b
  4717  0011A2  6EF6               	movwf	tblptrl,c
  4718  0011A4  0E7E               	movlw	high _dpowers
  4719  0011A6  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4720  0011A8  6EF7               	movwf	tblptrh,c
  4721  0011AA                     	if	0	;There are less than 3 active tblptr bytes
  4722  0011AA                     	endif
  4723  0011AA  0009               	tblrd		*+
  4724  0011AC  CFF5 F013          	movff	tablat,___lldiv@divisor
  4725  0011B0  0009               	tblrd		*+
  4726  0011B2  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  4727  0011B6  0009               	tblrd		*+
  4728  0011B8  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  4729  0011BC  000A               	tblrd		*-
  4730  0011BE  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  4731  0011C2  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  4732  0011C6  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  4733  0011CA  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  4734  0011CE  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  4735  0011D2  EC2B  F014         	call	___lldiv
  4736  0011D6  C00F  F01C         	movff	?___lldiv,___llmod@dividend
  4737  0011DA  C010  F01D         	movff	?___lldiv+1,___llmod@dividend+1
  4738  0011DE  C011  F01E         	movff	?___lldiv+2,___llmod@dividend+2
  4739  0011E2  C012  F01F         	movff	?___lldiv+3,___llmod@dividend+3
  4740  0011E6  0E0A               	movlw	10
  4741  0011E8  6E20               	movwf	___llmod@divisor,c
  4742  0011EA  0E00               	movlw	0
  4743  0011EC  6E21               	movwf	___llmod@divisor+1,c
  4744  0011EE  0E00               	movlw	0
  4745  0011F0  6E22               	movwf	___llmod@divisor+2,c
  4746  0011F2  0E00               	movlw	0
  4747  0011F4  6E23               	movwf	___llmod@divisor+3,c
  4748  0011F6  ECDD  F014         	call	___llmod	;wreg free
  4749  0011FA  C01C  F06E         	movff	?___llmod,??__doprnt+2
  4750  0011FE  C01D  F06F         	movff	?___llmod+1,??__doprnt+3
  4751  001202  C01E  F070         	movff	?___llmod+2,??__doprnt+4
  4752  001206  C01F  F071         	movff	?___llmod+3,??__doprnt+5
  4753  00120A  0100               	movlb	0	; () banked
  4754  00120C  516E               	movf	(??__doprnt+2)& (0+255),w,b
  4755  00120E  0F30               	addlw	48
  4756  001210  0100               	movlb	0	; () banked
  4757  001212  6F95               	movwf	__doprnt@c& (0+255),b
  4758                           
  4759                           ;doprnt.c: 1500: break;
  4760  001214  D04F               	goto	l4987
  4761  001216                     l4979:
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;doprnt.c: 1508: {
  4765                           ;doprnt.c: 1509: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
  4766  001216  C08B  F00F         	movff	__doprnt@_val,___lldiv@dividend
  4767  00121A  C08C  F010         	movff	__doprnt@_val+1,___lldiv@dividend+1
  4768  00121E  C08D  F011         	movff	__doprnt@_val+2,___lldiv@dividend+2
  4769  001222  C08E  F012         	movff	__doprnt@_val+3,___lldiv@dividend+3
  4770  001226  0100               	movlb	0	; () banked
  4771  001228  C085  F06C         	movff	__doprnt@prec,??__doprnt
  4772  00122C  0100               	movlb	0	; () banked
  4773  00122E  C086  F06D         	movff	__doprnt@prec+1,??__doprnt+1
  4774  001232  0100               	movlb	0	; () banked
  4775  001234  90D8               	bcf	status,0,c
  4776  001236  376C               	rlcf	??__doprnt& (0+255),f,b
  4777  001238  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4778  00123A  0100               	movlb	0	; () banked
  4779  00123C  90D8               	bcf	status,0,c
  4780  00123E  376C               	rlcf	??__doprnt& (0+255),f,b
  4781  001240  376D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4782  001242  0E43               	movlw	low _hexpowers
  4783  001244  0100               	movlb	0	; () banked
  4784  001246  256C               	addwf	??__doprnt& (0+255),w,b
  4785  001248  6EF6               	movwf	tblptrl,c
  4786  00124A  0E7F               	movlw	high _hexpowers
  4787  00124C  216D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4788  00124E  6EF7               	movwf	tblptrh,c
  4789  001250                     	if	0	;There are less than 3 active tblptr bytes
  4790  001250                     	endif
  4791  001250  0009               	tblrd		*+
  4792  001252  CFF5 F013          	movff	tablat,___lldiv@divisor
  4793  001256  0009               	tblrd		*+
  4794  001258  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  4795  00125C  0009               	tblrd		*+
  4796  00125E  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  4797  001262  000A               	tblrd		*-
  4798  001264  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  4799  001268  EC2B  F014         	call	___lldiv	;wreg free
  4800  00126C  C00F  F06E         	movff	?___lldiv,??__doprnt+2
  4801  001270  C010  F06F         	movff	?___lldiv+1,??__doprnt+3
  4802  001274  C011  F070         	movff	?___lldiv+2,??__doprnt+4
  4803  001278  C012  F071         	movff	?___lldiv+3,??__doprnt+5
  4804  00127C  0100               	movlb	0	; () banked
  4805  00127E  516E               	movf	(??__doprnt+2)& (0+255),w,b
  4806  001280  0B0F               	andlw	15
  4807  001282  0100               	movlb	0	; () banked
  4808  001284  6F79               	movwf	__doprnt@idx& (0+255),b
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;doprnt.c: 1515: c = "0123456789abcdef"[idx];
  4812  001286  0100               	movlb	0	; () banked
  4813  001288  5179               	movf	__doprnt@idx& (0+255),w,b
  4814  00128A  0D01               	mullw	1
  4815  00128C  0ECB               	movlw	low STR_6
  4816  00128E  24F3               	addwf	prodl,w,c
  4817  001290  6EF6               	movwf	tblptrl,c
  4818  001292  0E7F               	movlw	high STR_6
  4819  001294  20F4               	addwfc	prodh,w,c
  4820  001296  6EF7               	movwf	tblptrh,c
  4821  001298                     	if	0	;There are less than 3 active tblptr bytes
  4822  001298                     	endif
  4823  001298  0008               	tblrd		*
  4824  00129A  0100               	movlb	0	; () banked
  4825  00129C  CFF5 F095          	movff	tablat,__doprnt@c
  4826                           
  4827                           ;doprnt.c: 1517: }
  4828                           ;doprnt.c: 1519: break;
  4829  0012A0  D009               	goto	l4987
  4830  0012A2                     l4985:
  4831                           
  4832                           ; BSR set to: 0
  4833  0012A2  0100               	movlb	0	; () banked
  4834  0012A4  5190               	movf	__doprnt@flag& (0+255),w,b
  4835  0012A6  0B80               	andlw	128
  4836                           
  4837                           ; Switch size 1, requested type "space"
  4838                           ; Number of cases is 2, Range of values is 0 to 128
  4839                           ; switch strategies available:
  4840                           ; Name         Instructions Cycles
  4841                           ; simple_byte            7     4 (average)
  4842                           ;	Chosen strategy is simple_byte
  4843  0012A8  0A00               	xorlw	0	; case 0
  4844  0012AA  B4D8               	btfsc	status,2,c
  4845  0012AC  D769               	goto	l4977
  4846  0012AE  0A80               	xorlw	128	; case 128
  4847  0012B0  B4D8               	btfsc	status,2,c
  4848  0012B2  D7B1               	goto	l4979
  4849  0012B4                     l4987:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;doprnt.c: 1533: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4853  0012B4  0100               	movlb	0	; () banked
  4854  0012B6  EE20 F002          	lfsr	2,2
  4855  0012BA  0100               	movlb	0	; () banked
  4856  0012BC  5166               	movf	__doprnt@pb& (0+255),w,b
  4857  0012BE  26D9               	addwf	fsr2l,f,c
  4858  0012C0  0100               	movlb	0	; () banked
  4859  0012C2  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4860  0012C4  22DA               	addwfc	fsr2h,f,c
  4861  0012C6  50DE               	movf	postinc2,w,c
  4862  0012C8  10DD               	iorwf	postdec2,w,c
  4863  0012CA  B4D8               	btfsc	status,2,c
  4864  0012CC  D017               	goto	l4991
  4865                           
  4866                           ; BSR set to: 0
  4867  0012CE  0100               	movlb	0	; () banked
  4868  0012D0  EE20 F002          	lfsr	2,2
  4869  0012D4  0100               	movlb	0	; () banked
  4870  0012D6  5166               	movf	__doprnt@pb& (0+255),w,b
  4871  0012D8  26D9               	addwf	fsr2l,f,c
  4872  0012DA  0100               	movlb	0	; () banked
  4873  0012DC  5167               	movf	(__doprnt@pb+1)& (0+255),w,b
  4874  0012DE  22DA               	addwfc	fsr2h,f,c
  4875  0012E0  D801               	call	u6188
  4876  0012E2  D022               	goto	l4995
  4877  0012E4                     u6188:
  4878  0012E4  0005               	push	
  4879  0012E6  6EFA               	movwf	pclath,c
  4880  0012E8  50DE               	movf	postinc2,w,c
  4881  0012EA  6EFD               	movwf	tosl,c
  4882  0012EC  50DE               	movf	postinc2,w,c
  4883  0012EE  6EFE               	movwf	tosh,c
  4884  0012F0  50F8               	movf	tblptru,w,c
  4885  0012F2  6EFF               	movwf	tosu,c
  4886  0012F4  50FA               	movf	pclath,w,c
  4887  0012F6  0100               	movlb	0	; () banked
  4888  0012F8  5195               	movf	__doprnt@c& (0+255),w,b
  4889  0012FA  0012               	return		;indir
  4890  0012FC                     l4991:
  4891  0012FC  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4892  001300  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4893  001304  CFDE F06C          	movff	postinc2,??__doprnt
  4894  001308  CFDD F06D          	movff	postdec2,??__doprnt+1
  4895  00130C  C06C  FFD9         	movff	??__doprnt,fsr2l
  4896  001310  C06D  FFDA         	movff	??__doprnt+1,fsr2h
  4897  001314  0100               	movlb	0	; () banked
  4898  001316  C095  FFDF         	movff	__doprnt@c,indf2
  4899                           
  4900                           ; BSR set to: 0
  4901  00131A  C066  FFD9         	movff	__doprnt@pb,fsr2l
  4902  00131E  C067  FFDA         	movff	__doprnt@pb+1,fsr2h
  4903  001322  2ADE               	incf	postinc2,f,c
  4904  001324  0E00               	movlw	0
  4905  001326  22DD               	addwfc	postdec2,f,c
  4906  001328                     l4995:
  4907  001328  0100               	movlb	0	; () banked
  4908  00132A  0785               	decf	__doprnt@prec& (0+255),f,b
  4909  00132C  A0D8               	btfss	status,0,c
  4910  00132E  0786               	decf	(__doprnt@prec+1)& (0+255),f,b
  4911  001330  0100               	movlb	0	; () banked
  4912  001332  2985               	incf	__doprnt@prec& (0+255),w,b
  4913  001334  B4D8               	btfsc	status,2,c
  4914  001336  2986               	incf	(__doprnt@prec+1)& (0+255),w,b
  4915  001338  A4D8               	btfss	status,2,c
  4916  00133A  D7B3               	goto	l4985
  4917  00133C                     l4997:
  4918  00133C  0100               	movlb	0	; () banked
  4919  00133E  C068  FFF6         	movff	__doprnt@f,tblptrl
  4920  001342  0100               	movlb	0	; () banked
  4921  001344  C069  FFF7         	movff	__doprnt@f+1,tblptrh
  4922  001348  0100               	movlb	0	; () banked
  4923  00134A  4B68               	infsnz	__doprnt@f& (0+255),f,b
  4924  00134C  2B69               	incf	(__doprnt@f+1)& (0+255),f,b
  4925  00134E                     	if	0	;tblptru may be non-zero
  4926  00134E                     	endif
  4927  00134E                     	if	0	;tblptru may be non-zero
  4928  00134E                     	endif
  4929  00134E  0008               	tblrd		*
  4930  001350  0100               	movlb	0	; () banked
  4931  001352  CFF5 F095          	movff	tablat,__doprnt@c
  4932  001356  0100               	movlb	0	; () banked
  4933  001358  6795               	tstfsz	__doprnt@c& (0+255),b
  4934  00135A  EF5A  F000         	goto	l4627
  4935  00135E                     l4999:
  4936                           
  4937                           ;doprnt.c: 1549: return 0;
  4938  00135E  0E00               	movlw	0
  4939  001360  0100               	movlb	0	; () banked
  4940  001362  6F67               	movwf	(?__doprnt+1)& (0+255),b
  4941  001364  0E00               	movlw	0
  4942  001366  0100               	movlb	0	; () banked
  4943  001368  6F66               	movwf	?__doprnt& (0+255),b
  4944  00136A  0012               	return	
  4945  00136C                     __end_of__doprnt:
  4946                           	opt stack 0
  4947                           tosu	equ	0xFFF
  4948                           tosh	equ	0xFFE
  4949                           tosl	equ	0xFFD
  4950                           pclath	equ	0xFFA
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           intcon2	equ	0xFF1
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           postdec1	equ	0xFE5
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _scale *****************
  4971 ;; Defined at:
  4972 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  scl             1    wreg     char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  scl             1   62[COMRAM] char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  3   56[COMRAM] char 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4986 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4987 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4989 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;Total ram usage:        7 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    3
  4993 ;; This function calls:
  4994 ;;		___awdiv
  4995 ;;		___awmod
  4996 ;;		___ftmul
  4997 ;;		___wmul
  4998 ;; This function is called by:
  4999 ;;		__doprnt
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text9
  5004  00136C                     __ptext9:
  5005                           	opt stack 0
  5006  00136C                     _scale:
  5007                           	opt stack 24
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;incstack = 0
  5011                           ;scale@scl stored from wreg
  5012  00136C  6E3F               	movwf	scale@scl,c
  5013                           
  5014                           ;doprnt.c: 428: if(scl < 0) {
  5015  00136E  AE3F               	btfss	scale@scl,7,c
  5016  001370  D101               	goto	l4497
  5017                           
  5018                           ;doprnt.c: 429: scl = -scl;
  5019  001372  6C3F               	negf	scale@scl,c
  5020                           
  5021                           ;doprnt.c: 430: if(scl>=110)
  5022  001374  503F               	movf	scale@scl,w,c
  5023  001376  0A80               	xorlw	128
  5024  001378  0F12               	addlw	-238
  5025  00137A  A0D8               	btfss	status,0,c
  5026  00137C  D091               	goto	l4487
  5027                           
  5028                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5029  00137E  0E00               	movlw	0
  5030  001380  6E20               	movwf	___wmul@multiplicand+1,c
  5031  001382  0E03               	movlw	3
  5032  001384  6E1F               	movwf	___wmul@multiplicand,c
  5033  001386  0E00               	movlw	0
  5034  001388  6E18               	movwf	___awdiv@divisor+1,c
  5035  00138A  0E0A               	movlw	10
  5036  00138C  6E17               	movwf	___awdiv@divisor,c
  5037  00138E  0E00               	movlw	0
  5038  001390  6E12               	movwf	___awmod@divisor+1,c
  5039  001392  0E64               	movlw	100
  5040  001394  6E11               	movwf	___awmod@divisor,c
  5041  001396  503F               	movf	scale@scl,w,c
  5042  001398  6E0F               	movwf	___awmod@dividend,c
  5043  00139A  6A10               	clrf	___awmod@dividend+1,c
  5044  00139C  BE0F               	btfsc	___awmod@dividend,7,c
  5045  00139E  0610               	decf	___awmod@dividend+1,f,c
  5046  0013A0  EC14  F013         	call	___awmod
  5047  0013A4  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5048  0013A8  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5049  0013AC  EC75  F012         	call	___awdiv	;wreg free
  5050  0013B0  0E09               	movlw	9
  5051  0013B2  2415               	addwf	?___awdiv,w,c
  5052  0013B4  6E1D               	movwf	___wmul@multiplier,c
  5053  0013B6  0E00               	movlw	0
  5054  0013B8  2016               	addwfc	?___awdiv+1,w,c
  5055  0013BA  6E1E               	movwf	___wmul@multiplier+1,c
  5056  0013BC  EC2A  F017         	call	___wmul	;wreg free
  5057  0013C0  0EF5               	movlw	low __npowers_
  5058  0013C2  241D               	addwf	?___wmul,w,c
  5059  0013C4  6EF6               	movwf	tblptrl,c
  5060  0013C6  0E7E               	movlw	high __npowers_
  5061  0013C8  201E               	addwfc	?___wmul+1,w,c
  5062  0013CA  6EF7               	movwf	tblptrh,c
  5063  0013CC                     	if	0	;There are less than 3 active tblptr bytes
  5064  0013CC                     	endif
  5065  0013CC  0009               	tblrd		*+
  5066  0013CE  CFF5 F02D          	movff	tablat,___ftmul@f2
  5067  0013D2  0009               	tblrd		*+
  5068  0013D4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5069  0013D8  000A               	tblrd		*-
  5070  0013DA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5071  0013DE  0E00               	movlw	0
  5072  0013E0  6E18               	movwf	___awdiv@divisor+1,c
  5073  0013E2  0E64               	movlw	100
  5074  0013E4  6E17               	movwf	___awdiv@divisor,c
  5075  0013E6  503F               	movf	scale@scl,w,c
  5076  0013E8  6E15               	movwf	___awdiv@dividend,c
  5077  0013EA  6A16               	clrf	___awdiv@dividend+1,c
  5078  0013EC  BE15               	btfsc	___awdiv@dividend,7,c
  5079  0013EE  0616               	decf	___awdiv@dividend+1,f,c
  5080  0013F0  EC75  F012         	call	___awdiv	;wreg free
  5081  0013F4  0E12               	movlw	18
  5082  0013F6  2415               	addwf	?___awdiv,w,c
  5083  0013F8  6E1D               	movwf	___wmul@multiplier,c
  5084  0013FA  0E00               	movlw	0
  5085  0013FC  2016               	addwfc	?___awdiv+1,w,c
  5086  0013FE  6E1E               	movwf	___wmul@multiplier+1,c
  5087  001400  0E00               	movlw	0
  5088  001402  6E20               	movwf	___wmul@multiplicand+1,c
  5089  001404  0E03               	movlw	3
  5090  001406  6E1F               	movwf	___wmul@multiplicand,c
  5091  001408  EC2A  F017         	call	___wmul	;wreg free
  5092  00140C  0EF5               	movlw	low __npowers_
  5093  00140E  241D               	addwf	?___wmul,w,c
  5094  001410  6EF6               	movwf	tblptrl,c
  5095  001412  0E7E               	movlw	high __npowers_
  5096  001414  201E               	addwfc	?___wmul+1,w,c
  5097  001416  6EF7               	movwf	tblptrh,c
  5098  001418                     	if	0	;There are less than 3 active tblptr bytes
  5099  001418                     	endif
  5100  001418  0009               	tblrd		*+
  5101  00141A  CFF5 F02A          	movff	tablat,___ftmul@f1
  5102  00141E  0009               	tblrd		*+
  5103  001420  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5104  001424  000A               	tblrd		*-
  5105  001426  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5106  00142A  EC72  F010         	call	___ftmul	;wreg free
  5107  00142E  C02A  F03C         	movff	?___ftmul,_scale$2566
  5108  001432  C02B  F03D         	movff	?___ftmul+1,_scale$2566+1
  5109  001436  C02C  F03E         	movff	?___ftmul+2,_scale$2566+2
  5110                           
  5111                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5112  00143A  C03C  F02A         	movff	_scale$2566,___ftmul@f1
  5113  00143E  C03D  F02B         	movff	_scale$2566+1,___ftmul@f1+1
  5114  001442  C03E  F02C         	movff	_scale$2566+2,___ftmul@f1+2
  5115  001446  0E00               	movlw	0
  5116  001448  6E20               	movwf	___wmul@multiplicand+1,c
  5117  00144A  0E03               	movlw	3
  5118  00144C  6E1F               	movwf	___wmul@multiplicand,c
  5119  00144E  0E00               	movlw	0
  5120  001450  6E12               	movwf	___awmod@divisor+1,c
  5121  001452  0E0A               	movlw	10
  5122  001454  6E11               	movwf	___awmod@divisor,c
  5123  001456  503F               	movf	scale@scl,w,c
  5124  001458  6E0F               	movwf	___awmod@dividend,c
  5125  00145A  6A10               	clrf	___awmod@dividend+1,c
  5126  00145C  BE0F               	btfsc	___awmod@dividend,7,c
  5127  00145E  0610               	decf	___awmod@dividend+1,f,c
  5128  001460  EC14  F013         	call	___awmod	;wreg free
  5129  001464  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5130  001468  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5131  00146C  EC2A  F017         	call	___wmul	;wreg free
  5132  001470  0EF5               	movlw	low __npowers_
  5133  001472  241D               	addwf	?___wmul,w,c
  5134  001474  6EF6               	movwf	tblptrl,c
  5135  001476  0E7E               	movlw	high __npowers_
  5136  001478  201E               	addwfc	?___wmul+1,w,c
  5137  00147A  6EF7               	movwf	tblptrh,c
  5138  00147C                     	if	0	;There are less than 3 active tblptr bytes
  5139  00147C                     	endif
  5140  00147C  0009               	tblrd		*+
  5141  00147E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5142  001482  0009               	tblrd		*+
  5143  001484  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5144  001488  000A               	tblrd		*-
  5145  00148A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5146  00148E  EC72  F010         	call	___ftmul	;wreg free
  5147  001492  C02A  F039         	movff	?___ftmul,?_scale
  5148  001496  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5149  00149A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5150  00149E  0012               	return	
  5151  0014A0                     l4487:
  5152                           
  5153                           ;doprnt.c: 432: else if(scl > 10)
  5154  0014A0  503F               	movf	scale@scl,w,c
  5155  0014A2  0A80               	xorlw	128
  5156  0014A4  0F75               	addlw	-139
  5157  0014A6  A0D8               	btfss	status,0,c
  5158  0014A8  D053               	goto	l4493
  5159                           
  5160                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5161  0014AA  0E00               	movlw	0
  5162  0014AC  6E18               	movwf	___awdiv@divisor+1,c
  5163  0014AE  0E0A               	movlw	10
  5164  0014B0  6E17               	movwf	___awdiv@divisor,c
  5165  0014B2  503F               	movf	scale@scl,w,c
  5166  0014B4  6E15               	movwf	___awdiv@dividend,c
  5167  0014B6  6A16               	clrf	___awdiv@dividend+1,c
  5168  0014B8  BE15               	btfsc	___awdiv@dividend,7,c
  5169  0014BA  0616               	decf	___awdiv@dividend+1,f,c
  5170  0014BC  EC75  F012         	call	___awdiv	;wreg free
  5171  0014C0  0E09               	movlw	9
  5172  0014C2  2415               	addwf	?___awdiv,w,c
  5173  0014C4  6E1D               	movwf	___wmul@multiplier,c
  5174  0014C6  0E00               	movlw	0
  5175  0014C8  2016               	addwfc	?___awdiv+1,w,c
  5176  0014CA  6E1E               	movwf	___wmul@multiplier+1,c
  5177  0014CC  0E00               	movlw	0
  5178  0014CE  6E20               	movwf	___wmul@multiplicand+1,c
  5179  0014D0  0E03               	movlw	3
  5180  0014D2  6E1F               	movwf	___wmul@multiplicand,c
  5181  0014D4  EC2A  F017         	call	___wmul	;wreg free
  5182  0014D8  0EF5               	movlw	low __npowers_
  5183  0014DA  241D               	addwf	?___wmul,w,c
  5184  0014DC  6EF6               	movwf	tblptrl,c
  5185  0014DE  0E7E               	movlw	high __npowers_
  5186  0014E0  201E               	addwfc	?___wmul+1,w,c
  5187  0014E2  6EF7               	movwf	tblptrh,c
  5188  0014E4                     	if	0	;There are less than 3 active tblptr bytes
  5189  0014E4                     	endif
  5190  0014E4  0009               	tblrd		*+
  5191  0014E6  CFF5 F02A          	movff	tablat,___ftmul@f1
  5192  0014EA  0009               	tblrd		*+
  5193  0014EC  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5194  0014F0  000A               	tblrd		*-
  5195  0014F2  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5196  0014F6  0E00               	movlw	0
  5197  0014F8  6E20               	movwf	___wmul@multiplicand+1,c
  5198  0014FA  0E03               	movlw	3
  5199  0014FC  6E1F               	movwf	___wmul@multiplicand,c
  5200  0014FE  0E00               	movlw	0
  5201  001500  6E12               	movwf	___awmod@divisor+1,c
  5202  001502  0E0A               	movlw	10
  5203  001504  6E11               	movwf	___awmod@divisor,c
  5204  001506  503F               	movf	scale@scl,w,c
  5205  001508  6E0F               	movwf	___awmod@dividend,c
  5206  00150A  6A10               	clrf	___awmod@dividend+1,c
  5207  00150C  BE0F               	btfsc	___awmod@dividend,7,c
  5208  00150E  0610               	decf	___awmod@dividend+1,f,c
  5209  001510  EC14  F013         	call	___awmod	;wreg free
  5210  001514  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5211  001518  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5212  00151C  EC2A  F017         	call	___wmul	;wreg free
  5213  001520  0EF5               	movlw	low __npowers_
  5214  001522  241D               	addwf	?___wmul,w,c
  5215  001524  6EF6               	movwf	tblptrl,c
  5216  001526  0E7E               	movlw	high __npowers_
  5217  001528  201E               	addwfc	?___wmul+1,w,c
  5218  00152A  6EF7               	movwf	tblptrh,c
  5219  00152C                     	if	0	;There are less than 3 active tblptr bytes
  5220  00152C                     	endif
  5221  00152C  0009               	tblrd		*+
  5222  00152E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5223  001532  0009               	tblrd		*+
  5224  001534  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5225  001538  000A               	tblrd		*-
  5226  00153A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5227  00153E  EC72  F010         	call	___ftmul	;wreg free
  5228  001542  C02A  F039         	movff	?___ftmul,?_scale
  5229  001546  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5230  00154A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5231  00154E  0012               	return	
  5232  001550                     l4493:
  5233                           
  5234                           ;doprnt.c: 434: return _npowers_[scl];
  5235  001550  503F               	movf	scale@scl,w,c
  5236  001552  0D03               	mullw	3
  5237  001554  0EF5               	movlw	low __npowers_
  5238  001556  24F3               	addwf	prodl,w,c
  5239  001558  6EF6               	movwf	tblptrl,c
  5240  00155A  0E7E               	movlw	high __npowers_
  5241  00155C  20F4               	addwfc	prodh,w,c
  5242  00155E  6EF7               	movwf	tblptrh,c
  5243  001560                     	if	0	;There are less than 3 active tblptr bytes
  5244  001560                     	endif
  5245  001560  0009               	tblrd		*+
  5246  001562  CFF5 F039          	movff	tablat,?_scale
  5247  001566  0009               	tblrd		*+
  5248  001568  CFF5 F03A          	movff	tablat,?_scale+1
  5249  00156C  000A               	tblrd		*-
  5250  00156E  CFF5 F03B          	movff	tablat,?_scale+2
  5251  001572  0012               	return	
  5252  001574                     l4497:
  5253                           
  5254                           ;doprnt.c: 435: }
  5255                           ;doprnt.c: 436: if(scl>=110)
  5256  001574  503F               	movf	scale@scl,w,c
  5257  001576  0A80               	xorlw	128
  5258  001578  0F12               	addlw	-238
  5259  00157A  A0D8               	btfss	status,0,c
  5260  00157C  D091               	goto	l4505
  5261                           
  5262                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5263  00157E  0E00               	movlw	0
  5264  001580  6E20               	movwf	___wmul@multiplicand+1,c
  5265  001582  0E03               	movlw	3
  5266  001584  6E1F               	movwf	___wmul@multiplicand,c
  5267  001586  0E00               	movlw	0
  5268  001588  6E18               	movwf	___awdiv@divisor+1,c
  5269  00158A  0E0A               	movlw	10
  5270  00158C  6E17               	movwf	___awdiv@divisor,c
  5271  00158E  0E00               	movlw	0
  5272  001590  6E12               	movwf	___awmod@divisor+1,c
  5273  001592  0E64               	movlw	100
  5274  001594  6E11               	movwf	___awmod@divisor,c
  5275  001596  503F               	movf	scale@scl,w,c
  5276  001598  6E0F               	movwf	___awmod@dividend,c
  5277  00159A  6A10               	clrf	___awmod@dividend+1,c
  5278  00159C  BE0F               	btfsc	___awmod@dividend,7,c
  5279  00159E  0610               	decf	___awmod@dividend+1,f,c
  5280  0015A0  EC14  F013         	call	___awmod	;wreg free
  5281  0015A4  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5282  0015A8  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5283  0015AC  EC75  F012         	call	___awdiv	;wreg free
  5284  0015B0  0E09               	movlw	9
  5285  0015B2  2415               	addwf	?___awdiv,w,c
  5286  0015B4  6E1D               	movwf	___wmul@multiplier,c
  5287  0015B6  0E00               	movlw	0
  5288  0015B8  2016               	addwfc	?___awdiv+1,w,c
  5289  0015BA  6E1E               	movwf	___wmul@multiplier+1,c
  5290  0015BC  EC2A  F017         	call	___wmul	;wreg free
  5291  0015C0  0E1C               	movlw	low __powers_
  5292  0015C2  241D               	addwf	?___wmul,w,c
  5293  0015C4  6EF6               	movwf	tblptrl,c
  5294  0015C6  0E7F               	movlw	high __powers_
  5295  0015C8  201E               	addwfc	?___wmul+1,w,c
  5296  0015CA  6EF7               	movwf	tblptrh,c
  5297  0015CC                     	if	0	;There are less than 3 active tblptr bytes
  5298  0015CC                     	endif
  5299  0015CC  0009               	tblrd		*+
  5300  0015CE  CFF5 F02D          	movff	tablat,___ftmul@f2
  5301  0015D2  0009               	tblrd		*+
  5302  0015D4  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5303  0015D8  000A               	tblrd		*-
  5304  0015DA  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5305  0015DE  0E00               	movlw	0
  5306  0015E0  6E18               	movwf	___awdiv@divisor+1,c
  5307  0015E2  0E64               	movlw	100
  5308  0015E4  6E17               	movwf	___awdiv@divisor,c
  5309  0015E6  503F               	movf	scale@scl,w,c
  5310  0015E8  6E15               	movwf	___awdiv@dividend,c
  5311  0015EA  6A16               	clrf	___awdiv@dividend+1,c
  5312  0015EC  BE15               	btfsc	___awdiv@dividend,7,c
  5313  0015EE  0616               	decf	___awdiv@dividend+1,f,c
  5314  0015F0  EC75  F012         	call	___awdiv	;wreg free
  5315  0015F4  0E12               	movlw	18
  5316  0015F6  2415               	addwf	?___awdiv,w,c
  5317  0015F8  6E1D               	movwf	___wmul@multiplier,c
  5318  0015FA  0E00               	movlw	0
  5319  0015FC  2016               	addwfc	?___awdiv+1,w,c
  5320  0015FE  6E1E               	movwf	___wmul@multiplier+1,c
  5321  001600  0E00               	movlw	0
  5322  001602  6E20               	movwf	___wmul@multiplicand+1,c
  5323  001604  0E03               	movlw	3
  5324  001606  6E1F               	movwf	___wmul@multiplicand,c
  5325  001608  EC2A  F017         	call	___wmul	;wreg free
  5326  00160C  0E1C               	movlw	low __powers_
  5327  00160E  241D               	addwf	?___wmul,w,c
  5328  001610  6EF6               	movwf	tblptrl,c
  5329  001612  0E7F               	movlw	high __powers_
  5330  001614  201E               	addwfc	?___wmul+1,w,c
  5331  001616  6EF7               	movwf	tblptrh,c
  5332  001618                     	if	0	;There are less than 3 active tblptr bytes
  5333  001618                     	endif
  5334  001618  0009               	tblrd		*+
  5335  00161A  CFF5 F02A          	movff	tablat,___ftmul@f1
  5336  00161E  0009               	tblrd		*+
  5337  001620  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5338  001624  000A               	tblrd		*-
  5339  001626  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5340  00162A  EC72  F010         	call	___ftmul	;wreg free
  5341  00162E  C02A  F03C         	movff	?___ftmul,_scale$2566
  5342  001632  C02B  F03D         	movff	?___ftmul+1,_scale$2566+1
  5343  001636  C02C  F03E         	movff	?___ftmul+2,_scale$2566+2
  5344                           
  5345                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5346  00163A  C03C  F02A         	movff	_scale$2566,___ftmul@f1
  5347  00163E  C03D  F02B         	movff	_scale$2566+1,___ftmul@f1+1
  5348  001642  C03E  F02C         	movff	_scale$2566+2,___ftmul@f1+2
  5349  001646  0E00               	movlw	0
  5350  001648  6E20               	movwf	___wmul@multiplicand+1,c
  5351  00164A  0E03               	movlw	3
  5352  00164C  6E1F               	movwf	___wmul@multiplicand,c
  5353  00164E  0E00               	movlw	0
  5354  001650  6E12               	movwf	___awmod@divisor+1,c
  5355  001652  0E0A               	movlw	10
  5356  001654  6E11               	movwf	___awmod@divisor,c
  5357  001656  503F               	movf	scale@scl,w,c
  5358  001658  6E0F               	movwf	___awmod@dividend,c
  5359  00165A  6A10               	clrf	___awmod@dividend+1,c
  5360  00165C  BE0F               	btfsc	___awmod@dividend,7,c
  5361  00165E  0610               	decf	___awmod@dividend+1,f,c
  5362  001660  EC14  F013         	call	___awmod	;wreg free
  5363  001664  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5364  001668  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5365  00166C  EC2A  F017         	call	___wmul	;wreg free
  5366  001670  0E1C               	movlw	low __powers_
  5367  001672  241D               	addwf	?___wmul,w,c
  5368  001674  6EF6               	movwf	tblptrl,c
  5369  001676  0E7F               	movlw	high __powers_
  5370  001678  201E               	addwfc	?___wmul+1,w,c
  5371  00167A  6EF7               	movwf	tblptrh,c
  5372  00167C                     	if	0	;There are less than 3 active tblptr bytes
  5373  00167C                     	endif
  5374  00167C  0009               	tblrd		*+
  5375  00167E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5376  001682  0009               	tblrd		*+
  5377  001684  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5378  001688  000A               	tblrd		*-
  5379  00168A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5380  00168E  EC72  F010         	call	___ftmul	;wreg free
  5381  001692  C02A  F039         	movff	?___ftmul,?_scale
  5382  001696  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5383  00169A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5384  00169E  0012               	return	
  5385  0016A0                     l4505:
  5386                           
  5387                           ;doprnt.c: 438: else if(scl > 10)
  5388  0016A0  503F               	movf	scale@scl,w,c
  5389  0016A2  0A80               	xorlw	128
  5390  0016A4  0F75               	addlw	-139
  5391  0016A6  A0D8               	btfss	status,0,c
  5392  0016A8  D053               	goto	l4511
  5393                           
  5394                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5395  0016AA  0E00               	movlw	0
  5396  0016AC  6E18               	movwf	___awdiv@divisor+1,c
  5397  0016AE  0E0A               	movlw	10
  5398  0016B0  6E17               	movwf	___awdiv@divisor,c
  5399  0016B2  503F               	movf	scale@scl,w,c
  5400  0016B4  6E15               	movwf	___awdiv@dividend,c
  5401  0016B6  6A16               	clrf	___awdiv@dividend+1,c
  5402  0016B8  BE15               	btfsc	___awdiv@dividend,7,c
  5403  0016BA  0616               	decf	___awdiv@dividend+1,f,c
  5404  0016BC  EC75  F012         	call	___awdiv	;wreg free
  5405  0016C0  0E09               	movlw	9
  5406  0016C2  2415               	addwf	?___awdiv,w,c
  5407  0016C4  6E1D               	movwf	___wmul@multiplier,c
  5408  0016C6  0E00               	movlw	0
  5409  0016C8  2016               	addwfc	?___awdiv+1,w,c
  5410  0016CA  6E1E               	movwf	___wmul@multiplier+1,c
  5411  0016CC  0E00               	movlw	0
  5412  0016CE  6E20               	movwf	___wmul@multiplicand+1,c
  5413  0016D0  0E03               	movlw	3
  5414  0016D2  6E1F               	movwf	___wmul@multiplicand,c
  5415  0016D4  EC2A  F017         	call	___wmul	;wreg free
  5416  0016D8  0E1C               	movlw	low __powers_
  5417  0016DA  241D               	addwf	?___wmul,w,c
  5418  0016DC  6EF6               	movwf	tblptrl,c
  5419  0016DE  0E7F               	movlw	high __powers_
  5420  0016E0  201E               	addwfc	?___wmul+1,w,c
  5421  0016E2  6EF7               	movwf	tblptrh,c
  5422  0016E4                     	if	0	;There are less than 3 active tblptr bytes
  5423  0016E4                     	endif
  5424  0016E4  0009               	tblrd		*+
  5425  0016E6  CFF5 F02A          	movff	tablat,___ftmul@f1
  5426  0016EA  0009               	tblrd		*+
  5427  0016EC  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5428  0016F0  000A               	tblrd		*-
  5429  0016F2  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5430  0016F6  0E00               	movlw	0
  5431  0016F8  6E20               	movwf	___wmul@multiplicand+1,c
  5432  0016FA  0E03               	movlw	3
  5433  0016FC  6E1F               	movwf	___wmul@multiplicand,c
  5434  0016FE  0E00               	movlw	0
  5435  001700  6E12               	movwf	___awmod@divisor+1,c
  5436  001702  0E0A               	movlw	10
  5437  001704  6E11               	movwf	___awmod@divisor,c
  5438  001706  503F               	movf	scale@scl,w,c
  5439  001708  6E0F               	movwf	___awmod@dividend,c
  5440  00170A  6A10               	clrf	___awmod@dividend+1,c
  5441  00170C  BE0F               	btfsc	___awmod@dividend,7,c
  5442  00170E  0610               	decf	___awmod@dividend+1,f,c
  5443  001710  EC14  F013         	call	___awmod	;wreg free
  5444  001714  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5445  001718  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5446  00171C  EC2A  F017         	call	___wmul	;wreg free
  5447  001720  0E1C               	movlw	low __powers_
  5448  001722  241D               	addwf	?___wmul,w,c
  5449  001724  6EF6               	movwf	tblptrl,c
  5450  001726  0E7F               	movlw	high __powers_
  5451  001728  201E               	addwfc	?___wmul+1,w,c
  5452  00172A  6EF7               	movwf	tblptrh,c
  5453  00172C                     	if	0	;There are less than 3 active tblptr bytes
  5454  00172C                     	endif
  5455  00172C  0009               	tblrd		*+
  5456  00172E  CFF5 F02D          	movff	tablat,___ftmul@f2
  5457  001732  0009               	tblrd		*+
  5458  001734  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5459  001738  000A               	tblrd		*-
  5460  00173A  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5461  00173E  EC72  F010         	call	___ftmul	;wreg free
  5462  001742  C02A  F039         	movff	?___ftmul,?_scale
  5463  001746  C02B  F03A         	movff	?___ftmul+1,?_scale+1
  5464  00174A  C02C  F03B         	movff	?___ftmul+2,?_scale+2
  5465  00174E  0012               	return	
  5466  001750                     l4511:
  5467                           
  5468                           ;doprnt.c: 440: return _powers_[scl];
  5469  001750  503F               	movf	scale@scl,w,c
  5470  001752  0D03               	mullw	3
  5471  001754  0E1C               	movlw	low __powers_
  5472  001756  24F3               	addwf	prodl,w,c
  5473  001758  6EF6               	movwf	tblptrl,c
  5474  00175A  0E7F               	movlw	high __powers_
  5475  00175C  20F4               	addwfc	prodh,w,c
  5476  00175E  6EF7               	movwf	tblptrh,c
  5477  001760                     	if	0	;There are less than 3 active tblptr bytes
  5478  001760                     	endif
  5479  001760  0009               	tblrd		*+
  5480  001762  CFF5 F039          	movff	tablat,?_scale
  5481  001766  0009               	tblrd		*+
  5482  001768  CFF5 F03A          	movff	tablat,?_scale+1
  5483  00176C  000A               	tblrd		*-
  5484  00176E  CFF5 F03B          	movff	tablat,?_scale+2
  5485  001772  0012               	return	
  5486  001774                     __end_of_scale:
  5487                           	opt stack 0
  5488                           tosu	equ	0xFFF
  5489                           tosh	equ	0xFFE
  5490                           tosl	equ	0xFFD
  5491                           pclath	equ	0xFFA
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           intcon	equ	0xFF2
  5499                           intcon2	equ	0xFF1
  5500                           postinc0	equ	0xFEE
  5501                           wreg	equ	0xFE8
  5502                           postdec1	equ	0xFE5
  5503                           fsr1l	equ	0xFE1
  5504                           indf2	equ	0xFDF
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _putch *****************
  5512 ;; Defined at:
  5513 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\putch.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  c               1    wreg     unsigned char 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  c               1    0[COMRAM] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5531 ;;Total ram usage:        0 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		__doprnt
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text10
  5542  002FD8                     __ptext10:
  5543                           	opt stack 0
  5544  002FD8                     _putch:
  5545                           	opt stack 26
  5546                           
  5547                           ;incstack = 0
  5548  002FD8  0012               	return	
  5549  002FDA                     __end_of_putch:
  5550                           	opt stack 0
  5551                           tosu	equ	0xFFF
  5552                           tosh	equ	0xFFE
  5553                           tosl	equ	0xFFD
  5554                           pclath	equ	0xFFA
  5555                           tblptru	equ	0xFF8
  5556                           tblptrh	equ	0xFF7
  5557                           tblptrl	equ	0xFF6
  5558                           tablat	equ	0xFF5
  5559                           prodh	equ	0xFF4
  5560                           prodl	equ	0xFF3
  5561                           intcon	equ	0xFF2
  5562                           intcon2	equ	0xFF1
  5563                           postinc0	equ	0xFEE
  5564                           wreg	equ	0xFE8
  5565                           postdec1	equ	0xFE5
  5566                           fsr1l	equ	0xFE1
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           postdec2	equ	0xFDD
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function _isdigit *****************
  5575 ;; Defined at:
  5576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  c               1    wreg     unsigned char 
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  c               1   16[COMRAM] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;		None               void
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5593 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5594 ;;Total ram usage:        3 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    1
  5597 ;; This function calls:
  5598 ;;		Nothing
  5599 ;; This function is called by:
  5600 ;;		__doprnt
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text11
  5605  002F0A                     __ptext11:
  5606                           	opt stack 0
  5607  002F0A                     _isdigit:
  5608                           	opt stack 26
  5609                           
  5610                           ;incstack = 0
  5611                           ;isdigit@c stored from wreg
  5612  002F0A  6E11               	movwf	isdigit@c,c
  5613  002F0C  0E00               	movlw	0
  5614  002F0E  6E10               	movwf	_isdigit$2257,c
  5615  002F10  0E3A               	movlw	58
  5616  002F12  5C11               	subwf	isdigit@c,w,c
  5617  002F14  B0D8               	btfsc	status,0,c
  5618  002F16  D005               	goto	l3137
  5619  002F18  0E2F               	movlw	47
  5620  002F1A  6411               	cpfsgt	isdigit@c,c
  5621  002F1C  D002               	goto	l3137
  5622  002F1E  0E01               	movlw	1
  5623  002F20  6E10               	movwf	_isdigit$2257,c
  5624  002F22                     l3137:
  5625  002F22  C010  F00F         	movff	_isdigit$2257,??_isdigit
  5626  002F26  300F               	rrcf	??_isdigit,w,c
  5627  002F28  0012               	return	
  5628  002F2A                     __end_of_isdigit:
  5629                           	opt stack 0
  5630                           tosu	equ	0xFFF
  5631                           tosh	equ	0xFFE
  5632                           tosl	equ	0xFFD
  5633                           pclath	equ	0xFFA
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           postinc0	equ	0xFEE
  5643                           wreg	equ	0xFE8
  5644                           postdec1	equ	0xFE5
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _fround *****************
  5654 ;; Defined at:
  5655 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  prec            1    wreg     unsigned char 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  prec            1   65[COMRAM] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  3   56[COMRAM] unsigned char 
  5662 ;; Registers used:
  5663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5669 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5673 ;;Total ram usage:       10 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    3
  5676 ;; This function calls:
  5677 ;;		___awdiv
  5678 ;;		___awmod
  5679 ;;		___ftmul
  5680 ;;		___wmul
  5681 ;; This function is called by:
  5682 ;;		__doprnt
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text12
  5687  001774                     __ptext12:
  5688                           	opt stack 0
  5689  001774                     _fround:
  5690                           	opt stack 24
  5691                           
  5692                           ;incstack = 0
  5693                           ;fround@prec stored from wreg
  5694  001774  6E42               	movwf	fround@prec,c
  5695                           
  5696                           ;doprnt.c: 413: if(prec>=110)
  5697  001776  0E6D               	movlw	109
  5698  001778  6442               	cpfsgt	fround@prec,c
  5699  00177A  D09F               	goto	l4465
  5700                           
  5701                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5702  00177C  0E00               	movlw	0
  5703  00177E  6E20               	movwf	___wmul@multiplicand+1,c
  5704  001780  0E03               	movlw	3
  5705  001782  6E1F               	movwf	___wmul@multiplicand,c
  5706  001784  0E00               	movlw	0
  5707  001786  6E18               	movwf	___awdiv@divisor+1,c
  5708  001788  0E0A               	movlw	10
  5709  00178A  6E17               	movwf	___awdiv@divisor,c
  5710  00178C  0E00               	movlw	0
  5711  00178E  6E12               	movwf	___awmod@divisor+1,c
  5712  001790  0E64               	movlw	100
  5713  001792  6E11               	movwf	___awmod@divisor,c
  5714  001794  C042  F00F         	movff	fround@prec,___awmod@dividend
  5715  001798  6A10               	clrf	___awmod@dividend+1,c
  5716  00179A  EC14  F013         	call	___awmod	;wreg free
  5717  00179E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  5718  0017A2  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  5719  0017A6  EC75  F012         	call	___awdiv	;wreg free
  5720  0017AA  0E09               	movlw	9
  5721  0017AC  2415               	addwf	?___awdiv,w,c
  5722  0017AE  6E1D               	movwf	___wmul@multiplier,c
  5723  0017B0  0E00               	movlw	0
  5724  0017B2  2016               	addwfc	?___awdiv+1,w,c
  5725  0017B4  6E1E               	movwf	___wmul@multiplier+1,c
  5726  0017B6  EC2A  F017         	call	___wmul	;wreg free
  5727  0017BA  0EF5               	movlw	low __npowers_
  5728  0017BC  241D               	addwf	?___wmul,w,c
  5729  0017BE  6EF6               	movwf	tblptrl,c
  5730  0017C0  0E7E               	movlw	high __npowers_
  5731  0017C2  201E               	addwfc	?___wmul+1,w,c
  5732  0017C4  6EF7               	movwf	tblptrh,c
  5733  0017C6                     	if	0	;There are less than 3 active tblptr bytes
  5734  0017C6                     	endif
  5735  0017C6  0009               	tblrd		*+
  5736  0017C8  CFF5 F02D          	movff	tablat,___ftmul@f2
  5737  0017CC  0009               	tblrd		*+
  5738  0017CE  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5739  0017D2  000A               	tblrd		*-
  5740  0017D4  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5741  0017D8  0E00               	movlw	0
  5742  0017DA  6E18               	movwf	___awdiv@divisor+1,c
  5743  0017DC  0E64               	movlw	100
  5744  0017DE  6E17               	movwf	___awdiv@divisor,c
  5745  0017E0  C042  F015         	movff	fround@prec,___awdiv@dividend
  5746  0017E4  6A16               	clrf	___awdiv@dividend+1,c
  5747  0017E6  EC75  F012         	call	___awdiv	;wreg free
  5748  0017EA  0E12               	movlw	18
  5749  0017EC  2415               	addwf	?___awdiv,w,c
  5750  0017EE  6E1D               	movwf	___wmul@multiplier,c
  5751  0017F0  0E00               	movlw	0
  5752  0017F2  2016               	addwfc	?___awdiv+1,w,c
  5753  0017F4  6E1E               	movwf	___wmul@multiplier+1,c
  5754  0017F6  0E00               	movlw	0
  5755  0017F8  6E20               	movwf	___wmul@multiplicand+1,c
  5756  0017FA  0E03               	movlw	3
  5757  0017FC  6E1F               	movwf	___wmul@multiplicand,c
  5758  0017FE  EC2A  F017         	call	___wmul	;wreg free
  5759  001802  0EF5               	movlw	low __npowers_
  5760  001804  241D               	addwf	?___wmul,w,c
  5761  001806  6EF6               	movwf	tblptrl,c
  5762  001808  0E7E               	movlw	high __npowers_
  5763  00180A  201E               	addwfc	?___wmul+1,w,c
  5764  00180C  6EF7               	movwf	tblptrh,c
  5765  00180E                     	if	0	;There are less than 3 active tblptr bytes
  5766  00180E                     	endif
  5767  00180E  0009               	tblrd		*+
  5768  001810  CFF5 F02A          	movff	tablat,___ftmul@f1
  5769  001814  0009               	tblrd		*+
  5770  001816  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5771  00181A  000A               	tblrd		*-
  5772  00181C  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5773  001820  EC72  F010         	call	___ftmul	;wreg free
  5774  001824  C02A  F03F         	movff	?___ftmul,_fround$2564
  5775  001828  C02B  F040         	movff	?___ftmul+1,_fround$2564+1
  5776  00182C  C02C  F041         	movff	?___ftmul+2,_fround$2564+2
  5777                           
  5778                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5779  001830  0E00               	movlw	0
  5780  001832  6E20               	movwf	___wmul@multiplicand+1,c
  5781  001834  0E03               	movlw	3
  5782  001836  6E1F               	movwf	___wmul@multiplicand,c
  5783  001838  0E00               	movlw	0
  5784  00183A  6E12               	movwf	___awmod@divisor+1,c
  5785  00183C  0E0A               	movlw	10
  5786  00183E  6E11               	movwf	___awmod@divisor,c
  5787  001840  C042  F00F         	movff	fround@prec,___awmod@dividend
  5788  001844  6A10               	clrf	___awmod@dividend+1,c
  5789  001846  EC14  F013         	call	___awmod	;wreg free
  5790  00184A  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5791  00184E  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5792  001852  EC2A  F017         	call	___wmul	;wreg free
  5793  001856  0EF5               	movlw	low __npowers_
  5794  001858  241D               	addwf	?___wmul,w,c
  5795  00185A  6EF6               	movwf	tblptrl,c
  5796  00185C  0E7E               	movlw	high __npowers_
  5797  00185E  201E               	addwfc	?___wmul+1,w,c
  5798  001860  6EF7               	movwf	tblptrh,c
  5799  001862                     	if	0	;There are less than 3 active tblptr bytes
  5800  001862                     	endif
  5801  001862  0009               	tblrd		*+
  5802  001864  CFF5 F02D          	movff	tablat,___ftmul@f2
  5803  001868  0009               	tblrd		*+
  5804  00186A  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5805  00186E  000A               	tblrd		*-
  5806  001870  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5807  001874  C03F  F02A         	movff	_fround$2564,___ftmul@f1
  5808  001878  C040  F02B         	movff	_fround$2564+1,___ftmul@f1+1
  5809  00187C  C041  F02C         	movff	_fround$2564+2,___ftmul@f1+2
  5810  001880  EC72  F010         	call	___ftmul	;wreg free
  5811  001884  C02A  F03C         	movff	?___ftmul,_fround$2565
  5812  001888  C02B  F03D         	movff	?___ftmul+1,_fround$2565+1
  5813  00188C  C02C  F03E         	movff	?___ftmul+2,_fround$2565+2
  5814                           
  5815                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5816  001890  C03C  F02A         	movff	_fround$2565,___ftmul@f1
  5817  001894  C03D  F02B         	movff	_fround$2565+1,___ftmul@f1+1
  5818  001898  C03E  F02C         	movff	_fround$2565+2,___ftmul@f1+2
  5819  00189C  0E00               	movlw	0
  5820  00189E  6E2D               	movwf	___ftmul@f2,c
  5821  0018A0  0E00               	movlw	0
  5822  0018A2  6E2E               	movwf	___ftmul@f2+1,c
  5823  0018A4  0E3F               	movlw	63
  5824  0018A6  6E2F               	movwf	___ftmul@f2+2,c
  5825  0018A8  EC72  F010         	call	___ftmul	;wreg free
  5826  0018AC  C02A  F039         	movff	?___ftmul,?_fround
  5827  0018B0  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5828  0018B4  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5829  0018B8  0012               	return	
  5830  0018BA                     l4465:
  5831                           
  5832                           ;doprnt.c: 415: else if(prec > 10)
  5833  0018BA  0E0A               	movlw	10
  5834  0018BC  6442               	cpfsgt	fround@prec,c
  5835  0018BE  D063               	goto	l4473
  5836                           
  5837                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5838  0018C0  0E00               	movlw	0
  5839  0018C2  6E20               	movwf	___wmul@multiplicand+1,c
  5840  0018C4  0E03               	movlw	3
  5841  0018C6  6E1F               	movwf	___wmul@multiplicand,c
  5842  0018C8  0E00               	movlw	0
  5843  0018CA  6E12               	movwf	___awmod@divisor+1,c
  5844  0018CC  0E0A               	movlw	10
  5845  0018CE  6E11               	movwf	___awmod@divisor,c
  5846  0018D0  C042  F00F         	movff	fround@prec,___awmod@dividend
  5847  0018D4  6A10               	clrf	___awmod@dividend+1,c
  5848  0018D6  EC14  F013         	call	___awmod	;wreg free
  5849  0018DA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  5850  0018DE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  5851  0018E2  EC2A  F017         	call	___wmul	;wreg free
  5852  0018E6  0EF5               	movlw	low __npowers_
  5853  0018E8  241D               	addwf	?___wmul,w,c
  5854  0018EA  6EF6               	movwf	tblptrl,c
  5855  0018EC  0E7E               	movlw	high __npowers_
  5856  0018EE  201E               	addwfc	?___wmul+1,w,c
  5857  0018F0  6EF7               	movwf	tblptrh,c
  5858  0018F2                     	if	0	;There are less than 3 active tblptr bytes
  5859  0018F2                     	endif
  5860  0018F2  0009               	tblrd		*+
  5861  0018F4  CFF5 F02D          	movff	tablat,___ftmul@f2
  5862  0018F8  0009               	tblrd		*+
  5863  0018FA  CFF5 F02E          	movff	tablat,___ftmul@f2+1
  5864  0018FE  000A               	tblrd		*-
  5865  001900  CFF5 F02F          	movff	tablat,___ftmul@f2+2
  5866  001904  0E00               	movlw	0
  5867  001906  6E18               	movwf	___awdiv@divisor+1,c
  5868  001908  0E0A               	movlw	10
  5869  00190A  6E17               	movwf	___awdiv@divisor,c
  5870  00190C  C042  F015         	movff	fround@prec,___awdiv@dividend
  5871  001910  6A16               	clrf	___awdiv@dividend+1,c
  5872  001912  EC75  F012         	call	___awdiv	;wreg free
  5873  001916  0E09               	movlw	9
  5874  001918  2415               	addwf	?___awdiv,w,c
  5875  00191A  6E1D               	movwf	___wmul@multiplier,c
  5876  00191C  0E00               	movlw	0
  5877  00191E  2016               	addwfc	?___awdiv+1,w,c
  5878  001920  6E1E               	movwf	___wmul@multiplier+1,c
  5879  001922  0E00               	movlw	0
  5880  001924  6E20               	movwf	___wmul@multiplicand+1,c
  5881  001926  0E03               	movlw	3
  5882  001928  6E1F               	movwf	___wmul@multiplicand,c
  5883  00192A  EC2A  F017         	call	___wmul	;wreg free
  5884  00192E  0EF5               	movlw	low __npowers_
  5885  001930  241D               	addwf	?___wmul,w,c
  5886  001932  6EF6               	movwf	tblptrl,c
  5887  001934  0E7E               	movlw	high __npowers_
  5888  001936  201E               	addwfc	?___wmul+1,w,c
  5889  001938  6EF7               	movwf	tblptrh,c
  5890  00193A                     	if	0	;There are less than 3 active tblptr bytes
  5891  00193A                     	endif
  5892  00193A  0009               	tblrd		*+
  5893  00193C  CFF5 F02A          	movff	tablat,___ftmul@f1
  5894  001940  0009               	tblrd		*+
  5895  001942  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5896  001946  000A               	tblrd		*-
  5897  001948  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5898  00194C  EC72  F010         	call	___ftmul	;wreg free
  5899  001950  C02A  F03F         	movff	?___ftmul,_fround$2564
  5900  001954  C02B  F040         	movff	?___ftmul+1,_fround$2564+1
  5901  001958  C02C  F041         	movff	?___ftmul+2,_fround$2564+2
  5902                           
  5903                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5904  00195C  C03F  F02A         	movff	_fround$2564,___ftmul@f1
  5905  001960  C040  F02B         	movff	_fround$2564+1,___ftmul@f1+1
  5906  001964  C041  F02C         	movff	_fround$2564+2,___ftmul@f1+2
  5907  001968  0E00               	movlw	0
  5908  00196A  6E2D               	movwf	___ftmul@f2,c
  5909  00196C  0E00               	movlw	0
  5910  00196E  6E2E               	movwf	___ftmul@f2+1,c
  5911  001970  0E3F               	movlw	63
  5912  001972  6E2F               	movwf	___ftmul@f2+2,c
  5913  001974  EC72  F010         	call	___ftmul	;wreg free
  5914  001978  C02A  F039         	movff	?___ftmul,?_fround
  5915  00197C  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5916  001980  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5917  001984  0012               	return	
  5918  001986                     l4473:
  5919                           
  5920                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5921  001986  5042               	movf	fround@prec,w,c
  5922  001988  0D03               	mullw	3
  5923  00198A  0EF5               	movlw	low __npowers_
  5924  00198C  24F3               	addwf	prodl,w,c
  5925  00198E  6EF6               	movwf	tblptrl,c
  5926  001990  0E7E               	movlw	high __npowers_
  5927  001992  20F4               	addwfc	prodh,w,c
  5928  001994  6EF7               	movwf	tblptrh,c
  5929  001996                     	if	0	;There are less than 3 active tblptr bytes
  5930  001996                     	endif
  5931  001996  0009               	tblrd		*+
  5932  001998  CFF5 F02A          	movff	tablat,___ftmul@f1
  5933  00199C  0009               	tblrd		*+
  5934  00199E  CFF5 F02B          	movff	tablat,___ftmul@f1+1
  5935  0019A2  000A               	tblrd		*-
  5936  0019A4  CFF5 F02C          	movff	tablat,___ftmul@f1+2
  5937  0019A8  0E00               	movlw	0
  5938  0019AA  6E2D               	movwf	___ftmul@f2,c
  5939  0019AC  0E00               	movlw	0
  5940  0019AE  6E2E               	movwf	___ftmul@f2+1,c
  5941  0019B0  0E3F               	movlw	63
  5942  0019B2  6E2F               	movwf	___ftmul@f2+2,c
  5943  0019B4  EC72  F010         	call	___ftmul	;wreg free
  5944  0019B8  C02A  F039         	movff	?___ftmul,?_fround
  5945  0019BC  C02B  F03A         	movff	?___ftmul+1,?_fround+1
  5946  0019C0  C02C  F03B         	movff	?___ftmul+2,?_fround+2
  5947  0019C4  0012               	return	
  5948  0019C6                     __end_of_fround:
  5949                           	opt stack 0
  5950                           tosu	equ	0xFFF
  5951                           tosh	equ	0xFFE
  5952                           tosl	equ	0xFFD
  5953                           pclath	equ	0xFFA
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           intcon	equ	0xFF2
  5961                           intcon2	equ	0xFF1
  5962                           postinc0	equ	0xFEE
  5963                           wreg	equ	0xFE8
  5964                           postdec1	equ	0xFE5
  5965                           fsr1l	equ	0xFE1
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           fsr2h	equ	0xFDA
  5970                           fsr2l	equ	0xFD9
  5971                           status	equ	0xFD8
  5972                           
  5973 ;; *************** function ___wmul *****************
  5974 ;; Defined at:
  5975 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;  multiplier      2   28[COMRAM] unsigned int 
  5978 ;;  multiplicand    2   30[COMRAM] unsigned int 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  product         2   32[COMRAM] unsigned int 
  5981 ;; Return value:  Size  Location     Type
  5982 ;;                  2   28[COMRAM] unsigned int 
  5983 ;; Registers used:
  5984 ;;		wreg, status,2, status,0, prodl, prodh
  5985 ;; Tracked objects:
  5986 ;;		On entry : 0/0
  5987 ;;		On exit  : 0/0
  5988 ;;		Unchanged: 0/0
  5989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5991 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5993 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5994 ;;Total ram usage:        6 bytes
  5995 ;; Hardware stack levels used:    1
  5996 ;; Hardware stack levels required when called:    1
  5997 ;; This function calls:
  5998 ;;		Nothing
  5999 ;; This function is called by:
  6000 ;;		_fround
  6001 ;;		_scale
  6002 ;;		__doprnt
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text13
  6007  002E54                     __ptext13:
  6008                           	opt stack 0
  6009  002E54                     ___wmul:
  6010                           	opt stack 25
  6011                           
  6012                           ;incstack = 0
  6013  002E54  501D               	movf	___wmul@multiplier,w,c
  6014  002E56  021F               	mulwf	___wmul@multiplicand,c
  6015  002E58  CFF3 F021          	movff	prodl,___wmul@product
  6016  002E5C  CFF4 F022          	movff	prodh,___wmul@product+1
  6017  002E60  501D               	movf	___wmul@multiplier,w,c
  6018  002E62  0220               	mulwf	___wmul@multiplicand+1,c
  6019  002E64  50F3               	movf	prodl,w,c
  6020  002E66  2622               	addwf	___wmul@product+1,f,c
  6021  002E68  501E               	movf	___wmul@multiplier+1,w,c
  6022  002E6A  021F               	mulwf	___wmul@multiplicand,c
  6023  002E6C  50F3               	movf	prodl,w,c
  6024  002E6E  2622               	addwf	___wmul@product+1,f,c
  6025  002E70  C021  F01D         	movff	___wmul@product,?___wmul
  6026  002E74  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  6027  002E78  0012               	return	
  6028  002E7A                     __end_of___wmul:
  6029                           	opt stack 0
  6030                           tosu	equ	0xFFF
  6031                           tosh	equ	0xFFE
  6032                           tosl	equ	0xFFD
  6033                           pclath	equ	0xFFA
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           intcon2	equ	0xFF1
  6042                           postinc0	equ	0xFEE
  6043                           wreg	equ	0xFE8
  6044                           postdec1	equ	0xFE5
  6045                           fsr1l	equ	0xFE1
  6046                           indf2	equ	0xFDF
  6047                           postinc2	equ	0xFDE
  6048                           postdec2	equ	0xFDD
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function ___awmod *****************
  6054 ;; Defined at:
  6055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  dividend        2   14[COMRAM] int 
  6058 ;;  divisor         2   16[COMRAM] int 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  sign            1   19[COMRAM] unsigned char 
  6061 ;;  counter         1   18[COMRAM] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  2   14[COMRAM] int 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0, prodl
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6074 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6075 ;;Total ram usage:        6 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    1
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_fround
  6082 ;;		_scale
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           	psect	text14
  6087  002628                     __ptext14:
  6088                           	opt stack 0
  6089  002628                     ___awmod:
  6090                           	opt stack 25
  6091                           
  6092                           ;incstack = 0
  6093  002628  0E00               	movlw	0
  6094  00262A  6E14               	movwf	___awmod@sign,c
  6095  00262C  5010               	movf	___awmod@dividend+1,w,c
  6096  00262E  0A80               	xorlw	128
  6097  002630  6EF3               	movwf	prodl,c
  6098  002632  0E80               	movlw	128
  6099  002634  5CF3               	subwf	prodl,w,c
  6100  002636  0E00               	movlw	0
  6101  002638  B4D8               	btfsc	status,2,c
  6102  00263A  5C0F               	subwf	___awmod@dividend,w,c
  6103  00263C  B0D8               	btfsc	status,0,c
  6104  00263E  D006               	goto	l3015
  6105  002640  6C0F               	negf	___awmod@dividend,c
  6106  002642  1E10               	comf	___awmod@dividend+1,f,c
  6107  002644  B0D8               	btfsc	status,0,c
  6108  002646  2A10               	incf	___awmod@dividend+1,f,c
  6109  002648  0E01               	movlw	1
  6110  00264A  6E14               	movwf	___awmod@sign,c
  6111  00264C                     l3015:
  6112  00264C  5012               	movf	___awmod@divisor+1,w,c
  6113  00264E  0A80               	xorlw	128
  6114  002650  6EF3               	movwf	prodl,c
  6115  002652  0E80               	movlw	128
  6116  002654  5CF3               	subwf	prodl,w,c
  6117  002656  0E00               	movlw	0
  6118  002658  B4D8               	btfsc	status,2,c
  6119  00265A  5C11               	subwf	___awmod@divisor,w,c
  6120  00265C  B0D8               	btfsc	status,0,c
  6121  00265E  D004               	goto	l3019
  6122  002660  6C11               	negf	___awmod@divisor,c
  6123  002662  1E12               	comf	___awmod@divisor+1,f,c
  6124  002664  B0D8               	btfsc	status,0,c
  6125  002666  2A12               	incf	___awmod@divisor+1,f,c
  6126  002668                     l3019:
  6127  002668  5012               	movf	___awmod@divisor+1,w,c
  6128  00266A  1011               	iorwf	___awmod@divisor,w,c
  6129  00266C  B4D8               	btfsc	status,2,c
  6130  00266E  D018               	goto	l3035
  6131  002670  0E01               	movlw	1
  6132  002672  6E13               	movwf	___awmod@counter,c
  6133  002674  D004               	goto	l3025
  6134  002676                     l3023:
  6135  002676  90D8               	bcf	status,0,c
  6136  002678  3611               	rlcf	___awmod@divisor,f,c
  6137  00267A  3612               	rlcf	___awmod@divisor+1,f,c
  6138  00267C  2A13               	incf	___awmod@counter,f,c
  6139  00267E                     l3025:
  6140  00267E  AE12               	btfss	___awmod@divisor+1,7,c
  6141  002680  D7FA               	goto	l3023
  6142  002682                     l3027:
  6143  002682  5011               	movf	___awmod@divisor,w,c
  6144  002684  5C0F               	subwf	___awmod@dividend,w,c
  6145  002686  5012               	movf	___awmod@divisor+1,w,c
  6146  002688  5810               	subwfb	___awmod@dividend+1,w,c
  6147  00268A  A0D8               	btfss	status,0,c
  6148  00268C  D004               	goto	l3031
  6149  00268E  5011               	movf	___awmod@divisor,w,c
  6150  002690  5E0F               	subwf	___awmod@dividend,f,c
  6151  002692  5012               	movf	___awmod@divisor+1,w,c
  6152  002694  5A10               	subwfb	___awmod@dividend+1,f,c
  6153  002696                     l3031:
  6154  002696  90D8               	bcf	status,0,c
  6155  002698  3212               	rrcf	___awmod@divisor+1,f,c
  6156  00269A  3211               	rrcf	___awmod@divisor,f,c
  6157  00269C  2E13               	decfsz	___awmod@counter,f,c
  6158  00269E  D7F1               	goto	l3027
  6159  0026A0                     l3035:
  6160  0026A0  5014               	movf	___awmod@sign,w,c
  6161  0026A2  B4D8               	btfsc	status,2,c
  6162  0026A4  D004               	goto	l3039
  6163  0026A6  6C0F               	negf	___awmod@dividend,c
  6164  0026A8  1E10               	comf	___awmod@dividend+1,f,c
  6165  0026AA  B0D8               	btfsc	status,0,c
  6166  0026AC  2A10               	incf	___awmod@dividend+1,f,c
  6167  0026AE                     l3039:
  6168  0026AE  C00F  F00F         	movff	___awmod@dividend,?___awmod
  6169  0026B2  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  6170  0026B6  0012               	return	
  6171  0026B8                     __end_of___awmod:
  6172                           	opt stack 0
  6173                           tosu	equ	0xFFF
  6174                           tosh	equ	0xFFE
  6175                           tosl	equ	0xFFD
  6176                           pclath	equ	0xFFA
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           intcon2	equ	0xFF1
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function ___awdiv *****************
  6197 ;; Defined at:
  6198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  dividend        2   20[COMRAM] int 
  6201 ;;  divisor         2   22[COMRAM] int 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  quotient        2   26[COMRAM] int 
  6204 ;;  sign            1   25[COMRAM] unsigned char 
  6205 ;;  counter         1   24[COMRAM] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  2   20[COMRAM] int 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0, prodl
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6215 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6216 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6218 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6219 ;;Total ram usage:        8 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    1
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_fround
  6226 ;;		_scale
  6227 ;;		__doprnt
  6228 ;;		_dectobcd
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text15
  6233  0024EA                     __ptext15:
  6234                           	opt stack 0
  6235  0024EA                     ___awdiv:
  6236                           	opt stack 25
  6237                           
  6238                           ;incstack = 0
  6239  0024EA  0E00               	movlw	0
  6240  0024EC  6E1A               	movwf	___awdiv@sign,c
  6241  0024EE  5018               	movf	___awdiv@divisor+1,w,c
  6242  0024F0  0A80               	xorlw	128
  6243  0024F2  6EF3               	movwf	prodl,c
  6244  0024F4  0E80               	movlw	128
  6245  0024F6  5CF3               	subwf	prodl,w,c
  6246  0024F8  0E00               	movlw	0
  6247  0024FA  B4D8               	btfsc	status,2,c
  6248  0024FC  5C17               	subwf	___awdiv@divisor,w,c
  6249  0024FE  B0D8               	btfsc	status,0,c
  6250  002500  D006               	goto	l2971
  6251  002502  6C17               	negf	___awdiv@divisor,c
  6252  002504  1E18               	comf	___awdiv@divisor+1,f,c
  6253  002506  B0D8               	btfsc	status,0,c
  6254  002508  2A18               	incf	___awdiv@divisor+1,f,c
  6255  00250A  0E01               	movlw	1
  6256  00250C  6E1A               	movwf	___awdiv@sign,c
  6257  00250E                     l2971:
  6258  00250E  5016               	movf	___awdiv@dividend+1,w,c
  6259  002510  0A80               	xorlw	128
  6260  002512  6EF3               	movwf	prodl,c
  6261  002514  0E80               	movlw	128
  6262  002516  5CF3               	subwf	prodl,w,c
  6263  002518  0E00               	movlw	0
  6264  00251A  B4D8               	btfsc	status,2,c
  6265  00251C  5C15               	subwf	___awdiv@dividend,w,c
  6266  00251E  B0D8               	btfsc	status,0,c
  6267  002520  D006               	goto	l2977
  6268  002522  6C15               	negf	___awdiv@dividend,c
  6269  002524  1E16               	comf	___awdiv@dividend+1,f,c
  6270  002526  B0D8               	btfsc	status,0,c
  6271  002528  2A16               	incf	___awdiv@dividend+1,f,c
  6272  00252A  0E01               	movlw	1
  6273  00252C  1A1A               	xorwf	___awdiv@sign,f,c
  6274  00252E                     l2977:
  6275  00252E  0E00               	movlw	0
  6276  002530  6E1C               	movwf	___awdiv@quotient+1,c
  6277  002532  0E00               	movlw	0
  6278  002534  6E1B               	movwf	___awdiv@quotient,c
  6279  002536  5018               	movf	___awdiv@divisor+1,w,c
  6280  002538  1017               	iorwf	___awdiv@divisor,w,c
  6281  00253A  B4D8               	btfsc	status,2,c
  6282  00253C  D01C               	goto	l2999
  6283  00253E  0E01               	movlw	1
  6284  002540  6E19               	movwf	___awdiv@counter,c
  6285  002542  D004               	goto	l2985
  6286  002544                     l2983:
  6287  002544  90D8               	bcf	status,0,c
  6288  002546  3617               	rlcf	___awdiv@divisor,f,c
  6289  002548  3618               	rlcf	___awdiv@divisor+1,f,c
  6290  00254A  2A19               	incf	___awdiv@counter,f,c
  6291  00254C                     l2985:
  6292  00254C  AE18               	btfss	___awdiv@divisor+1,7,c
  6293  00254E  D7FA               	goto	l2983
  6294  002550                     l2987:
  6295  002550  90D8               	bcf	status,0,c
  6296  002552  361B               	rlcf	___awdiv@quotient,f,c
  6297  002554  361C               	rlcf	___awdiv@quotient+1,f,c
  6298  002556  5017               	movf	___awdiv@divisor,w,c
  6299  002558  5C15               	subwf	___awdiv@dividend,w,c
  6300  00255A  5018               	movf	___awdiv@divisor+1,w,c
  6301  00255C  5816               	subwfb	___awdiv@dividend+1,w,c
  6302  00255E  A0D8               	btfss	status,0,c
  6303  002560  D005               	goto	l2995
  6304  002562  5017               	movf	___awdiv@divisor,w,c
  6305  002564  5E15               	subwf	___awdiv@dividend,f,c
  6306  002566  5018               	movf	___awdiv@divisor+1,w,c
  6307  002568  5A16               	subwfb	___awdiv@dividend+1,f,c
  6308  00256A  801B               	bsf	___awdiv@quotient,0,c
  6309  00256C                     l2995:
  6310  00256C  90D8               	bcf	status,0,c
  6311  00256E  3218               	rrcf	___awdiv@divisor+1,f,c
  6312  002570  3217               	rrcf	___awdiv@divisor,f,c
  6313  002572  2E19               	decfsz	___awdiv@counter,f,c
  6314  002574  D7ED               	goto	l2987
  6315  002576                     l2999:
  6316  002576  501A               	movf	___awdiv@sign,w,c
  6317  002578  B4D8               	btfsc	status,2,c
  6318  00257A  D004               	goto	l3003
  6319  00257C  6C1B               	negf	___awdiv@quotient,c
  6320  00257E  1E1C               	comf	___awdiv@quotient+1,f,c
  6321  002580  B0D8               	btfsc	status,0,c
  6322  002582  2A1C               	incf	___awdiv@quotient+1,f,c
  6323  002584                     l3003:
  6324  002584  C01B  F015         	movff	___awdiv@quotient,?___awdiv
  6325  002588  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
  6326  00258C  0012               	return	
  6327  00258E                     __end_of___awdiv:
  6328                           	opt stack 0
  6329                           tosu	equ	0xFFF
  6330                           tosh	equ	0xFFE
  6331                           tosl	equ	0xFFD
  6332                           pclath	equ	0xFFA
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           intcon2	equ	0xFF1
  6341                           postinc0	equ	0xFEE
  6342                           wreg	equ	0xFE8
  6343                           postdec1	equ	0xFE5
  6344                           fsr1l	equ	0xFE1
  6345                           indf2	equ	0xFDF
  6346                           postinc2	equ	0xFDE
  6347                           postdec2	equ	0xFDD
  6348                           fsr2h	equ	0xFDA
  6349                           fsr2l	equ	0xFD9
  6350                           status	equ	0xFD8
  6351                           
  6352 ;; *************** function __tdiv_to_l_ *****************
  6353 ;; Defined at:
  6354 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  f1              3   14[COMRAM] float 
  6357 ;;  f2              3   17[COMRAM] float 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  quot            4   23[COMRAM] unsigned long 
  6360 ;;  exp1            1   28[COMRAM] unsigned char 
  6361 ;;  cntr            1   27[COMRAM] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  4   14[COMRAM] unsigned long 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6371 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6372 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6373 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6374 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6375 ;;Total ram usage:       15 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    1
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		__doprnt
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text16
  6386  001FB2                     __ptext16:
  6387                           	opt stack 0
  6388  001FB2                     __tdiv_to_l_:
  6389                           	opt stack 26
  6390                           
  6391                           ;incstack = 0
  6392  001FB2  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6393  001FB6  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6394  001FB8  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6395  001FBA  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
  6396  001FBC  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6397  001FBE  E301               	bnc	u3031
  6398  001FC0  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6399  001FC2                     u3031:
  6400  001FC2  5015               	movf	??__tdiv_to_l_,w,c
  6401  001FC4  6E1D               	movwf	__tdiv_to_l_@exp1,c
  6402  001FC6  661D               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  6403  001FC8  D009               	goto	l3147
  6404  001FCA  0E00               	movlw	0
  6405  001FCC  6E0F               	movwf	?__tdiv_to_l_,c
  6406  001FCE  0E00               	movlw	0
  6407  001FD0  6E10               	movwf	?__tdiv_to_l_+1,c
  6408  001FD2  0E00               	movlw	0
  6409  001FD4  6E11               	movwf	?__tdiv_to_l_+2,c
  6410  001FD6  0E00               	movlw	0
  6411  001FD8  6E12               	movwf	?__tdiv_to_l_+3,c
  6412  001FDA  0012               	return	
  6413  001FDC                     l3147:
  6414  001FDC  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6415  001FE0  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6416  001FE2  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6417  001FE4  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
  6418  001FE6  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6419  001FE8  E301               	bnc	u3051
  6420  001FEA  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6421  001FEC                     u3051:
  6422  001FEC  5015               	movf	??__tdiv_to_l_,w,c
  6423  001FEE  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6424  001FF0  661C               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  6425  001FF2  D009               	goto	l3153
  6426  001FF4  0E00               	movlw	0
  6427  001FF6  6E0F               	movwf	?__tdiv_to_l_,c
  6428  001FF8  0E00               	movlw	0
  6429  001FFA  6E10               	movwf	?__tdiv_to_l_+1,c
  6430  001FFC  0E00               	movlw	0
  6431  001FFE  6E11               	movwf	?__tdiv_to_l_+2,c
  6432  002000  0E00               	movlw	0
  6433  002002  6E12               	movwf	?__tdiv_to_l_+3,c
  6434  002004  0012               	return	
  6435  002006                     l3153:
  6436  002006  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  6437  002008  0EFF               	movlw	255
  6438  00200A  160F               	andwf	__tdiv_to_l_@f1,f,c
  6439  00200C  0EFF               	movlw	255
  6440  00200E  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  6441  002010  0E00               	movlw	0
  6442  002012  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  6443  002014  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  6444  002016  0EFF               	movlw	255
  6445  002018  1612               	andwf	__tdiv_to_l_@f2,f,c
  6446  00201A  0EFF               	movlw	255
  6447  00201C  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  6448  00201E  0E00               	movlw	0
  6449  002020  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  6450  002022  0E00               	movlw	0
  6451  002024  6E18               	movwf	__tdiv_to_l_@quot,c
  6452  002026  0E00               	movlw	0
  6453  002028  6E19               	movwf	__tdiv_to_l_@quot+1,c
  6454  00202A  0E00               	movlw	0
  6455  00202C  6E1A               	movwf	__tdiv_to_l_@quot+2,c
  6456  00202E  0E00               	movlw	0
  6457  002030  6E1B               	movwf	__tdiv_to_l_@quot+3,c
  6458  002032  0E7F               	movlw	127
  6459  002034  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6460  002036  501C               	movf	__tdiv_to_l_@cntr,w,c
  6461  002038  0F98               	addlw	152
  6462  00203A  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
  6463  00203C  0E18               	movlw	24
  6464  00203E  6E1C               	movwf	__tdiv_to_l_@cntr,c
  6465  002040                     l1014:
  6466  002040  90D8               	bcf	status,0,c
  6467  002042  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6468  002044  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6469  002046  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6470  002048  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6471  00204A  5012               	movf	__tdiv_to_l_@f2,w,c
  6472  00204C  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  6473  00204E  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6474  002050  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  6475  002052  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6476  002054  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  6477  002056  A0D8               	btfss	status,0,c
  6478  002058  D007               	goto	l1015
  6479  00205A  5012               	movf	__tdiv_to_l_@f2,w,c
  6480  00205C  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  6481  00205E  5013               	movf	__tdiv_to_l_@f2+1,w,c
  6482  002060  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  6483  002062  5014               	movf	__tdiv_to_l_@f2+2,w,c
  6484  002064  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  6485  002066  8018               	bsf	__tdiv_to_l_@quot,0,c
  6486  002068                     l1015:
  6487  002068  90D8               	bcf	status,0,c
  6488  00206A  360F               	rlcf	__tdiv_to_l_@f1,f,c
  6489  00206C  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  6490  00206E  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  6491  002070  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
  6492  002072  D7E6               	goto	l1014
  6493  002074  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
  6494  002076  D019               	goto	l3185
  6495  002078  501D               	movf	__tdiv_to_l_@exp1,w,c
  6496  00207A  0A80               	xorlw	128
  6497  00207C  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  6498  00207E  0EE9               	movlw	233
  6499  002080  0A80               	xorlw	128
  6500  002082  5C15               	subwf	??__tdiv_to_l_,w,c
  6501  002084  B0D8               	btfsc	status,0,c
  6502  002086  D009               	goto	l3181
  6503  002088  0E00               	movlw	0
  6504  00208A  6E0F               	movwf	?__tdiv_to_l_,c
  6505  00208C  0E00               	movlw	0
  6506  00208E  6E10               	movwf	?__tdiv_to_l_+1,c
  6507  002090  0E00               	movlw	0
  6508  002092  6E11               	movwf	?__tdiv_to_l_+2,c
  6509  002094  0E00               	movlw	0
  6510  002096  6E12               	movwf	?__tdiv_to_l_+3,c
  6511  002098  0012               	return	
  6512  00209A                     l3181:
  6513  00209A  90D8               	bcf	status,0,c
  6514  00209C  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
  6515  00209E  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
  6516  0020A0  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
  6517  0020A2  3218               	rrcf	__tdiv_to_l_@quot,f,c
  6518  0020A4  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
  6519  0020A6  D7F9               	goto	l3181
  6520  0020A8  D014               	goto	l1021
  6521  0020AA                     l3185:
  6522  0020AA  0E17               	movlw	23
  6523  0020AC  641D               	cpfsgt	__tdiv_to_l_@exp1,c
  6524  0020AE  D00F               	goto	l3193
  6525  0020B0  0E00               	movlw	0
  6526  0020B2  6E0F               	movwf	?__tdiv_to_l_,c
  6527  0020B4  0E00               	movlw	0
  6528  0020B6  6E10               	movwf	?__tdiv_to_l_+1,c
  6529  0020B8  0E00               	movlw	0
  6530  0020BA  6E11               	movwf	?__tdiv_to_l_+2,c
  6531  0020BC  0E00               	movlw	0
  6532  0020BE  6E12               	movwf	?__tdiv_to_l_+3,c
  6533  0020C0  0012               	return	
  6534  0020C2                     l3191:
  6535  0020C2  90D8               	bcf	status,0,c
  6536  0020C4  3618               	rlcf	__tdiv_to_l_@quot,f,c
  6537  0020C6  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
  6538  0020C8  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
  6539  0020CA  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
  6540  0020CC  061D               	decf	__tdiv_to_l_@exp1,f,c
  6541  0020CE                     l3193:
  6542  0020CE  661D               	tstfsz	__tdiv_to_l_@exp1,c
  6543  0020D0  D7F8               	goto	l3191
  6544  0020D2                     l1021:
  6545  0020D2  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6546  0020D6  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6547  0020DA  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6548  0020DE  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6549  0020E2  0012               	return	
  6550  0020E4                     __end_of__tdiv_to_l_:
  6551                           	opt stack 0
  6552                           tosu	equ	0xFFF
  6553                           tosh	equ	0xFFE
  6554                           tosl	equ	0xFFD
  6555                           pclath	equ	0xFFA
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon	equ	0xFF2
  6563                           intcon2	equ	0xFF1
  6564                           postinc0	equ	0xFEE
  6565                           wreg	equ	0xFE8
  6566                           postdec1	equ	0xFE5
  6567                           fsr1l	equ	0xFE1
  6568                           indf2	equ	0xFDF
  6569                           postinc2	equ	0xFDE
  6570                           postdec2	equ	0xFDD
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function __div_to_l_ *****************
  6576 ;; Defined at:
  6577 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  f1              3   14[COMRAM] unsigned long 
  6580 ;;  f2              3   17[COMRAM] unsigned long 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;  quot            4   24[COMRAM] unsigned long 
  6583 ;;  exp1            1   29[COMRAM] unsigned char 
  6584 ;;  cntr            1   28[COMRAM] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  4   14[COMRAM] unsigned long 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6594 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6595 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6596 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6597 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6598 ;;Total ram usage:       16 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    1
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		__doprnt
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text17
  6609  001D14                     __ptext17:
  6610                           	opt stack 0
  6611  001D14                     __div_to_l_:
  6612                           	opt stack 26
  6613                           
  6614                           ;incstack = 0
  6615  001D14  C00F  F015         	movff	__div_to_l_@f1,??__div_to_l_
  6616  001D18  C010  F016         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  6617  001D1C  C011  F017         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  6618  001D20  C012  F018         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  6619  001D24  0E18               	movlw	24
  6620  001D26  D005               	goto	u3120
  6621  001D28                     u3125:
  6622  001D28  90D8               	bcf	status,0,c
  6623  001D2A  3218               	rrcf	??__div_to_l_+3,f,c
  6624  001D2C  3217               	rrcf	??__div_to_l_+2,f,c
  6625  001D2E  3216               	rrcf	??__div_to_l_+1,f,c
  6626  001D30  3215               	rrcf	??__div_to_l_,f,c
  6627  001D32                     u3120:
  6628  001D32  2EE8               	decfsz	wreg,f,c
  6629  001D34  D7F9               	goto	u3125
  6630  001D36  5015               	movf	??__div_to_l_,w,c
  6631  001D38  6E1E               	movwf	__div_to_l_@exp1,c
  6632  001D3A  661E               	tstfsz	__div_to_l_@exp1& (0+255),c
  6633  001D3C  D009               	goto	l3201
  6634  001D3E  0E00               	movlw	0
  6635  001D40  6E0F               	movwf	?__div_to_l_,c
  6636  001D42  0E00               	movlw	0
  6637  001D44  6E10               	movwf	?__div_to_l_+1,c
  6638  001D46  0E00               	movlw	0
  6639  001D48  6E11               	movwf	?__div_to_l_+2,c
  6640  001D4A  0E00               	movlw	0
  6641  001D4C  6E12               	movwf	?__div_to_l_+3,c
  6642  001D4E  0012               	return	
  6643  001D50                     l3201:
  6644  001D50  C012  F015         	movff	__div_to_l_@f2,??__div_to_l_
  6645  001D54  C013  F016         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  6646  001D58  C014  F017         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  6647  001D5C  C015  F018         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  6648  001D60  0E18               	movlw	24
  6649  001D62  D005               	goto	u3140
  6650  001D64                     u3145:
  6651  001D64  90D8               	bcf	status,0,c
  6652  001D66  3218               	rrcf	??__div_to_l_+3,f,c
  6653  001D68  3217               	rrcf	??__div_to_l_+2,f,c
  6654  001D6A  3216               	rrcf	??__div_to_l_+1,f,c
  6655  001D6C  3215               	rrcf	??__div_to_l_,f,c
  6656  001D6E                     u3140:
  6657  001D6E  2EE8               	decfsz	wreg,f,c
  6658  001D70  D7F9               	goto	u3145
  6659  001D72  5015               	movf	??__div_to_l_,w,c
  6660  001D74  6E1D               	movwf	__div_to_l_@cntr,c
  6661  001D76  661D               	tstfsz	__div_to_l_@cntr& (0+255),c
  6662  001D78  D009               	goto	l3207
  6663  001D7A  0E00               	movlw	0
  6664  001D7C  6E0F               	movwf	?__div_to_l_,c
  6665  001D7E  0E00               	movlw	0
  6666  001D80  6E10               	movwf	?__div_to_l_+1,c
  6667  001D82  0E00               	movlw	0
  6668  001D84  6E11               	movwf	?__div_to_l_+2,c
  6669  001D86  0E00               	movlw	0
  6670  001D88  6E12               	movwf	?__div_to_l_+3,c
  6671  001D8A  0012               	return	
  6672  001D8C                     l3207:
  6673  001D8C  8E11               	bsf	__div_to_l_@f1+2,7,c
  6674  001D8E  0EFF               	movlw	255
  6675  001D90  160F               	andwf	__div_to_l_@f1,f,c
  6676  001D92  0EFF               	movlw	255
  6677  001D94  1610               	andwf	__div_to_l_@f1+1,f,c
  6678  001D96  0EFF               	movlw	255
  6679  001D98  1611               	andwf	__div_to_l_@f1+2,f,c
  6680  001D9A  0E00               	movlw	0
  6681  001D9C  1612               	andwf	__div_to_l_@f1+3,f,c
  6682  001D9E  8E14               	bsf	__div_to_l_@f2+2,7,c
  6683  001DA0  0EFF               	movlw	255
  6684  001DA2  1612               	andwf	__div_to_l_@f2,f,c
  6685  001DA4  0EFF               	movlw	255
  6686  001DA6  1613               	andwf	__div_to_l_@f2+1,f,c
  6687  001DA8  0EFF               	movlw	255
  6688  001DAA  1614               	andwf	__div_to_l_@f2+2,f,c
  6689  001DAC  0E00               	movlw	0
  6690  001DAE  1615               	andwf	__div_to_l_@f2+3,f,c
  6691  001DB0  0E00               	movlw	0
  6692  001DB2  6E19               	movwf	__div_to_l_@quot,c
  6693  001DB4  0E00               	movlw	0
  6694  001DB6  6E1A               	movwf	__div_to_l_@quot+1,c
  6695  001DB8  0E00               	movlw	0
  6696  001DBA  6E1B               	movwf	__div_to_l_@quot+2,c
  6697  001DBC  0E00               	movlw	0
  6698  001DBE  6E1C               	movwf	__div_to_l_@quot+3,c
  6699  001DC0  0E7F               	movlw	127
  6700  001DC2  5E1E               	subwf	__div_to_l_@exp1,f,c
  6701  001DC4  501D               	movf	__div_to_l_@cntr,w,c
  6702  001DC6  0FA0               	addlw	160
  6703  001DC8  5E1E               	subwf	__div_to_l_@exp1,f,c
  6704  001DCA  0E20               	movlw	32
  6705  001DCC  6E1D               	movwf	__div_to_l_@cntr,c
  6706  001DCE                     l3221:
  6707  001DCE  90D8               	bcf	status,0,c
  6708  001DD0  3619               	rlcf	__div_to_l_@quot,f,c
  6709  001DD2  361A               	rlcf	__div_to_l_@quot+1,f,c
  6710  001DD4  361B               	rlcf	__div_to_l_@quot+2,f,c
  6711  001DD6  361C               	rlcf	__div_to_l_@quot+3,f,c
  6712  001DD8  5012               	movf	__div_to_l_@f2,w,c
  6713  001DDA  5C0F               	subwf	__div_to_l_@f1,w,c
  6714  001DDC  5013               	movf	__div_to_l_@f2+1,w,c
  6715  001DDE  5810               	subwfb	__div_to_l_@f1+1,w,c
  6716  001DE0  5014               	movf	__div_to_l_@f2+2,w,c
  6717  001DE2  5811               	subwfb	__div_to_l_@f1+2,w,c
  6718  001DE4  5015               	movf	__div_to_l_@f2+3,w,c
  6719  001DE6  5812               	subwfb	__div_to_l_@f1+3,w,c
  6720  001DE8  A0D8               	btfss	status,0,c
  6721  001DEA  D009               	goto	l3229
  6722  001DEC  5012               	movf	__div_to_l_@f2,w,c
  6723  001DEE  5E0F               	subwf	__div_to_l_@f1,f,c
  6724  001DF0  5013               	movf	__div_to_l_@f2+1,w,c
  6725  001DF2  5A10               	subwfb	__div_to_l_@f1+1,f,c
  6726  001DF4  5014               	movf	__div_to_l_@f2+2,w,c
  6727  001DF6  5A11               	subwfb	__div_to_l_@f1+2,f,c
  6728  001DF8  5015               	movf	__div_to_l_@f2+3,w,c
  6729  001DFA  5A12               	subwfb	__div_to_l_@f1+3,f,c
  6730  001DFC  8019               	bsf	__div_to_l_@quot,0,c
  6731  001DFE                     l3229:
  6732  001DFE  90D8               	bcf	status,0,c
  6733  001E00  360F               	rlcf	__div_to_l_@f1,f,c
  6734  001E02  3610               	rlcf	__div_to_l_@f1+1,f,c
  6735  001E04  3611               	rlcf	__div_to_l_@f1+2,f,c
  6736  001E06  3612               	rlcf	__div_to_l_@f1+3,f,c
  6737  001E08  2E1D               	decfsz	__div_to_l_@cntr,f,c
  6738  001E0A  D7E1               	goto	l3221
  6739  001E0C  AE1E               	btfss	__div_to_l_@exp1,7,c
  6740  001E0E  D019               	goto	l3243
  6741  001E10  501E               	movf	__div_to_l_@exp1,w,c
  6742  001E12  0A80               	xorlw	128
  6743  001E14  6E15               	movwf	??__div_to_l_& (0+255),c
  6744  001E16  0EE1               	movlw	225
  6745  001E18  0A80               	xorlw	128
  6746  001E1A  5C15               	subwf	??__div_to_l_,w,c
  6747  001E1C  B0D8               	btfsc	status,0,c
  6748  001E1E  D009               	goto	l3239
  6749  001E20  0E00               	movlw	0
  6750  001E22  6E0F               	movwf	?__div_to_l_,c
  6751  001E24  0E00               	movlw	0
  6752  001E26  6E10               	movwf	?__div_to_l_+1,c
  6753  001E28  0E00               	movlw	0
  6754  001E2A  6E11               	movwf	?__div_to_l_+2,c
  6755  001E2C  0E00               	movlw	0
  6756  001E2E  6E12               	movwf	?__div_to_l_+3,c
  6757  001E30  0012               	return	
  6758  001E32                     l3239:
  6759  001E32  90D8               	bcf	status,0,c
  6760  001E34  321C               	rrcf	__div_to_l_@quot+3,f,c
  6761  001E36  321B               	rrcf	__div_to_l_@quot+2,f,c
  6762  001E38  321A               	rrcf	__div_to_l_@quot+1,f,c
  6763  001E3A  3219               	rrcf	__div_to_l_@quot,f,c
  6764  001E3C  3E1E               	incfsz	__div_to_l_@exp1,f,c
  6765  001E3E  D7F9               	goto	l3239
  6766  001E40  D014               	goto	l903
  6767  001E42                     l3243:
  6768  001E42  0E1F               	movlw	31
  6769  001E44  641E               	cpfsgt	__div_to_l_@exp1,c
  6770  001E46  D00F               	goto	l3251
  6771  001E48  0E00               	movlw	0
  6772  001E4A  6E0F               	movwf	?__div_to_l_,c
  6773  001E4C  0E00               	movlw	0
  6774  001E4E  6E10               	movwf	?__div_to_l_+1,c
  6775  001E50  0E00               	movlw	0
  6776  001E52  6E11               	movwf	?__div_to_l_+2,c
  6777  001E54  0E00               	movlw	0
  6778  001E56  6E12               	movwf	?__div_to_l_+3,c
  6779  001E58  0012               	return	
  6780  001E5A                     l3249:
  6781  001E5A  90D8               	bcf	status,0,c
  6782  001E5C  3619               	rlcf	__div_to_l_@quot,f,c
  6783  001E5E  361A               	rlcf	__div_to_l_@quot+1,f,c
  6784  001E60  361B               	rlcf	__div_to_l_@quot+2,f,c
  6785  001E62  361C               	rlcf	__div_to_l_@quot+3,f,c
  6786  001E64  061E               	decf	__div_to_l_@exp1,f,c
  6787  001E66                     l3251:
  6788  001E66  661E               	tstfsz	__div_to_l_@exp1,c
  6789  001E68  D7F8               	goto	l3249
  6790  001E6A                     l903:
  6791  001E6A  C019  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  6792  001E6E  C01A  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6793  001E72  C01B  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6794  001E76  C01C  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6795  001E7A  0012               	return	
  6796  001E7C                     __end_of__div_to_l_:
  6797                           	opt stack 0
  6798                           tosu	equ	0xFFF
  6799                           tosh	equ	0xFFE
  6800                           tosl	equ	0xFFD
  6801                           pclath	equ	0xFFA
  6802                           tblptru	equ	0xFF8
  6803                           tblptrh	equ	0xFF7
  6804                           tblptrl	equ	0xFF6
  6805                           tablat	equ	0xFF5
  6806                           prodh	equ	0xFF4
  6807                           prodl	equ	0xFF3
  6808                           intcon	equ	0xFF2
  6809                           intcon2	equ	0xFF1
  6810                           postinc0	equ	0xFEE
  6811                           wreg	equ	0xFE8
  6812                           postdec1	equ	0xFE5
  6813                           fsr1l	equ	0xFE1
  6814                           indf2	equ	0xFDF
  6815                           postinc2	equ	0xFDE
  6816                           postdec2	equ	0xFDD
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function ___lltoft *****************
  6822 ;; Defined at:
  6823 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltoft.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  c               4   22[COMRAM] unsigned long 
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  exp             1   30[COMRAM] unsigned char 
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  3   22[COMRAM] float 
  6830 ;; Registers used:
  6831 ;;		wreg, status,2, status,0, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6837 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6838 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6839 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6840 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6841 ;;Total ram usage:        9 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    2
  6844 ;; This function calls:
  6845 ;;		___ftpack
  6846 ;; This function is called by:
  6847 ;;		__doprnt
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text18
  6852  002B48                     __ptext18:
  6853                           	opt stack 0
  6854  002B48                     ___lltoft:
  6855                           	opt stack 25
  6856                           
  6857                           ;incstack = 0
  6858  002B48  0E8E               	movlw	142
  6859  002B4A  6E1F               	movwf	___lltoft@exp,c
  6860  002B4C  D006               	goto	l4575
  6861  002B4E                     l4573:
  6862  002B4E  90D8               	bcf	status,0,c
  6863  002B50  321A               	rrcf	___lltoft@c+3,f,c
  6864  002B52  3219               	rrcf	___lltoft@c+2,f,c
  6865  002B54  3218               	rrcf	___lltoft@c+1,f,c
  6866  002B56  3217               	rrcf	___lltoft@c,f,c
  6867  002B58  2A1F               	incf	___lltoft@exp,f,c
  6868  002B5A                     l4575:
  6869  002B5A  0E00               	movlw	0
  6870  002B5C  1417               	andwf	___lltoft@c,w,c
  6871  002B5E  6E1B               	movwf	??___lltoft& (0+255),c
  6872  002B60  0E00               	movlw	0
  6873  002B62  1418               	andwf	___lltoft@c+1,w,c
  6874  002B64  6E1C               	movwf	(??___lltoft+1)& (0+255),c
  6875  002B66  0E00               	movlw	0
  6876  002B68  1419               	andwf	___lltoft@c+2,w,c
  6877  002B6A  6E1D               	movwf	(??___lltoft+2)& (0+255),c
  6878  002B6C  0EFF               	movlw	255
  6879  002B6E  141A               	andwf	___lltoft@c+3,w,c
  6880  002B70  6E1E               	movwf	(??___lltoft+3)& (0+255),c
  6881  002B72  501E               	movf	??___lltoft+3,w,c
  6882  002B74  101B               	iorwf	??___lltoft,w,c
  6883  002B76  101C               	iorwf	??___lltoft+1,w,c
  6884  002B78  101D               	iorwf	??___lltoft+2,w,c
  6885  002B7A  A4D8               	btfss	status,2,c
  6886  002B7C  D7E8               	goto	l4573
  6887  002B7E  C017  F00F         	movff	___lltoft@c,___ftpack@arg
  6888  002B82  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
  6889  002B86  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
  6890  002B8A  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
  6891  002B8E  0E00               	movlw	0
  6892  002B90  6E13               	movwf	___ftpack@sign,c
  6893  002B92  EC21  F012         	call	___ftpack	;wreg free
  6894  002B96  C00F  F017         	movff	?___ftpack,?___lltoft
  6895  002B9A  C010  F018         	movff	?___ftpack+1,?___lltoft+1
  6896  002B9E  C011  F019         	movff	?___ftpack+2,?___lltoft+2
  6897  002BA2  0012               	return	
  6898  002BA4                     __end_of___lltoft:
  6899                           	opt stack 0
  6900                           tosu	equ	0xFFF
  6901                           tosh	equ	0xFFE
  6902                           tosl	equ	0xFFD
  6903                           pclath	equ	0xFFA
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           intcon	equ	0xFF2
  6911                           intcon2	equ	0xFF1
  6912                           postinc0	equ	0xFEE
  6913                           wreg	equ	0xFE8
  6914                           postdec1	equ	0xFE5
  6915                           fsr1l	equ	0xFE1
  6916                           indf2	equ	0xFDF
  6917                           postinc2	equ	0xFDE
  6918                           postdec2	equ	0xFDD
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function ___llmod *****************
  6924 ;; Defined at:
  6925 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  dividend        4   27[COMRAM] unsigned long 
  6928 ;;  divisor         4   31[COMRAM] unsigned long 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  counter         1   35[COMRAM] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  4   27[COMRAM] unsigned long 
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6940 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6943 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6944 ;;Total ram usage:        9 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    1
  6947 ;; This function calls:
  6948 ;;		Nothing
  6949 ;; This function is called by:
  6950 ;;		__doprnt
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text19
  6955  0029BA                     __ptext19:
  6956                           	opt stack 0
  6957  0029BA                     ___llmod:
  6958                           	opt stack 26
  6959                           
  6960                           ;incstack = 0
  6961  0029BA  5023               	movf	___llmod@divisor+3,w,c
  6962  0029BC  1020               	iorwf	___llmod@divisor,w,c
  6963  0029BE  1021               	iorwf	___llmod@divisor+1,w,c
  6964  0029C0  1022               	iorwf	___llmod@divisor+2,w,c
  6965  0029C2  B4D8               	btfsc	status,2,c
  6966  0029C4  D024               	goto	l1110
  6967  0029C6  0E01               	movlw	1
  6968  0029C8  6E24               	movwf	___llmod@counter,c
  6969  0029CA  D006               	goto	l3355
  6970  0029CC                     l3353:
  6971  0029CC  90D8               	bcf	status,0,c
  6972  0029CE  3620               	rlcf	___llmod@divisor,f,c
  6973  0029D0  3621               	rlcf	___llmod@divisor+1,f,c
  6974  0029D2  3622               	rlcf	___llmod@divisor+2,f,c
  6975  0029D4  3623               	rlcf	___llmod@divisor+3,f,c
  6976  0029D6  2A24               	incf	___llmod@counter,f,c
  6977  0029D8                     l3355:
  6978  0029D8  AE23               	btfss	___llmod@divisor+3,7,c
  6979  0029DA  D7F8               	goto	l3353
  6980  0029DC                     l3357:
  6981  0029DC  5020               	movf	___llmod@divisor,w,c
  6982  0029DE  5C1C               	subwf	___llmod@dividend,w,c
  6983  0029E0  5021               	movf	___llmod@divisor+1,w,c
  6984  0029E2  581D               	subwfb	___llmod@dividend+1,w,c
  6985  0029E4  5022               	movf	___llmod@divisor+2,w,c
  6986  0029E6  581E               	subwfb	___llmod@dividend+2,w,c
  6987  0029E8  5023               	movf	___llmod@divisor+3,w,c
  6988  0029EA  581F               	subwfb	___llmod@dividend+3,w,c
  6989  0029EC  A0D8               	btfss	status,0,c
  6990  0029EE  D008               	goto	l3361
  6991  0029F0  5020               	movf	___llmod@divisor,w,c
  6992  0029F2  5E1C               	subwf	___llmod@dividend,f,c
  6993  0029F4  5021               	movf	___llmod@divisor+1,w,c
  6994  0029F6  5A1D               	subwfb	___llmod@dividend+1,f,c
  6995  0029F8  5022               	movf	___llmod@divisor+2,w,c
  6996  0029FA  5A1E               	subwfb	___llmod@dividend+2,f,c
  6997  0029FC  5023               	movf	___llmod@divisor+3,w,c
  6998  0029FE  5A1F               	subwfb	___llmod@dividend+3,f,c
  6999  002A00                     l3361:
  7000  002A00  90D8               	bcf	status,0,c
  7001  002A02  3223               	rrcf	___llmod@divisor+3,f,c
  7002  002A04  3222               	rrcf	___llmod@divisor+2,f,c
  7003  002A06  3221               	rrcf	___llmod@divisor+1,f,c
  7004  002A08  3220               	rrcf	___llmod@divisor,f,c
  7005  002A0A  2E24               	decfsz	___llmod@counter,f,c
  7006  002A0C  D7E7               	goto	l3357
  7007  002A0E                     l1110:
  7008  002A0E  C01C  F01C         	movff	___llmod@dividend,?___llmod
  7009  002A12  C01D  F01D         	movff	___llmod@dividend+1,?___llmod+1
  7010  002A16  C01E  F01E         	movff	___llmod@dividend+2,?___llmod+2
  7011  002A1A  C01F  F01F         	movff	___llmod@dividend+3,?___llmod+3
  7012  002A1E  0012               	return	
  7013  002A20                     __end_of___llmod:
  7014                           	opt stack 0
  7015                           tosu	equ	0xFFF
  7016                           tosh	equ	0xFFE
  7017                           tosl	equ	0xFFD
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           postinc0	equ	0xFEE
  7028                           wreg	equ	0xFE8
  7029                           postdec1	equ	0xFE5
  7030                           fsr1l	equ	0xFE1
  7031                           indf2	equ	0xFDF
  7032                           postinc2	equ	0xFDE
  7033                           postdec2	equ	0xFDD
  7034                           fsr2h	equ	0xFDA
  7035                           fsr2l	equ	0xFD9
  7036                           status	equ	0xFD8
  7037                           
  7038 ;; *************** function ___lldiv *****************
  7039 ;; Defined at:
  7040 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;  dividend        4   14[COMRAM] unsigned long 
  7043 ;;  divisor         4   18[COMRAM] unsigned long 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  quotient        4   22[COMRAM] unsigned long 
  7046 ;;  counter         1   26[COMRAM] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;                  4   14[COMRAM] unsigned long 
  7049 ;; Registers used:
  7050 ;;		wreg, status,2, status,0
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7056 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7057 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7059 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7060 ;;Total ram usage:       13 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    1
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		__I2CInit
  7067 ;;		__UART1Init
  7068 ;;		__UART2Init
  7069 ;;		__doprnt
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text20
  7074  002856                     __ptext20:
  7075                           	opt stack 0
  7076  002856                     ___lldiv:
  7077                           	opt stack 26
  7078                           
  7079                           ;incstack = 0
  7080  002856  0E00               	movlw	0
  7081  002858  6E17               	movwf	___lldiv@quotient,c
  7082  00285A  0E00               	movlw	0
  7083  00285C  6E18               	movwf	___lldiv@quotient+1,c
  7084  00285E  0E00               	movlw	0
  7085  002860  6E19               	movwf	___lldiv@quotient+2,c
  7086  002862  0E00               	movlw	0
  7087  002864  6E1A               	movwf	___lldiv@quotient+3,c
  7088  002866  5016               	movf	___lldiv@divisor+3,w,c
  7089  002868  1013               	iorwf	___lldiv@divisor,w,c
  7090  00286A  1014               	iorwf	___lldiv@divisor+1,w,c
  7091  00286C  1015               	iorwf	___lldiv@divisor+2,w,c
  7092  00286E  B4D8               	btfsc	status,2,c
  7093  002870  D02A               	goto	l1100
  7094  002872  0E01               	movlw	1
  7095  002874  6E1B               	movwf	___lldiv@counter,c
  7096  002876  D006               	goto	l3335
  7097  002878                     l3333:
  7098  002878  90D8               	bcf	status,0,c
  7099  00287A  3613               	rlcf	___lldiv@divisor,f,c
  7100  00287C  3614               	rlcf	___lldiv@divisor+1,f,c
  7101  00287E  3615               	rlcf	___lldiv@divisor+2,f,c
  7102  002880  3616               	rlcf	___lldiv@divisor+3,f,c
  7103  002882  2A1B               	incf	___lldiv@counter,f,c
  7104  002884                     l3335:
  7105  002884  AE16               	btfss	___lldiv@divisor+3,7,c
  7106  002886  D7F8               	goto	l3333
  7107  002888                     l3337:
  7108  002888  90D8               	bcf	status,0,c
  7109  00288A  3617               	rlcf	___lldiv@quotient,f,c
  7110  00288C  3618               	rlcf	___lldiv@quotient+1,f,c
  7111  00288E  3619               	rlcf	___lldiv@quotient+2,f,c
  7112  002890  361A               	rlcf	___lldiv@quotient+3,f,c
  7113  002892  5013               	movf	___lldiv@divisor,w,c
  7114  002894  5C0F               	subwf	___lldiv@dividend,w,c
  7115  002896  5014               	movf	___lldiv@divisor+1,w,c
  7116  002898  5810               	subwfb	___lldiv@dividend+1,w,c
  7117  00289A  5015               	movf	___lldiv@divisor+2,w,c
  7118  00289C  5811               	subwfb	___lldiv@dividend+2,w,c
  7119  00289E  5016               	movf	___lldiv@divisor+3,w,c
  7120  0028A0  5812               	subwfb	___lldiv@dividend+3,w,c
  7121  0028A2  A0D8               	btfss	status,0,c
  7122  0028A4  D009               	goto	l3345
  7123  0028A6  5013               	movf	___lldiv@divisor,w,c
  7124  0028A8  5E0F               	subwf	___lldiv@dividend,f,c
  7125  0028AA  5014               	movf	___lldiv@divisor+1,w,c
  7126  0028AC  5A10               	subwfb	___lldiv@dividend+1,f,c
  7127  0028AE  5015               	movf	___lldiv@divisor+2,w,c
  7128  0028B0  5A11               	subwfb	___lldiv@dividend+2,f,c
  7129  0028B2  5016               	movf	___lldiv@divisor+3,w,c
  7130  0028B4  5A12               	subwfb	___lldiv@dividend+3,f,c
  7131  0028B6  8017               	bsf	___lldiv@quotient,0,c
  7132  0028B8                     l3345:
  7133  0028B8  90D8               	bcf	status,0,c
  7134  0028BA  3216               	rrcf	___lldiv@divisor+3,f,c
  7135  0028BC  3215               	rrcf	___lldiv@divisor+2,f,c
  7136  0028BE  3214               	rrcf	___lldiv@divisor+1,f,c
  7137  0028C0  3213               	rrcf	___lldiv@divisor,f,c
  7138  0028C2  2E1B               	decfsz	___lldiv@counter,f,c
  7139  0028C4  D7E1               	goto	l3337
  7140  0028C6                     l1100:
  7141  0028C6  C017  F00F         	movff	___lldiv@quotient,?___lldiv
  7142  0028CA  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  7143  0028CE  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  7144  0028D2  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  7145  0028D6  0012               	return	
  7146  0028D8                     __end_of___lldiv:
  7147                           	opt stack 0
  7148                           tosu	equ	0xFFF
  7149                           tosh	equ	0xFFE
  7150                           tosl	equ	0xFFD
  7151                           pclath	equ	0xFFA
  7152                           tblptru	equ	0xFF8
  7153                           tblptrh	equ	0xFF7
  7154                           tblptrl	equ	0xFF6
  7155                           tablat	equ	0xFF5
  7156                           prodh	equ	0xFF4
  7157                           prodl	equ	0xFF3
  7158                           intcon	equ	0xFF2
  7159                           intcon2	equ	0xFF1
  7160                           postinc0	equ	0xFEE
  7161                           wreg	equ	0xFE8
  7162                           postdec1	equ	0xFE5
  7163                           fsr1l	equ	0xFE1
  7164                           indf2	equ	0xFDF
  7165                           postinc2	equ	0xFDE
  7166                           postdec2	equ	0xFDD
  7167                           fsr2h	equ	0xFDA
  7168                           fsr2l	equ	0xFD9
  7169                           status	equ	0xFD8
  7170                           
  7171 ;; *************** function ___fttol *****************
  7172 ;; Defined at:
  7173 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fttol.c"
  7174 ;; Parameters:    Size  Location     Type
  7175 ;;  f1              3   63[COMRAM] float 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;  lval            4    1[BANK0 ] unsigned long 
  7178 ;;  exp1            1    5[BANK0 ] unsigned char 
  7179 ;;  sign1           1    0[BANK0 ] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;                  4   63[COMRAM] long 
  7182 ;; Registers used:
  7183 ;;		wreg, status,2, status,0
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7190 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7191 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7192 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7193 ;;Total ram usage:       15 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    1
  7196 ;; This function calls:
  7197 ;;		Nothing
  7198 ;; This function is called by:
  7199 ;;		_timer0init
  7200 ;;		__doprnt
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text21
  7205  001E7C                     __ptext21:
  7206                           	opt stack 0
  7207  001E7C                     ___fttol:
  7208                           	opt stack 27
  7209                           
  7210                           ;incstack = 0
  7211  001E7C  C042  F044         	movff	___fttol@f1+2,??___fttol
  7212  001E80  6A45               	clrf	(??___fttol+1)& (0+255),c
  7213  001E82  6A46               	clrf	(??___fttol+2)& (0+255),c
  7214  001E84  3441               	rlcf	___fttol@f1+1,w,c
  7215  001E86  3644               	rlcf	??___fttol& (0+255),f,c
  7216  001E88  E301               	bnc	u5241
  7217  001E8A  8045               	bsf	(??___fttol+1)& (0+255),0,c
  7218  001E8C                     u5241:
  7219  001E8C  5044               	movf	??___fttol,w,c
  7220  001E8E  0100               	movlb	0	; () banked
  7221  001E90  6F65               	movwf	___fttol@exp1& (0+255),b
  7222  001E92  0100               	movlb	0	; () banked
  7223  001E94  6765               	tstfsz	___fttol@exp1& (0+255),b
  7224  001E96  D009               	goto	l4531
  7225                           
  7226                           ; BSR set to: 0
  7227  001E98  0E00               	movlw	0
  7228  001E9A  6E40               	movwf	?___fttol,c
  7229  001E9C  0E00               	movlw	0
  7230  001E9E  6E41               	movwf	?___fttol+1,c
  7231  001EA0  0E00               	movlw	0
  7232  001EA2  6E42               	movwf	?___fttol+2,c
  7233  001EA4  0E00               	movlw	0
  7234  001EA6  6E43               	movwf	?___fttol+3,c
  7235  001EA8  0012               	return	
  7236  001EAA                     l4531:
  7237                           
  7238                           ; BSR set to: 0
  7239  001EAA  0E17               	movlw	23
  7240  001EAC  6E44               	movwf	??___fttol& (0+255),c
  7241  001EAE  C040  F045         	movff	___fttol@f1,??___fttol+1
  7242  001EB2  C041  F046         	movff	___fttol@f1+1,??___fttol+2
  7243  001EB6  C042  F047         	movff	___fttol@f1+2,??___fttol+3
  7244  001EBA  2844               	incf	??___fttol,w,c
  7245  001EBC  6E48               	movwf	(??___fttol+4)& (0+255),c
  7246  001EBE  D004               	goto	u5260
  7247  001EC0                     u5265:
  7248  001EC0  90D8               	bcf	status,0,c
  7249  001EC2  3247               	rrcf	??___fttol+3,f,c
  7250  001EC4  3246               	rrcf	??___fttol+2,f,c
  7251  001EC6  3245               	rrcf	??___fttol+1,f,c
  7252  001EC8                     u5260:
  7253  001EC8  2E48               	decfsz	(??___fttol+4)& (0+255),f,c
  7254  001ECA  D7FA               	goto	u5265
  7255  001ECC  5045               	movf	??___fttol+1,w,c
  7256  001ECE  0100               	movlb	0	; () banked
  7257  001ED0  6F60               	movwf	___fttol@sign1& (0+255),b
  7258                           
  7259                           ; BSR set to: 0
  7260  001ED2  8E41               	bsf	___fttol@f1+1,7,c
  7261                           
  7262                           ; BSR set to: 0
  7263  001ED4  0EFF               	movlw	255
  7264  001ED6  1640               	andwf	___fttol@f1,f,c
  7265  001ED8  0EFF               	movlw	255
  7266  001EDA  1641               	andwf	___fttol@f1+1,f,c
  7267  001EDC  0E00               	movlw	0
  7268  001EDE  1642               	andwf	___fttol@f1+2,f,c
  7269                           
  7270                           ; BSR set to: 0
  7271  001EE0  5040               	movf	___fttol@f1,w,c
  7272  001EE2  0100               	movlb	0	; () banked
  7273  001EE4  6F61               	movwf	___fttol@lval& (0+255),b
  7274  001EE6  5041               	movf	___fttol@f1+1,w,c
  7275  001EE8  0100               	movlb	0	; () banked
  7276  001EEA  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  7277  001EEC  5042               	movf	___fttol@f1+2,w,c
  7278  001EEE  0100               	movlb	0	; () banked
  7279  001EF0  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  7280  001EF2  0100               	movlb	0	; () banked
  7281  001EF4  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  7282                           
  7283                           ; BSR set to: 0
  7284  001EF6  0E8E               	movlw	142
  7285  001EF8  0100               	movlb	0	; () banked
  7286  001EFA  5F65               	subwf	___fttol@exp1& (0+255),f,b
  7287                           
  7288                           ; BSR set to: 0
  7289  001EFC  0100               	movlb	0	; () banked
  7290  001EFE  AF65               	btfss	___fttol@exp1& (0+255),7,b
  7291  001F00  D020               	goto	l4553
  7292                           
  7293                           ; BSR set to: 0
  7294  001F02  0100               	movlb	0	; () banked
  7295  001F04  5165               	movf	___fttol@exp1& (0+255),w,b
  7296  001F06  0A80               	xorlw	128
  7297  001F08  6E44               	movwf	??___fttol& (0+255),c
  7298  001F0A  0EF1               	movlw	241
  7299  001F0C  0A80               	xorlw	128
  7300  001F0E  5C44               	subwf	??___fttol,w,c
  7301  001F10  B0D8               	btfsc	status,0,c
  7302  001F12  D009               	goto	l4549
  7303                           
  7304                           ; BSR set to: 0
  7305  001F14  0E00               	movlw	0
  7306  001F16  6E40               	movwf	?___fttol,c
  7307  001F18  0E00               	movlw	0
  7308  001F1A  6E41               	movwf	?___fttol+1,c
  7309  001F1C  0E00               	movlw	0
  7310  001F1E  6E42               	movwf	?___fttol+2,c
  7311  001F20  0E00               	movlw	0
  7312  001F22  6E43               	movwf	?___fttol+3,c
  7313  001F24  0012               	return	
  7314  001F26                     l4549:
  7315                           
  7316                           ; BSR set to: 0
  7317  001F26  0100               	movlb	0	; () banked
  7318  001F28  90D8               	bcf	status,0,c
  7319  001F2A  0100               	movlb	0	; () banked
  7320  001F2C  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7321  001F2E  0100               	movlb	0	; () banked
  7322  001F30  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7323  001F32  0100               	movlb	0	; () banked
  7324  001F34  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7325  001F36  0100               	movlb	0	; () banked
  7326  001F38  3361               	rrcf	___fttol@lval& (0+255),f,b
  7327                           
  7328                           ; BSR set to: 0
  7329  001F3A  0100               	movlb	0	; () banked
  7330  001F3C  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  7331  001F3E  D7F3               	goto	l4549
  7332  001F40  D01C               	goto	l4563
  7333  001F42                     l4553:
  7334                           
  7335                           ; BSR set to: 0
  7336  001F42  0E17               	movlw	23
  7337  001F44  0100               	movlb	0	; () banked
  7338  001F46  6565               	cpfsgt	___fttol@exp1& (0+255),b
  7339  001F48  D015               	goto	l4561
  7340                           
  7341                           ; BSR set to: 0
  7342  001F4A  0E00               	movlw	0
  7343  001F4C  6E40               	movwf	?___fttol,c
  7344  001F4E  0E00               	movlw	0
  7345  001F50  6E41               	movwf	?___fttol+1,c
  7346  001F52  0E00               	movlw	0
  7347  001F54  6E42               	movwf	?___fttol+2,c
  7348  001F56  0E00               	movlw	0
  7349  001F58  6E43               	movwf	?___fttol+3,c
  7350  001F5A  0012               	return	
  7351  001F5C                     l4559:
  7352                           
  7353                           ; BSR set to: 0
  7354  001F5C  0100               	movlb	0	; () banked
  7355  001F5E  90D8               	bcf	status,0,c
  7356  001F60  0100               	movlb	0	; () banked
  7357  001F62  3761               	rlcf	___fttol@lval& (0+255),f,b
  7358  001F64  0100               	movlb	0	; () banked
  7359  001F66  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7360  001F68  0100               	movlb	0	; () banked
  7361  001F6A  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7362  001F6C  0100               	movlb	0	; () banked
  7363  001F6E  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7364  001F70  0100               	movlb	0	; () banked
  7365  001F72  0765               	decf	___fttol@exp1& (0+255),f,b
  7366  001F74                     l4561:
  7367                           
  7368                           ; BSR set to: 0
  7369  001F74  0100               	movlb	0	; () banked
  7370  001F76  6765               	tstfsz	___fttol@exp1& (0+255),b
  7371  001F78  D7F1               	goto	l4559
  7372  001F7A                     l4563:
  7373                           
  7374                           ; BSR set to: 0
  7375  001F7A  0100               	movlb	0	; () banked
  7376  001F7C  5160               	movf	___fttol@sign1& (0+255),w,b
  7377  001F7E  B4D8               	btfsc	status,2,c
  7378  001F80  D00F               	goto	l4567
  7379                           
  7380                           ; BSR set to: 0
  7381  001F82  0100               	movlb	0	; () banked
  7382  001F84  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  7383  001F86  0100               	movlb	0	; () banked
  7384  001F88  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  7385  001F8A  0100               	movlb	0	; () banked
  7386  001F8C  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  7387  001F8E  0100               	movlb	0	; () banked
  7388  001F90  6D61               	negf	___fttol@lval& (0+255),b
  7389  001F92  0E00               	movlw	0
  7390  001F94  0100               	movlb	0	; () banked
  7391  001F96  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7392  001F98  0100               	movlb	0	; () banked
  7393  001F9A  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7394  001F9C  0100               	movlb	0	; () banked
  7395  001F9E  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7396  001FA0                     l4567:
  7397                           
  7398                           ; BSR set to: 0
  7399  001FA0  C061  F040         	movff	___fttol@lval,?___fttol
  7400  001FA4  C062  F041         	movff	___fttol@lval+1,?___fttol+1
  7401  001FA8  C063  F042         	movff	___fttol@lval+2,?___fttol+2
  7402  001FAC  C064  F043         	movff	___fttol@lval+3,?___fttol+3
  7403  001FB0  0012               	return	
  7404  001FB2                     __end_of___fttol:
  7405                           	opt stack 0
  7406                           tosu	equ	0xFFF
  7407                           tosh	equ	0xFFE
  7408                           tosl	equ	0xFFD
  7409                           pclath	equ	0xFFA
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           intcon	equ	0xFF2
  7417                           intcon2	equ	0xFF1
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           postdec1	equ	0xFE5
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           postdec2	equ	0xFDD
  7425                           fsr2h	equ	0xFDA
  7426                           fsr2l	equ	0xFD9
  7427                           status	equ	0xFD8
  7428                           
  7429 ;; *************** function ___ftsub *****************
  7430 ;; Defined at:
  7431 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  f1              3   34[COMRAM] float 
  7434 ;;  f2              3   37[COMRAM] float 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;		None
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  3   34[COMRAM] float 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7446 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7449 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7450 ;;Total ram usage:        6 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    3
  7453 ;; This function calls:
  7454 ;;		___ftadd
  7455 ;; This function is called by:
  7456 ;;		__doprnt
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text22
  7461  002D98                     __ptext22:
  7462                           	opt stack 0
  7463  002D98                     ___ftsub:
  7464                           	opt stack 24
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;incstack = 0
  7468  002D98  0E00               	movlw	0
  7469  002D9A  1A26               	xorwf	___ftsub@f2,f,c
  7470  002D9C  0E00               	movlw	0
  7471  002D9E  1A27               	xorwf	___ftsub@f2+1,f,c
  7472  002DA0  0E80               	movlw	128
  7473  002DA2  1A28               	xorwf	___ftsub@f2+2,f,c
  7474  002DA4  C023  F017         	movff	___ftsub@f1,___ftadd@f1
  7475  002DA8  C024  F018         	movff	___ftsub@f1+1,___ftadd@f1+1
  7476  002DAC  C025  F019         	movff	___ftsub@f1+2,___ftadd@f1+2
  7477  002DB0  C026  F01A         	movff	___ftsub@f2,___ftadd@f2
  7478  002DB4  C027  F01B         	movff	___ftsub@f2+1,___ftadd@f2+1
  7479  002DB8  C028  F01C         	movff	___ftsub@f2+2,___ftadd@f2+2
  7480  002DBC  ECE3  F00C         	call	___ftadd	;wreg free
  7481  002DC0  C017  F023         	movff	?___ftadd,?___ftsub
  7482  002DC4  C018  F024         	movff	?___ftadd+1,?___ftsub+1
  7483  002DC8  C019  F025         	movff	?___ftadd+2,?___ftsub+2
  7484  002DCC  0012               	return	
  7485  002DCE                     __end_of___ftsub:
  7486                           	opt stack 0
  7487                           tosu	equ	0xFFF
  7488                           tosh	equ	0xFFE
  7489                           tosl	equ	0xFFD
  7490                           pclath	equ	0xFFA
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           intcon2	equ	0xFF1
  7499                           postinc0	equ	0xFEE
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           fsr1l	equ	0xFE1
  7503                           indf2	equ	0xFDF
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function ___ftadd *****************
  7511 ;; Defined at:
  7512 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  f1              3   22[COMRAM] float 
  7515 ;;  f2              3   25[COMRAM] float 
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;  exp1            1   33[COMRAM] unsigned char 
  7518 ;;  exp2            1   32[COMRAM] unsigned char 
  7519 ;;  sign            1   31[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  3   22[COMRAM] float 
  7522 ;; Registers used:
  7523 ;;		wreg, status,2, status,0, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7529 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7530 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7531 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7532 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7533 ;;Total ram usage:       12 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    2
  7536 ;; This function calls:
  7537 ;;		___ftpack
  7538 ;; This function is called by:
  7539 ;;		_timer0init
  7540 ;;		__doprnt
  7541 ;;		___ftsub
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text23
  7546  0019C6                     __ptext23:
  7547                           	opt stack 0
  7548  0019C6                     ___ftadd:
  7549                           	opt stack 26
  7550                           
  7551                           ;incstack = 0
  7552  0019C6  C019  F01D         	movff	___ftadd@f1+2,??___ftadd
  7553  0019CA  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  7554  0019CC  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  7555  0019CE  3418               	rlcf	___ftadd@f1+1,w,c
  7556  0019D0  361D               	rlcf	??___ftadd& (0+255),f,c
  7557  0019D2  E301               	bnc	u4881
  7558  0019D4  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  7559  0019D6                     u4881:
  7560  0019D6  501D               	movf	??___ftadd,w,c
  7561  0019D8  6E22               	movwf	___ftadd@exp1,c
  7562  0019DA  C01C  F01D         	movff	___ftadd@f2+2,??___ftadd
  7563  0019DE  6A1E               	clrf	(??___ftadd+1)& (0+255),c
  7564  0019E0  6A1F               	clrf	(??___ftadd+2)& (0+255),c
  7565  0019E2  341B               	rlcf	___ftadd@f2+1,w,c
  7566  0019E4  361D               	rlcf	??___ftadd& (0+255),f,c
  7567  0019E6  E301               	bnc	u4891
  7568  0019E8  801E               	bsf	(??___ftadd+1)& (0+255),0,c
  7569  0019EA                     u4891:
  7570  0019EA  501D               	movf	??___ftadd,w,c
  7571  0019EC  6E21               	movwf	___ftadd@exp2,c
  7572  0019EE  5022               	movf	___ftadd@exp1,w,c
  7573  0019F0  B4D8               	btfsc	status,2,c
  7574  0019F2  D00C               	goto	l972
  7575  0019F4  5021               	movf	___ftadd@exp2,w,c
  7576  0019F6  5C22               	subwf	___ftadd@exp1,w,c
  7577  0019F8  B0D8               	btfsc	status,0,c
  7578  0019FA  D00F               	goto	l4323
  7579  0019FC  5022               	movf	___ftadd@exp1,w,c
  7580  0019FE  0800               	sublw	0
  7581  001A00  2421               	addwf	___ftadd@exp2,w,c
  7582  001A02  6E1D               	movwf	??___ftadd& (0+255),c
  7583  001A04  0E19               	movlw	25
  7584  001A06  5C1D               	subwf	??___ftadd,w,c
  7585  001A08  A0D8               	btfss	status,0,c
  7586  001A0A  D007               	goto	l4323
  7587  001A0C                     l972:
  7588  001A0C  C01A  F017         	movff	___ftadd@f2,?___ftadd
  7589  001A10  C01B  F018         	movff	___ftadd@f2+1,?___ftadd+1
  7590  001A14  C01C  F019         	movff	___ftadd@f2+2,?___ftadd+2
  7591  001A18  0012               	return	
  7592  001A1A                     l4323:
  7593  001A1A  5021               	movf	___ftadd@exp2,w,c
  7594  001A1C  B4D8               	btfsc	status,2,c
  7595  001A1E  D00C               	goto	l976
  7596  001A20  5022               	movf	___ftadd@exp1,w,c
  7597  001A22  5C21               	subwf	___ftadd@exp2,w,c
  7598  001A24  B0D8               	btfsc	status,0,c
  7599  001A26  D00F               	goto	l4329
  7600  001A28  5021               	movf	___ftadd@exp2,w,c
  7601  001A2A  0800               	sublw	0
  7602  001A2C  2422               	addwf	___ftadd@exp1,w,c
  7603  001A2E  6E1D               	movwf	??___ftadd& (0+255),c
  7604  001A30  0E19               	movlw	25
  7605  001A32  5C1D               	subwf	??___ftadd,w,c
  7606  001A34  A0D8               	btfss	status,0,c
  7607  001A36  D007               	goto	l4329
  7608  001A38                     l976:
  7609  001A38  C017  F017         	movff	___ftadd@f1,?___ftadd
  7610  001A3C  C018  F018         	movff	___ftadd@f1+1,?___ftadd+1
  7611  001A40  C019  F019         	movff	___ftadd@f1+2,?___ftadd+2
  7612  001A44  0012               	return	
  7613  001A46                     l4329:
  7614  001A46  0E06               	movlw	6
  7615  001A48  6E20               	movwf	___ftadd@sign,c
  7616  001A4A  BE19               	btfsc	___ftadd@f1+2,7,c
  7617  001A4C  8E20               	bsf	___ftadd@sign,7,c
  7618  001A4E  BE1C               	btfsc	___ftadd@f2+2,7,c
  7619  001A50  8C20               	bsf	___ftadd@sign,6,c
  7620  001A52  8E18               	bsf	___ftadd@f1+1,7,c
  7621  001A54  0EFF               	movlw	255
  7622  001A56  1617               	andwf	___ftadd@f1,f,c
  7623  001A58  0EFF               	movlw	255
  7624  001A5A  1618               	andwf	___ftadd@f1+1,f,c
  7625  001A5C  0E00               	movlw	0
  7626  001A5E  1619               	andwf	___ftadd@f1+2,f,c
  7627  001A60  8E1B               	bsf	___ftadd@f2+1,7,c
  7628  001A62  0EFF               	movlw	255
  7629  001A64  161A               	andwf	___ftadd@f2,f,c
  7630  001A66  0EFF               	movlw	255
  7631  001A68  161B               	andwf	___ftadd@f2+1,f,c
  7632  001A6A  0E00               	movlw	0
  7633  001A6C  161C               	andwf	___ftadd@f2+2,f,c
  7634  001A6E  5021               	movf	___ftadd@exp2,w,c
  7635  001A70  5C22               	subwf	___ftadd@exp1,w,c
  7636  001A72  B0D8               	btfsc	status,0,c
  7637  001A74  D01A               	goto	l4355
  7638  001A76                     l4345:
  7639  001A76  90D8               	bcf	status,0,c
  7640  001A78  361A               	rlcf	___ftadd@f2,f,c
  7641  001A7A  361B               	rlcf	___ftadd@f2+1,f,c
  7642  001A7C  361C               	rlcf	___ftadd@f2+2,f,c
  7643  001A7E  0621               	decf	___ftadd@exp2,f,c
  7644  001A80  5021               	movf	___ftadd@exp2,w,c
  7645  001A82  1822               	xorwf	___ftadd@exp1,w,c
  7646  001A84  B4D8               	btfsc	status,2,c
  7647  001A86  D00D               	goto	l4353
  7648  001A88  0620               	decf	___ftadd@sign,f,c
  7649  001A8A  C020  F01D         	movff	___ftadd@sign,??___ftadd
  7650  001A8E  0E07               	movlw	7
  7651  001A90  161D               	andwf	??___ftadd,f,c
  7652  001A92  B4D8               	btfsc	status,2,c
  7653  001A94  D006               	goto	l4353
  7654  001A96  D7EF               	goto	l4345
  7655  001A98                     l4351:
  7656  001A98  90D8               	bcf	status,0,c
  7657  001A9A  3219               	rrcf	___ftadd@f1+2,f,c
  7658  001A9C  3218               	rrcf	___ftadd@f1+1,f,c
  7659  001A9E  3217               	rrcf	___ftadd@f1,f,c
  7660  001AA0  2A22               	incf	___ftadd@exp1,f,c
  7661  001AA2                     l4353:
  7662  001AA2  5021               	movf	___ftadd@exp2,w,c
  7663  001AA4  6222               	cpfseq	___ftadd@exp1,c
  7664  001AA6  D7F8               	goto	l4351
  7665  001AA8  D01D               	goto	l987
  7666  001AAA                     l4355:
  7667  001AAA  5022               	movf	___ftadd@exp1,w,c
  7668  001AAC  5C21               	subwf	___ftadd@exp2,w,c
  7669  001AAE  B0D8               	btfsc	status,0,c
  7670  001AB0  D019               	goto	l987
  7671  001AB2                     l4357:
  7672  001AB2  90D8               	bcf	status,0,c
  7673  001AB4  3617               	rlcf	___ftadd@f1,f,c
  7674  001AB6  3618               	rlcf	___ftadd@f1+1,f,c
  7675  001AB8  3619               	rlcf	___ftadd@f1+2,f,c
  7676  001ABA  0622               	decf	___ftadd@exp1,f,c
  7677  001ABC  5021               	movf	___ftadd@exp2,w,c
  7678  001ABE  1822               	xorwf	___ftadd@exp1,w,c
  7679  001AC0  B4D8               	btfsc	status,2,c
  7680  001AC2  D00D               	goto	l4365
  7681  001AC4  0620               	decf	___ftadd@sign,f,c
  7682  001AC6  C020  F01D         	movff	___ftadd@sign,??___ftadd
  7683  001ACA  0E07               	movlw	7
  7684  001ACC  161D               	andwf	??___ftadd,f,c
  7685  001ACE  B4D8               	btfsc	status,2,c
  7686  001AD0  D006               	goto	l4365
  7687  001AD2  D7EF               	goto	l4357
  7688  001AD4                     l4363:
  7689  001AD4  90D8               	bcf	status,0,c
  7690  001AD6  321C               	rrcf	___ftadd@f2+2,f,c
  7691  001AD8  321B               	rrcf	___ftadd@f2+1,f,c
  7692  001ADA  321A               	rrcf	___ftadd@f2,f,c
  7693  001ADC  2A21               	incf	___ftadd@exp2,f,c
  7694  001ADE                     l4365:
  7695  001ADE  5021               	movf	___ftadd@exp2,w,c
  7696  001AE0  6222               	cpfseq	___ftadd@exp1,c
  7697  001AE2  D7F8               	goto	l4363
  7698  001AE4                     l987:
  7699  001AE4  AE20               	btfss	___ftadd@sign,7,c
  7700  001AE6  D00C               	goto	l996
  7701  001AE8  0EFF               	movlw	255
  7702  001AEA  1A17               	xorwf	___ftadd@f1,f,c
  7703  001AEC  0EFF               	movlw	255
  7704  001AEE  1A18               	xorwf	___ftadd@f1+1,f,c
  7705  001AF0  0EFF               	movlw	255
  7706  001AF2  1A19               	xorwf	___ftadd@f1+2,f,c
  7707  001AF4  0E01               	movlw	1
  7708  001AF6  2617               	addwf	___ftadd@f1,f,c
  7709  001AF8  0E00               	movlw	0
  7710  001AFA  2218               	addwfc	___ftadd@f1+1,f,c
  7711  001AFC  0E00               	movlw	0
  7712  001AFE  2219               	addwfc	___ftadd@f1+2,f,c
  7713  001B00                     l996:
  7714  001B00  AC20               	btfss	___ftadd@sign,6,c
  7715  001B02  D00C               	goto	l4371
  7716  001B04  0EFF               	movlw	255
  7717  001B06  1A1A               	xorwf	___ftadd@f2,f,c
  7718  001B08  0EFF               	movlw	255
  7719  001B0A  1A1B               	xorwf	___ftadd@f2+1,f,c
  7720  001B0C  0EFF               	movlw	255
  7721  001B0E  1A1C               	xorwf	___ftadd@f2+2,f,c
  7722  001B10  0E01               	movlw	1
  7723  001B12  261A               	addwf	___ftadd@f2,f,c
  7724  001B14  0E00               	movlw	0
  7725  001B16  221B               	addwfc	___ftadd@f2+1,f,c
  7726  001B18  0E00               	movlw	0
  7727  001B1A  221C               	addwfc	___ftadd@f2+2,f,c
  7728  001B1C                     l4371:
  7729  001B1C  0E00               	movlw	0
  7730  001B1E  6E20               	movwf	___ftadd@sign,c
  7731  001B20  5017               	movf	___ftadd@f1,w,c
  7732  001B22  261A               	addwf	___ftadd@f2,f,c
  7733  001B24  5018               	movf	___ftadd@f1+1,w,c
  7734  001B26  221B               	addwfc	___ftadd@f2+1,f,c
  7735  001B28  5019               	movf	___ftadd@f1+2,w,c
  7736  001B2A  221C               	addwfc	___ftadd@f2+2,f,c
  7737  001B2C  AE1C               	btfss	___ftadd@f2+2,7,c
  7738  001B2E  D00E               	goto	l4381
  7739  001B30  0EFF               	movlw	255
  7740  001B32  1A1A               	xorwf	___ftadd@f2,f,c
  7741  001B34  0EFF               	movlw	255
  7742  001B36  1A1B               	xorwf	___ftadd@f2+1,f,c
  7743  001B38  0EFF               	movlw	255
  7744  001B3A  1A1C               	xorwf	___ftadd@f2+2,f,c
  7745  001B3C  0E01               	movlw	1
  7746  001B3E  261A               	addwf	___ftadd@f2,f,c
  7747  001B40  0E00               	movlw	0
  7748  001B42  221B               	addwfc	___ftadd@f2+1,f,c
  7749  001B44  0E00               	movlw	0
  7750  001B46  221C               	addwfc	___ftadd@f2+2,f,c
  7751  001B48  0E01               	movlw	1
  7752  001B4A  6E20               	movwf	___ftadd@sign,c
  7753  001B4C                     l4381:
  7754  001B4C  C01A  F00F         	movff	___ftadd@f2,___ftpack@arg
  7755  001B50  C01B  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  7756  001B54  C01C  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  7757  001B58  C022  F012         	movff	___ftadd@exp1,___ftpack@exp
  7758  001B5C  C020  F013         	movff	___ftadd@sign,___ftpack@sign
  7759  001B60  EC21  F012         	call	___ftpack	;wreg free
  7760  001B64  C00F  F017         	movff	?___ftpack,?___ftadd
  7761  001B68  C010  F018         	movff	?___ftpack+1,?___ftadd+1
  7762  001B6C  C011  F019         	movff	?___ftpack+2,?___ftadd+2
  7763  001B70  0012               	return	
  7764  001B72                     __end_of___ftadd:
  7765                           	opt stack 0
  7766                           tosu	equ	0xFFF
  7767                           tosh	equ	0xFFE
  7768                           tosl	equ	0xFFD
  7769                           pclath	equ	0xFFA
  7770                           tblptru	equ	0xFF8
  7771                           tblptrh	equ	0xFF7
  7772                           tblptrl	equ	0xFF6
  7773                           tablat	equ	0xFF5
  7774                           prodh	equ	0xFF4
  7775                           prodl	equ	0xFF3
  7776                           intcon	equ	0xFF2
  7777                           intcon2	equ	0xFF1
  7778                           postinc0	equ	0xFEE
  7779                           wreg	equ	0xFE8
  7780                           postdec1	equ	0xFE5
  7781                           fsr1l	equ	0xFE1
  7782                           indf2	equ	0xFDF
  7783                           postinc2	equ	0xFDE
  7784                           postdec2	equ	0xFDD
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789 ;; *************** function ___ftneg *****************
  7790 ;; Defined at:
  7791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftneg.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  f1              3   14[COMRAM] float 
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;		None
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  3   14[COMRAM] float 
  7798 ;; Registers used:
  7799 ;;		wreg, status,2, status,0
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7808 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7809 ;;Total ram usage:        3 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    1
  7812 ;; This function calls:
  7813 ;;		Nothing
  7814 ;; This function is called by:
  7815 ;;		_timer0init
  7816 ;;		__doprnt
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text24
  7821  002E7A                     __ptext24:
  7822                           	opt stack 0
  7823  002E7A                     ___ftneg:
  7824                           	opt stack 27
  7825                           
  7826                           ;incstack = 0
  7827  002E7A  0E7F               	movlw	127
  7828  002E7C  1411               	andwf	___ftneg@f1+2,w,c
  7829  002E7E  1010               	iorwf	___ftneg@f1+1,w,c
  7830  002E80  100F               	iorwf	___ftneg@f1,w,c
  7831  002E82  B4D8               	btfsc	status,2,c
  7832  002E84  D006               	goto	l1046
  7833  002E86  0E00               	movlw	0
  7834  002E88  1A0F               	xorwf	___ftneg@f1,f,c
  7835  002E8A  0E00               	movlw	0
  7836  002E8C  1A10               	xorwf	___ftneg@f1+1,f,c
  7837  002E8E  0E80               	movlw	128
  7838  002E90  1A11               	xorwf	___ftneg@f1+2,f,c
  7839  002E92                     l1046:
  7840  002E92  C00F  F00F         	movff	___ftneg@f1,?___ftneg
  7841  002E96  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
  7842  002E9A  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
  7843  002E9E  0012               	return	
  7844  002EA0                     __end_of___ftneg:
  7845                           	opt stack 0
  7846                           tosu	equ	0xFFF
  7847                           tosh	equ	0xFFE
  7848                           tosl	equ	0xFFD
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           intcon2	equ	0xFF1
  7858                           postinc0	equ	0xFEE
  7859                           wreg	equ	0xFE8
  7860                           postdec1	equ	0xFE5
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function ___ftge *****************
  7870 ;; Defined at:
  7871 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  ff1             3   14[COMRAM] float 
  7874 ;;  ff2             3   17[COMRAM] float 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;		None
  7877 ;; Return value:  Size  Location     Type
  7878 ;;		None               void
  7879 ;; Registers used:
  7880 ;;		wreg, status,2, status,0
  7881 ;; Tracked objects:
  7882 ;;		On entry : 0/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7886 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7888 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7889 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7890 ;;Total ram usage:        9 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    1
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		__doprnt
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text25
  7901  0026B8                     __ptext25:
  7902                           	opt stack 0
  7903  0026B8                     ___ftge:
  7904                           	opt stack 26
  7905                           
  7906                           ;incstack = 0
  7907  0026B8  AE11               	btfss	___ftge@ff1+2,7,c
  7908  0026BA  D016               	goto	l3263
  7909  0026BC  C00F  F015         	movff	___ftge@ff1,??___ftge
  7910  0026C0  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  7911  0026C4  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  7912  0026C8  1E15               	comf	??___ftge,f,c
  7913  0026CA  1E16               	comf	??___ftge+1,f,c
  7914  0026CC  1E17               	comf	??___ftge+2,f,c
  7915  0026CE  2A15               	incf	??___ftge,f,c
  7916  0026D0  0E00               	movlw	0
  7917  0026D2  2216               	addwfc	??___ftge+1,f,c
  7918  0026D4  2217               	addwfc	??___ftge+2,f,c
  7919  0026D6  0E00               	movlw	0
  7920  0026D8  2415               	addwf	??___ftge,w,c
  7921  0026DA  6E0F               	movwf	___ftge@ff1,c
  7922  0026DC  0E00               	movlw	0
  7923  0026DE  2016               	addwfc	??___ftge+1,w,c
  7924  0026E0  6E10               	movwf	___ftge@ff1+1,c
  7925  0026E2  0E80               	movlw	128
  7926  0026E4  2017               	addwfc	??___ftge+2,w,c
  7927  0026E6  6E11               	movwf	___ftge@ff1+2,c
  7928  0026E8                     l3263:
  7929  0026E8  AE14               	btfss	___ftge@ff2+2,7,c
  7930  0026EA  D016               	goto	l3267
  7931  0026EC  C012  F015         	movff	___ftge@ff2,??___ftge
  7932  0026F0  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  7933  0026F4  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  7934  0026F8  1E15               	comf	??___ftge,f,c
  7935  0026FA  1E16               	comf	??___ftge+1,f,c
  7936  0026FC  1E17               	comf	??___ftge+2,f,c
  7937  0026FE  2A15               	incf	??___ftge,f,c
  7938  002700  0E00               	movlw	0
  7939  002702  2216               	addwfc	??___ftge+1,f,c
  7940  002704  2217               	addwfc	??___ftge+2,f,c
  7941  002706  0E00               	movlw	0
  7942  002708  2415               	addwf	??___ftge,w,c
  7943  00270A  6E12               	movwf	___ftge@ff2,c
  7944  00270C  0E00               	movlw	0
  7945  00270E  2016               	addwfc	??___ftge+1,w,c
  7946  002710  6E13               	movwf	___ftge@ff2+1,c
  7947  002712  0E80               	movlw	128
  7948  002714  2017               	addwfc	??___ftge+2,w,c
  7949  002716  6E14               	movwf	___ftge@ff2+2,c
  7950  002718                     l3267:
  7951  002718  0E00               	movlw	0
  7952  00271A  1A0F               	xorwf	___ftge@ff1,f,c
  7953  00271C  0E00               	movlw	0
  7954  00271E  1A10               	xorwf	___ftge@ff1+1,f,c
  7955  002720  0E80               	movlw	128
  7956  002722  1A11               	xorwf	___ftge@ff1+2,f,c
  7957  002724  0E00               	movlw	0
  7958  002726  1A12               	xorwf	___ftge@ff2,f,c
  7959  002728  0E00               	movlw	0
  7960  00272A  1A13               	xorwf	___ftge@ff2+1,f,c
  7961  00272C  0E80               	movlw	128
  7962  00272E  1A14               	xorwf	___ftge@ff2+2,f,c
  7963  002730  5012               	movf	___ftge@ff2,w,c
  7964  002732  5C0F               	subwf	___ftge@ff1,w,c
  7965  002734  5013               	movf	___ftge@ff2+1,w,c
  7966  002736  5810               	subwfb	___ftge@ff1+1,w,c
  7967  002738  5014               	movf	___ftge@ff2+2,w,c
  7968  00273A  5811               	subwfb	___ftge@ff1+2,w,c
  7969  00273C  B0D8               	btfsc	status,0,c
  7970  00273E  D002               	goto	l3273
  7971  002740  90D8               	bcf	status,0,c
  7972  002742  0012               	return	
  7973  002744                     l3273:
  7974  002744  80D8               	bsf	status,0,c
  7975  002746  0012               	return	
  7976  002748                     __end_of___ftge:
  7977                           	opt stack 0
  7978                           tosu	equ	0xFFF
  7979                           tosh	equ	0xFFE
  7980                           tosl	equ	0xFFD
  7981                           pclath	equ	0xFFA
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           intcon2	equ	0xFF1
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           postdec1	equ	0xFE5
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           fsr2h	equ	0xFDA
  7998                           fsr2l	equ	0xFD9
  7999                           status	equ	0xFD8
  8000                           
  8001 ;; *************** function _getTime *****************
  8002 ;; Defined at:
  8003 ;;		line 41 in file "src/DS3231.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  hour            2   18[COMRAM] PTR unsigned char 
  8006 ;;		 -> hour(1), 
  8007 ;;  minute          2   20[COMRAM] PTR unsigned char 
  8008 ;;		 -> minute(1), 
  8009 ;;  second          2   22[COMRAM] PTR unsigned char 
  8010 ;;		 -> second(1), 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;		None
  8013 ;; Return value:  Size  Location     Type
  8014 ;;		None               void
  8015 ;; Registers used:
  8016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8022 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8025 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8026 ;;Total ram usage:        6 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    4
  8029 ;; This function calls:
  8030 ;;		__I2CAddress
  8031 ;;		__I2CReceive
  8032 ;;		__I2CRepeatedStart
  8033 ;;		__I2CSend
  8034 ;;		__I2CStart
  8035 ;;		__I2CStop
  8036 ;;		_bcdtodec
  8037 ;;		_toHour
  8038 ;; This function is called by:
  8039 ;;		_loop
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text26
  8044  0028D8                     __ptext26:
  8045                           	opt stack 0
  8046  0028D8                     _getTime:
  8047                           	opt stack 25
  8048                           
  8049                           ;DS3231.c: 42: _I2CStart();
  8050                           
  8051                           ;incstack = 0
  8052  0028D8  ECC2  F017         	call	__I2CStart	;wreg free
  8053                           
  8054                           ;DS3231.c: 43: _I2CAddress(0x68, 0);
  8055  0028DC  0E00               	movlw	0
  8056  0028DE  6E11               	movwf	__I2CAddress@readnwrite,c
  8057  0028E0  0E68               	movlw	104
  8058  0028E2  ECDD  F017         	call	__I2CAddress
  8059                           
  8060                           ;DS3231.c: 44: _I2CSend(0x00);
  8061  0028E6  0E00               	movlw	0
  8062  0028E8  ECAF  F017         	call	__I2CSend
  8063                           
  8064                           ;DS3231.c: 45: _I2CRepeatedStart();
  8065  0028EC  ECCB  F017         	call	__I2CRepeatedStart	;wreg free
  8066                           
  8067                           ;DS3231.c: 46: _I2CAddress(0x68, 1);
  8068  0028F0  0E01               	movlw	1
  8069  0028F2  6E11               	movwf	__I2CAddress@readnwrite,c
  8070  0028F4  0E68               	movlw	104
  8071  0028F6  ECDD  F017         	call	__I2CAddress
  8072                           
  8073                           ;DS3231.c: 47: _I2CReceive(second, 0);
  8074  0028FA  C018  F011         	movff	getTime@second+1,__I2CReceive@data+1
  8075  0028FE  C017  F010         	movff	getTime@second,__I2CReceive@data
  8076  002902  0E00               	movlw	0
  8077  002904  6E12               	movwf	__I2CReceive@ack,c
  8078  002906  ECE7  F016         	call	__I2CReceive	;wreg free
  8079                           
  8080                           ;DS3231.c: 48: _I2CReceive(minute, 0);
  8081  00290A  C016  F011         	movff	getTime@minute+1,__I2CReceive@data+1
  8082  00290E  C015  F010         	movff	getTime@minute,__I2CReceive@data
  8083  002912  0E00               	movlw	0
  8084  002914  6E12               	movwf	__I2CReceive@ack,c
  8085  002916  ECE7  F016         	call	__I2CReceive	;wreg free
  8086                           
  8087                           ;DS3231.c: 49: _I2CReceive(hour, 1);
  8088  00291A  C014  F011         	movff	getTime@hour+1,__I2CReceive@data+1
  8089  00291E  C013  F010         	movff	getTime@hour,__I2CReceive@data
  8090  002922  0E01               	movlw	1
  8091  002924  6E12               	movwf	__I2CReceive@ack,c
  8092  002926  ECE7  F016         	call	__I2CReceive	;wreg free
  8093                           
  8094                           ;DS3231.c: 50: _I2CStop();
  8095  00292A  ECB9  F017         	call	__I2CStop	;wreg free
  8096                           
  8097                           ;DS3231.c: 51: bcdtodec(second);
  8098  00292E  C018  F010         	movff	getTime@second+1,bcdtodec@dec+1
  8099  002932  C017  F00F         	movff	getTime@second,bcdtodec@dec
  8100  002936  EC16  F017         	call	_bcdtodec	;wreg free
  8101                           
  8102                           ;DS3231.c: 52: bcdtodec(minute);
  8103  00293A  C016  F010         	movff	getTime@minute+1,bcdtodec@dec+1
  8104  00293E  C015  F00F         	movff	getTime@minute,bcdtodec@dec
  8105  002942  EC16  F017         	call	_bcdtodec	;wreg free
  8106                           
  8107                           ;DS3231.c: 53: toHour(hour);
  8108  002946  C014  F010         	movff	getTime@hour+1,toHour@hour+1
  8109  00294A  C013  F00F         	movff	getTime@hour,toHour@hour
  8110  00294E  ECD2  F015         	call	_toHour	;wreg free
  8111  002952  0012               	return	
  8112  002954                     __end_of_getTime:
  8113                           	opt stack 0
  8114                           tosu	equ	0xFFF
  8115                           tosh	equ	0xFFE
  8116                           tosl	equ	0xFFD
  8117                           pclath	equ	0xFFA
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           intcon2	equ	0xFF1
  8126                           postinc0	equ	0xFEE
  8127                           wreg	equ	0xFE8
  8128                           postdec1	equ	0xFE5
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _toHour *****************
  8138 ;; Defined at:
  8139 ;;		line 89 in file "src/DS3231.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;  hour            2   14[COMRAM] PTR unsigned char 
  8142 ;;		 -> hour(1), 
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;  h               1   17[COMRAM] struct .
  8145 ;; Return value:  Size  Location     Type
  8146 ;;		None               void
  8147 ;; Registers used:
  8148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8157 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8158 ;;Total ram usage:        4 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    1
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_getTime
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           	psect	text27
  8169  002BA4                     __ptext27:
  8170                           	opt stack 0
  8171  002BA4                     _toHour:
  8172                           	opt stack 27
  8173                           
  8174                           ;DS3231.c: 90: HOUR_t h;
  8175                           ;DS3231.c: 91: h.hour = *hour;
  8176                           
  8177                           ;incstack = 0
  8178  002BA4  C00F  FFD9         	movff	toHour@hour,fsr2l
  8179  002BA8  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8180  002BAC  50DF               	movf	indf2,w,c
  8181  002BAE  6E12               	movwf	toHour@h,c
  8182                           
  8183                           ;DS3231.c: 92: *hour = h.hour0 + h.hour1 * 10;
  8184  002BB0  5012               	movf	toHour@h,w,c
  8185  002BB2  0B0F               	andlw	15
  8186  002BB4  6E11               	movwf	??_toHour& (0+255),c
  8187  002BB6  A812               	btfss	toHour@h,4,c
  8188  002BB8  D002               	goto	u3490
  8189  002BBA  0E01               	movlw	1
  8190  002BBC  D001               	goto	u3496
  8191  002BBE                     u3490:
  8192  002BBE  0E00               	movlw	0
  8193  002BC0                     u3496:
  8194  002BC0  0D0A               	mullw	10
  8195  002BC2  50F3               	movf	prodl,w,c
  8196  002BC4  2411               	addwf	??_toHour,w,c
  8197  002BC6  C00F  FFD9         	movff	toHour@hour,fsr2l
  8198  002BCA  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8199  002BCE  6EDF               	movwf	indf2,c
  8200                           
  8201                           ;DS3231.c: 93: if (h.mode) {
  8202  002BD0  AC12               	btfss	toHour@h,6,c
  8203  002BD2  D009               	goto	l3415
  8204                           
  8205                           ;DS3231.c: 94: if (h.hour2) {
  8206  002BD4  AA12               	btfss	toHour@h,5,c
  8207  002BD6  0012               	return	
  8208                           
  8209                           ;DS3231.c: 95: *hour += 12;
  8210  002BD8  C00F  FFD9         	movff	toHour@hour,fsr2l
  8211  002BDC  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8212  002BE0  0E0C               	movlw	12
  8213  002BE2  26DF               	addwf	indf2,f,c
  8214  002BE4  0012               	return	
  8215  002BE6                     l3415:
  8216                           
  8217                           ;DS3231.c: 98: *hour += h.hour2 * 20;
  8218  002BE6  AA12               	btfss	toHour@h,5,c
  8219  002BE8  D002               	goto	u3520
  8220  002BEA  0E01               	movlw	1
  8221  002BEC  D001               	goto	u3526
  8222  002BEE                     u3520:
  8223  002BEE  0E00               	movlw	0
  8224  002BF0                     u3526:
  8225  002BF0  0D14               	mullw	20
  8226  002BF2  C00F  FFD9         	movff	toHour@hour,fsr2l
  8227  002BF6  C010  FFDA         	movff	toHour@hour+1,fsr2h
  8228  002BFA  50F3               	movf	prodl,w,c
  8229  002BFC  26DF               	addwf	indf2,f,c
  8230  002BFE  0012               	return	
  8231  002C00                     __end_of_toHour:
  8232                           	opt stack 0
  8233                           tosu	equ	0xFFF
  8234                           tosh	equ	0xFFE
  8235                           tosl	equ	0xFFD
  8236                           pclath	equ	0xFFA
  8237                           tblptru	equ	0xFF8
  8238                           tblptrh	equ	0xFF7
  8239                           tblptrl	equ	0xFF6
  8240                           tablat	equ	0xFF5
  8241                           prodh	equ	0xFF4
  8242                           prodl	equ	0xFF3
  8243                           intcon	equ	0xFF2
  8244                           intcon2	equ	0xFF1
  8245                           postinc0	equ	0xFEE
  8246                           wreg	equ	0xFE8
  8247                           postdec1	equ	0xFE5
  8248                           fsr1l	equ	0xFE1
  8249                           indf2	equ	0xFDF
  8250                           postinc2	equ	0xFDE
  8251                           postdec2	equ	0xFDD
  8252                           fsr2h	equ	0xFDA
  8253                           fsr2l	equ	0xFD9
  8254                           status	equ	0xFD8
  8255                           
  8256 ;; *************** function _getTemperature *****************
  8257 ;; Defined at:
  8258 ;;		line 21 in file "src/DS18B20.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  address         2   56[COMRAM] PTR unsigned char 
  8261 ;;		 -> tempAddress(8), 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  scratchPad      9    0[BANK0 ] unsigned char [9]
  8264 ;;  temperature     3    9[BANK0 ] float 
  8265 ;;  i               1   12[BANK0 ] unsigned char 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  3   56[COMRAM] float 
  8268 ;; Registers used:
  8269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8275 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8276 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8278 ;;      Totals:         5      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8279 ;;Total ram usage:       18 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    3
  8282 ;; This function calls:
  8283 ;;		___awtoft
  8284 ;;		___ftmul
  8285 ;;		_onewireInit
  8286 ;;		_onewireReadByte
  8287 ;;		_onewireWriteByte
  8288 ;; This function is called by:
  8289 ;;		_loop
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text28
  8294  0022B6                     __ptext28:
  8295                           	opt stack 0
  8296  0022B6                     _getTemperature:
  8297                           	opt stack 26
  8298                           
  8299                           ;DS18B20.c: 23: float temperature;
  8300                           ;DS18B20.c: 24: unsigned char scratchPad[9] = {0,0,0,0,0,0,0,0,0};
  8301                           
  8302                           ;incstack = 0
  8303  0022B6  EE20  F0B2         	lfsr	2,getTemperature@F206
  8304  0022BA  EE10  F060         	lfsr	1,getTemperature@scratchPad
  8305  0022BE  0E09               	movlw	9
  8306  0022C0                     u6281:
  8307  0022C0  CFDE FFE6          	movff	postinc2,postinc1
  8308  0022C4  2EE8               	decfsz	wreg,f,c
  8309  0022C6  D7FC               	goto	u6281
  8310                           
  8311                           ;DS18B20.c: 26: onewireInit();
  8312  0022C8  EC74  F017         	call	_onewireInit	;wreg free
  8313                           
  8314                           ;DS18B20.c: 27: onewireWriteByte(0x55);
  8315  0022CC  0E55               	movlw	85
  8316  0022CE  ECFF  F016         	call	_onewireWriteByte
  8317                           
  8318                           ;DS18B20.c: 28: unsigned char i;
  8319                           ;DS18B20.c: 29: for (i = 0; i < 8; i++)
  8320  0022D2  0E00               	movlw	0
  8321  0022D4  0100               	movlb	0	; () banked
  8322  0022D6  6F6C               	movwf	getTemperature@i& (0+255),b
  8323  0022D8  D00E               	goto	L8
  8324  0022DA                     l5113:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;DS18B20.c: 30: onewireWriteByte(address[i]);
  8328  0022DA  0100               	movlb	0	; () banked
  8329  0022DC  516C               	movf	getTemperature@i& (0+255),w,b
  8330  0022DE  0D01               	mullw	1
  8331  0022E0  50F3               	movf	prodl,w,c
  8332  0022E2  2439               	addwf	getTemperature@address,w,c
  8333  0022E4  6ED9               	movwf	fsr2l,c
  8334  0022E6  50F4               	movf	prodh,w,c
  8335  0022E8  203A               	addwfc	getTemperature@address+1,w,c
  8336  0022EA  6EDA               	movwf	fsr2h,c
  8337  0022EC  50DF               	movf	indf2,w,c
  8338  0022EE  ECFF  F016         	call	_onewireWriteByte
  8339  0022F2  0100               	movlb	0	; () banked
  8340  0022F4  2B6C               	incf	getTemperature@i& (0+255),f,b
  8341  0022F6                     L8:
  8342                           
  8343                           ; BSR set to: 0
  8344  0022F6  0E07               	movlw	7
  8345  0022F8  0100               	movlb	0	; () banked
  8346  0022FA  656C               	cpfsgt	getTemperature@i& (0+255),b
  8347  0022FC  D7EE               	goto	l5113
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;DS18B20.c: 31: onewireWriteByte(0xBE);
  8351                           
  8352                           ; BSR set to: 0
  8353  0022FE  0EBE               	movlw	190
  8354  002300  ECFF  F016         	call	_onewireWriteByte
  8355                           
  8356                           ;DS18B20.c: 33: for (i = 0; i < 2; i++) {
  8357  002304  0E00               	movlw	0
  8358  002306  0100               	movlb	0	; () banked
  8359  002308  6F6C               	movwf	getTemperature@i& (0+255),b
  8360  00230A  D010               	goto	L9
  8361  00230C                     l5127:
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;DS18B20.c: 34: scratchPad[i] = onewireReadByte();
  8365  00230C  0100               	movlb	0	; () banked
  8366  00230E  516C               	movf	getTemperature@i& (0+255),w,b
  8367  002310  0D01               	mullw	1
  8368  002312  0100               	movlb	0	; () banked
  8369  002314  0E60               	movlw	low getTemperature@scratchPad
  8370  002316  24F3               	addwf	prodl,w,c
  8371  002318  6ED9               	movwf	fsr2l,c
  8372  00231A  0100               	movlb	0	; () banked
  8373  00231C  0E00               	movlw	high getTemperature@scratchPad
  8374  00231E  20F4               	addwfc	prodh,w,c
  8375  002320  6EDA               	movwf	fsr2h,c
  8376  002322  EC50  F017         	call	_onewireReadByte	;wreg free
  8377  002326  6EDF               	movwf	indf2,c
  8378  002328  0100               	movlb	0	; () banked
  8379  00232A  2B6C               	incf	getTemperature@i& (0+255),f,b
  8380  00232C                     L9:
  8381                           
  8382                           ; BSR set to: 0
  8383  00232C  0E01               	movlw	1
  8384  00232E  0100               	movlb	0	; () banked
  8385  002330  656C               	cpfsgt	getTemperature@i& (0+255),b
  8386  002332  D7EC               	goto	l5127
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;DS18B20.c: 35: }
  8390                           ;DS18B20.c: 36: onewireInit();
  8391                           
  8392                           ; BSR set to: 0
  8393  002334  EC74  F017         	call	_onewireInit	;wreg free
  8394                           
  8395                           ;DS18B20.c: 37: temperature = ((scratchPad[1] * 256) + scratchPad[0])*0.0625;
  8396  002338  0100               	movlb	0	; () banked
  8397  00233A  5161               	movf	(getTemperature@scratchPad+1)& (0+255),w,b
  8398  00233C  6E3D               	movwf	(??_getTemperature+1)& (0+255),c
  8399  00233E  6A3C               	clrf	??_getTemperature& (0+255),c
  8400  002340  0100               	movlb	0	; () banked
  8401  002342  5160               	movf	getTemperature@scratchPad& (0+255),w,b
  8402  002344  243C               	addwf	??_getTemperature,w,c
  8403  002346  6E17               	movwf	___awtoft@c,c
  8404  002348  0100               	movlb	0	; () banked
  8405  00234A  0E00               	movlw	0
  8406  00234C  203D               	addwfc	??_getTemperature+1,w,c
  8407  00234E  6E18               	movwf	___awtoft@c+1,c
  8408  002350  EC2D  F016         	call	___awtoft	;wreg free
  8409  002354  C017  F02A         	movff	?___awtoft,___ftmul@f1
  8410  002358  C018  F02B         	movff	?___awtoft+1,___ftmul@f1+1
  8411  00235C  C019  F02C         	movff	?___awtoft+2,___ftmul@f1+2
  8412  002360  0E00               	movlw	0
  8413  002362  6E2D               	movwf	___ftmul@f2,c
  8414  002364  0E80               	movlw	128
  8415  002366  6E2E               	movwf	___ftmul@f2+1,c
  8416  002368  0E3D               	movlw	61
  8417  00236A  6E2F               	movwf	___ftmul@f2+2,c
  8418  00236C  EC72  F010         	call	___ftmul	;wreg free
  8419  002370  C02A  F069         	movff	?___ftmul,getTemperature@temperature
  8420  002374  C02B  F06A         	movff	?___ftmul+1,getTemperature@temperature+1
  8421  002378  C02C  F06B         	movff	?___ftmul+2,getTemperature@temperature+2
  8422                           
  8423                           ;DS18B20.c: 39: return temperature;
  8424  00237C  C069  F039         	movff	getTemperature@temperature,?_getTemperature
  8425  002380  C06A  F03A         	movff	getTemperature@temperature+1,?_getTemperature+1
  8426  002384  C06B  F03B         	movff	getTemperature@temperature+2,?_getTemperature+2
  8427  002388  0012               	return	
  8428  00238A                     __end_of_getTemperature:
  8429                           	opt stack 0
  8430                           tosu	equ	0xFFF
  8431                           tosh	equ	0xFFE
  8432                           tosl	equ	0xFFD
  8433                           pclath	equ	0xFFA
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodh	equ	0xFF4
  8439                           prodl	equ	0xFF3
  8440                           intcon	equ	0xFF2
  8441                           intcon2	equ	0xFF1
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           postinc1	equ	0xFE6
  8445                           postdec1	equ	0xFE5
  8446                           fsr1l	equ	0xFE1
  8447                           indf2	equ	0xFDF
  8448                           postinc2	equ	0xFDE
  8449                           postdec2	equ	0xFDD
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _onewireReadByte *****************
  8455 ;; Defined at:
  8456 ;;		line 50 in file "src/onewire.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;		None
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;  loop            1   16[COMRAM] unsigned char 
  8461 ;;  result          1   15[COMRAM] unsigned char 
  8462 ;; Return value:  Size  Location     Type
  8463 ;;                  1    wreg      unsigned char 
  8464 ;; Registers used:
  8465 ;;		wreg, status,2, status,0, cstack
  8466 ;; Tracked objects:
  8467 ;;		On entry : 0/0
  8468 ;;		On exit  : 0/0
  8469 ;;		Unchanged: 0/0
  8470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8475 ;;Total ram usage:        2 bytes
  8476 ;; Hardware stack levels used:    1
  8477 ;; Hardware stack levels required when called:    2
  8478 ;; This function calls:
  8479 ;;		_onewireReadBit
  8480 ;; This function is called by:
  8481 ;;		_getTemperature
  8482 ;;		_getTemperatureInt
  8483 ;;		_printSingleAddress
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           	psect	text29
  8488  002EA0                     __ptext29:
  8489                           	opt stack 0
  8490  002EA0                     _onewireReadByte:
  8491                           	opt stack 26
  8492                           
  8493                           ;onewire.c: 51: unsigned char result = 0;
  8494                           
  8495                           ;incstack = 0
  8496  002EA0  0E00               	movlw	0
  8497  002EA2  6E10               	movwf	onewireReadByte@result,c
  8498                           
  8499                           ;onewire.c: 53: for (unsigned char loop = 0; loop < 8; loop++) {
  8500  002EA4  0E00               	movlw	0
  8501  002EA6  6E11               	movwf	onewireReadByte@loop,c
  8502  002EA8  D008               	goto	L10
  8503  002EAA                     l4613:
  8504                           
  8505                           ;onewire.c: 55: result >>= 1;
  8506  002EAA  90D8               	bcf	status,0,c
  8507  002EAC  3210               	rrcf	onewireReadByte@result,f,c
  8508                           
  8509                           ;onewire.c: 58: if (onewireReadBit())
  8510  002EAE  EC62  F017         	call	_onewireReadBit	;wreg free
  8511  002EB2  0900               	iorlw	0
  8512  002EB4  A4D8               	btfss	status,2,c
  8513                           
  8514                           ;onewire.c: 59: result |= 0x80;
  8515  002EB6  8E10               	bsf	onewireReadByte@result,7,c
  8516  002EB8  2A11               	incf	onewireReadByte@loop,f,c
  8517  002EBA                     L10:
  8518  002EBA  0E07               	movlw	7
  8519  002EBC  6411               	cpfsgt	onewireReadByte@loop,c
  8520  002EBE  D7F5               	goto	l4613
  8521                           
  8522                           ;onewire.c: 60: }
  8523                           ;onewire.c: 61: return result;
  8524  002EC0  5010               	movf	onewireReadByte@result,w,c
  8525  002EC2  0012               	return	
  8526  002EC4                     __end_of_onewireReadByte:
  8527                           	opt stack 0
  8528                           tosu	equ	0xFFF
  8529                           tosh	equ	0xFFE
  8530                           tosl	equ	0xFFD
  8531                           pclath	equ	0xFFA
  8532                           tblptru	equ	0xFF8
  8533                           tblptrh	equ	0xFF7
  8534                           tblptrl	equ	0xFF6
  8535                           tablat	equ	0xFF5
  8536                           prodh	equ	0xFF4
  8537                           prodl	equ	0xFF3
  8538                           intcon	equ	0xFF2
  8539                           intcon2	equ	0xFF1
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           postinc1	equ	0xFE6
  8543                           postdec1	equ	0xFE5
  8544                           fsr1l	equ	0xFE1
  8545                           indf2	equ	0xFDF
  8546                           postinc2	equ	0xFDE
  8547                           postdec2	equ	0xFDD
  8548                           fsr2h	equ	0xFDA
  8549                           fsr2l	equ	0xFD9
  8550                           status	equ	0xFD8
  8551                           
  8552 ;; *************** function _getDate *****************
  8553 ;; Defined at:
  8554 ;;		line 56 in file "src/DS3231.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  day             2   20[COMRAM] PTR unsigned char 
  8557 ;;		 -> day(1), 
  8558 ;;  month           2   22[COMRAM] PTR unsigned char 
  8559 ;;		 -> month(1), 
  8560 ;;  year            2   24[COMRAM] PTR unsigned char 
  8561 ;;		 -> year(1), 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;		None
  8564 ;; Return value:  Size  Location     Type
  8565 ;;		None               void
  8566 ;; Registers used:
  8567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8573 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8577 ;;Total ram usage:        6 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    4
  8580 ;; This function calls:
  8581 ;;		__I2CAddress
  8582 ;;		__I2CReceive
  8583 ;;		__I2CRepeatedStart
  8584 ;;		__I2CSend
  8585 ;;		__I2CStart
  8586 ;;		__I2CStop
  8587 ;;		_bcdtodec
  8588 ;;		_toMonth
  8589 ;; This function is called by:
  8590 ;;		_loop
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	text30
  8595  0027D2                     __ptext30:
  8596                           	opt stack 0
  8597  0027D2                     _getDate:
  8598                           	opt stack 25
  8599                           
  8600                           ;DS3231.c: 57: _I2CStart();
  8601                           
  8602                           ;incstack = 0
  8603  0027D2  ECC2  F017         	call	__I2CStart	;wreg free
  8604                           
  8605                           ;DS3231.c: 58: _I2CAddress(0x68, 0);
  8606  0027D6  0E00               	movlw	0
  8607  0027D8  6E11               	movwf	__I2CAddress@readnwrite,c
  8608  0027DA  0E68               	movlw	104
  8609  0027DC  ECDD  F017         	call	__I2CAddress
  8610                           
  8611                           ;DS3231.c: 59: _I2CSend(0x04);
  8612  0027E0  0E04               	movlw	4
  8613  0027E2  ECAF  F017         	call	__I2CSend
  8614                           
  8615                           ;DS3231.c: 60: _I2CRepeatedStart();
  8616  0027E6  ECCB  F017         	call	__I2CRepeatedStart	;wreg free
  8617                           
  8618                           ;DS3231.c: 61: _I2CAddress(0x68, 1);
  8619  0027EA  0E01               	movlw	1
  8620  0027EC  6E11               	movwf	__I2CAddress@readnwrite,c
  8621  0027EE  0E68               	movlw	104
  8622  0027F0  ECDD  F017         	call	__I2CAddress
  8623                           
  8624                           ;DS3231.c: 62: _I2CReceive(day, 0);
  8625  0027F4  C016  F011         	movff	getDate@day+1,__I2CReceive@data+1
  8626  0027F8  C015  F010         	movff	getDate@day,__I2CReceive@data
  8627  0027FC  0E00               	movlw	0
  8628  0027FE  6E12               	movwf	__I2CReceive@ack,c
  8629  002800  ECE7  F016         	call	__I2CReceive	;wreg free
  8630                           
  8631                           ;DS3231.c: 63: _I2CReceive(month, 0);
  8632  002804  C018  F011         	movff	getDate@month+1,__I2CReceive@data+1
  8633  002808  C017  F010         	movff	getDate@month,__I2CReceive@data
  8634  00280C  0E00               	movlw	0
  8635  00280E  6E12               	movwf	__I2CReceive@ack,c
  8636  002810  ECE7  F016         	call	__I2CReceive	;wreg free
  8637                           
  8638                           ;DS3231.c: 64: _I2CReceive(year, 1);
  8639  002814  C01A  F011         	movff	getDate@year+1,__I2CReceive@data+1
  8640  002818  C019  F010         	movff	getDate@year,__I2CReceive@data
  8641  00281C  0E01               	movlw	1
  8642  00281E  6E12               	movwf	__I2CReceive@ack,c
  8643  002820  ECE7  F016         	call	__I2CReceive	;wreg free
  8644                           
  8645                           ;DS3231.c: 65: _I2CStop();
  8646  002824  ECB9  F017         	call	__I2CStop	;wreg free
  8647                           
  8648                           ;DS3231.c: 66: bcdtodec(year);
  8649  002828  C01A  F010         	movff	getDate@year+1,bcdtodec@dec+1
  8650  00282C  C019  F00F         	movff	getDate@year,bcdtodec@dec
  8651  002830  EC16  F017         	call	_bcdtodec	;wreg free
  8652                           
  8653                           ;DS3231.c: 67: toMonth(month, year);
  8654  002834  C018  F010         	movff	getDate@month+1,toMonth@month+1
  8655  002838  C017  F00F         	movff	getDate@month,toMonth@month
  8656  00283C  C01A  F012         	movff	getDate@year+1,toMonth@year+1
  8657  002840  C019  F011         	movff	getDate@year,toMonth@year
  8658  002844  EC51  F016         	call	_toMonth	;wreg free
  8659                           
  8660                           ;DS3231.c: 68: bcdtodec(day);
  8661  002848  C016  F010         	movff	getDate@day+1,bcdtodec@dec+1
  8662  00284C  C015  F00F         	movff	getDate@day,bcdtodec@dec
  8663  002850  EC16  F017         	call	_bcdtodec	;wreg free
  8664  002854  0012               	return	
  8665  002856                     __end_of_getDate:
  8666                           	opt stack 0
  8667                           tosu	equ	0xFFF
  8668                           tosh	equ	0xFFE
  8669                           tosl	equ	0xFFD
  8670                           pclath	equ	0xFFA
  8671                           tblptru	equ	0xFF8
  8672                           tblptrh	equ	0xFF7
  8673                           tblptrl	equ	0xFF6
  8674                           tablat	equ	0xFF5
  8675                           prodh	equ	0xFF4
  8676                           prodl	equ	0xFF3
  8677                           intcon	equ	0xFF2
  8678                           intcon2	equ	0xFF1
  8679                           postinc0	equ	0xFEE
  8680                           wreg	equ	0xFE8
  8681                           postinc1	equ	0xFE6
  8682                           postdec1	equ	0xFE5
  8683                           fsr1l	equ	0xFE1
  8684                           indf2	equ	0xFDF
  8685                           postinc2	equ	0xFDE
  8686                           postdec2	equ	0xFDD
  8687                           fsr2h	equ	0xFDA
  8688                           fsr2l	equ	0xFD9
  8689                           status	equ	0xFD8
  8690                           
  8691 ;; *************** function _toMonth *****************
  8692 ;; Defined at:
  8693 ;;		line 102 in file "src/DS3231.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  month           2   14[COMRAM] PTR unsigned char 
  8696 ;;		 -> month(1), 
  8697 ;;  year            2   16[COMRAM] PTR unsigned char 
  8698 ;;		 -> year(1), 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  m               1   19[COMRAM] struct .
  8701 ;; Return value:  Size  Location     Type
  8702 ;;		None               void
  8703 ;; Registers used:
  8704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8705 ;; Tracked objects:
  8706 ;;		On entry : 0/0
  8707 ;;		On exit  : 0/0
  8708 ;;		Unchanged: 0/0
  8709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8714 ;;Total ram usage:        6 bytes
  8715 ;; Hardware stack levels used:    1
  8716 ;; Hardware stack levels required when called:    1
  8717 ;; This function calls:
  8718 ;;		Nothing
  8719 ;; This function is called by:
  8720 ;;		_getDate
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           	psect	text31
  8725  002CA2                     __ptext31:
  8726                           	opt stack 0
  8727  002CA2                     _toMonth:
  8728                           	opt stack 27
  8729                           
  8730                           ;DS3231.c: 103: MONTH_t m;
  8731                           ;DS3231.c: 104: m.month = *month;
  8732                           
  8733                           ;incstack = 0
  8734  002CA2  C00F  FFD9         	movff	toMonth@month,fsr2l
  8735  002CA6  C010  FFDA         	movff	toMonth@month+1,fsr2h
  8736  002CAA  50DF               	movf	indf2,w,c
  8737  002CAC  6E14               	movwf	toMonth@m,c
  8738                           
  8739                           ;DS3231.c: 105: *month = (m.month0) + (m.month1) * 10;
  8740  002CAE  5014               	movf	toMonth@m,w,c
  8741  002CB0  0B0F               	andlw	15
  8742  002CB2  6E13               	movwf	??_toMonth& (0+255),c
  8743  002CB4  3814               	swapf	toMonth@m,w,c
  8744  002CB6  0B07               	andlw	7
  8745  002CB8  0D0A               	mullw	10
  8746  002CBA  50F3               	movf	prodl,w,c
  8747  002CBC  2413               	addwf	??_toMonth,w,c
  8748  002CBE  C00F  FFD9         	movff	toMonth@month,fsr2l
  8749  002CC2  C010  FFDA         	movff	toMonth@month+1,fsr2h
  8750  002CC6  6EDF               	movwf	indf2,c
  8751                           
  8752                           ;DS3231.c: 106: *year += m.century * 100;
  8753  002CC8  AE14               	btfss	toMonth@m,7,c
  8754  002CCA  D002               	goto	u3530
  8755  002CCC  0E01               	movlw	1
  8756  002CCE  D001               	goto	u3536
  8757  002CD0                     u3530:
  8758  002CD0  0E00               	movlw	0
  8759  002CD2                     u3536:
  8760  002CD2  0D64               	mullw	100
  8761  002CD4  C011  FFD9         	movff	toMonth@year,fsr2l
  8762  002CD8  C012  FFDA         	movff	toMonth@year+1,fsr2h
  8763  002CDC  50F3               	movf	prodl,w,c
  8764  002CDE  26DF               	addwf	indf2,f,c
  8765  002CE0  0012               	return	
  8766  002CE2                     __end_of_toMonth:
  8767                           	opt stack 0
  8768                           tosu	equ	0xFFF
  8769                           tosh	equ	0xFFE
  8770                           tosl	equ	0xFFD
  8771                           pclath	equ	0xFFA
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           prodh	equ	0xFF4
  8777                           prodl	equ	0xFF3
  8778                           intcon	equ	0xFF2
  8779                           intcon2	equ	0xFF1
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           postinc1	equ	0xFE6
  8783                           postdec1	equ	0xFE5
  8784                           fsr1l	equ	0xFE1
  8785                           indf2	equ	0xFDF
  8786                           postinc2	equ	0xFDE
  8787                           postdec2	equ	0xFDD
  8788                           fsr2h	equ	0xFDA
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _bcdtodec *****************
  8793 ;; Defined at:
  8794 ;;		line 109 in file "src/DS3231.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;  dec             2   14[COMRAM] PTR unsigned char 
  8797 ;;		 -> year(1), day(1), second(1), minute(1), 
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;  bcd             1   17[COMRAM] struct .
  8800 ;; Return value:  Size  Location     Type
  8801 ;;		None               void
  8802 ;; Registers used:
  8803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8809 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8811 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8812 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8813 ;;Total ram usage:        4 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    1
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_getTime
  8820 ;;		_getDate
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text32
  8825  002E2C                     __ptext32:
  8826                           	opt stack 0
  8827  002E2C                     _bcdtodec:
  8828                           	opt stack 27
  8829                           
  8830                           ;DS3231.c: 110: BCD_t bcd;
  8831                           ;DS3231.c: 111: bcd.bcd = *dec;
  8832                           
  8833                           ;incstack = 0
  8834  002E2C  C00F  FFD9         	movff	bcdtodec@dec,fsr2l
  8835  002E30  C010  FFDA         	movff	bcdtodec@dec+1,fsr2h
  8836  002E34  50DF               	movf	indf2,w,c
  8837  002E36  6E12               	movwf	bcdtodec@bcd,c
  8838                           
  8839                           ;DS3231.c: 112: *dec = (bcd.bcd0) + (bcd.bcd1) * 10;
  8840  002E38  5012               	movf	bcdtodec@bcd,w,c
  8841  002E3A  0B0F               	andlw	15
  8842  002E3C  6E11               	movwf	??_bcdtodec& (0+255),c
  8843  002E3E  3812               	swapf	bcdtodec@bcd,w,c
  8844  002E40  0B0F               	andlw	15
  8845  002E42  0D0A               	mullw	10
  8846  002E44  50F3               	movf	prodl,w,c
  8847  002E46  2411               	addwf	??_bcdtodec,w,c
  8848  002E48  C00F  FFD9         	movff	bcdtodec@dec,fsr2l
  8849  002E4C  C010  FFDA         	movff	bcdtodec@dec+1,fsr2h
  8850  002E50  6EDF               	movwf	indf2,c
  8851  002E52  0012               	return	
  8852  002E54                     __end_of_bcdtodec:
  8853                           	opt stack 0
  8854                           tosu	equ	0xFFF
  8855                           tosh	equ	0xFFE
  8856                           tosl	equ	0xFFD
  8857                           pclath	equ	0xFFA
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           intcon2	equ	0xFF1
  8866                           postinc0	equ	0xFEE
  8867                           wreg	equ	0xFE8
  8868                           postinc1	equ	0xFE6
  8869                           postdec1	equ	0xFE5
  8870                           fsr1l	equ	0xFE1
  8871                           indf2	equ	0xFDF
  8872                           postinc2	equ	0xFDE
  8873                           postdec2	equ	0xFDD
  8874                           fsr2h	equ	0xFDA
  8875                           fsr2l	equ	0xFD9
  8876                           status	equ	0xFD8
  8877                           
  8878 ;; *************** function __I2CStop *****************
  8879 ;; Defined at:
  8880 ;;		line 30 in file "src/I2C.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, status,2, status,0, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8898 ;;Total ram usage:        0 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    2
  8901 ;; This function calls:
  8902 ;;		__I2CWait
  8903 ;; This function is called by:
  8904 ;;		_getTime
  8905 ;;		_getDate
  8906 ;;		_setRTC
  8907 ;;		_setDay
  8908 ;;		_getDay
  8909 ;; This function uses a non-reentrant model
  8910 ;;
  8911                           
  8912                           	psect	text33
  8913  002F72                     __ptext33:
  8914                           	opt stack 0
  8915  002F72                     __I2CStop:
  8916                           	opt stack 26
  8917  002F72                     l206:
  8918                           
  8919                           ;I2C.c: 32: PIR2bits.BCLIF = 0;
  8920  002F72  96A1               	bcf	4001,3,c	;volatile
  8921                           
  8922                           ;I2C.c: 33: _I2CWait();
  8923  002F74  ECD4  F017         	call	__I2CWait	;wreg free
  8924                           
  8925                           ;I2C.c: 34: SSPCON2bits.PEN = 1;
  8926  002F78  84C5               	bsf	4037,2,c	;volatile
  8927  002F7A                     l207:
  8928  002F7A  B4C5               	btfsc	4037,2,c	;volatile
  8929  002F7C  D7FE               	goto	l207
  8930                           
  8931                           ;I2C.c: 36: } while (PIR2bits.BCLIF == 1);
  8932  002F7E  A6A1               	btfss	4001,3,c	;volatile
  8933  002F80  0012               	return	
  8934  002F82  D7F7               	goto	l206
  8935  002F84                     __end_of__I2CStop:
  8936                           	opt stack 0
  8937                           tosu	equ	0xFFF
  8938                           tosh	equ	0xFFE
  8939                           tosl	equ	0xFFD
  8940                           pclath	equ	0xFFA
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           intcon2	equ	0xFF1
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           postinc1	equ	0xFE6
  8952                           postdec1	equ	0xFE5
  8953                           fsr1l	equ	0xFE1
  8954                           indf2	equ	0xFDF
  8955                           postinc2	equ	0xFDE
  8956                           postdec2	equ	0xFDD
  8957                           fsr2h	equ	0xFDA
  8958                           fsr2l	equ	0xFD9
  8959                           status	equ	0xFD8
  8960                           
  8961 ;; *************** function __I2CStart *****************
  8962 ;; Defined at:
  8963 ;;		line 39 in file "src/I2C.c"
  8964 ;; Parameters:    Size  Location     Type
  8965 ;;		None
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;		None
  8968 ;; Return value:  Size  Location     Type
  8969 ;;		None               void
  8970 ;; Registers used:
  8971 ;;		wreg, status,2, status,0, cstack
  8972 ;; Tracked objects:
  8973 ;;		On entry : 0/0
  8974 ;;		On exit  : 0/0
  8975 ;;		Unchanged: 0/0
  8976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8981 ;;Total ram usage:        0 bytes
  8982 ;; Hardware stack levels used:    1
  8983 ;; Hardware stack levels required when called:    2
  8984 ;; This function calls:
  8985 ;;		__I2CWait
  8986 ;; This function is called by:
  8987 ;;		_getTime
  8988 ;;		_getDate
  8989 ;;		_setRTC
  8990 ;;		_setDay
  8991 ;;		_getDay
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text34
  8996  002F84                     __ptext34:
  8997                           	opt stack 0
  8998  002F84                     __I2CStart:
  8999                           	opt stack 26
  9000  002F84                     l214:
  9001                           
  9002                           ;I2C.c: 41: PIR2bits.BCLIF = 0;
  9003  002F84  96A1               	bcf	4001,3,c	;volatile
  9004                           
  9005                           ;I2C.c: 42: _I2CWait();
  9006  002F86  ECD4  F017         	call	__I2CWait	;wreg free
  9007                           
  9008                           ;I2C.c: 43: SSPCON2bits.SEN = 1;
  9009  002F8A  80C5               	bsf	4037,0,c	;volatile
  9010  002F8C                     l215:
  9011  002F8C  B0C5               	btfsc	4037,0,c	;volatile
  9012  002F8E  D7FE               	goto	l215
  9013                           
  9014                           ;I2C.c: 45: } while (PIR2bits.BCLIF == 1);
  9015  002F90  A6A1               	btfss	4001,3,c	;volatile
  9016  002F92  0012               	return	
  9017  002F94  D7F7               	goto	l214
  9018  002F96                     __end_of__I2CStart:
  9019                           	opt stack 0
  9020                           tosu	equ	0xFFF
  9021                           tosh	equ	0xFFE
  9022                           tosl	equ	0xFFD
  9023                           pclath	equ	0xFFA
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           intcon2	equ	0xFF1
  9032                           postinc0	equ	0xFEE
  9033                           wreg	equ	0xFE8
  9034                           postinc1	equ	0xFE6
  9035                           postdec1	equ	0xFE5
  9036                           fsr1l	equ	0xFE1
  9037                           indf2	equ	0xFDF
  9038                           postinc2	equ	0xFDE
  9039                           postdec2	equ	0xFDD
  9040                           fsr2h	equ	0xFDA
  9041                           fsr2l	equ	0xFD9
  9042                           status	equ	0xFD8
  9043                           
  9044 ;; *************** function __I2CRepeatedStart *****************
  9045 ;; Defined at:
  9046 ;;		line 48 in file "src/I2C.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;		None
  9051 ;; Return value:  Size  Location     Type
  9052 ;;		None               void
  9053 ;; Registers used:
  9054 ;;		wreg, status,2, status,0, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9064 ;;Total ram usage:        0 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    2
  9067 ;; This function calls:
  9068 ;;		__I2CWait
  9069 ;; This function is called by:
  9070 ;;		_getTime
  9071 ;;		_getDate
  9072 ;;		_getDay
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text35
  9077  002F96                     __ptext35:
  9078                           	opt stack 0
  9079  002F96                     __I2CRepeatedStart:
  9080                           	opt stack 26
  9081  002F96                     l222:
  9082                           
  9083                           ;I2C.c: 50: PIR2bits.BCLIF = 0;
  9084  002F96  96A1               	bcf	4001,3,c	;volatile
  9085                           
  9086                           ;I2C.c: 51: _I2CWait();
  9087  002F98  ECD4  F017         	call	__I2CWait	;wreg free
  9088                           
  9089                           ;I2C.c: 52: SSPCON2bits.RSEN = 1;
  9090  002F9C  82C5               	bsf	4037,1,c	;volatile
  9091  002F9E                     l223:
  9092  002F9E  B2C5               	btfsc	4037,1,c	;volatile
  9093  002FA0  D7FE               	goto	l223
  9094                           
  9095                           ;I2C.c: 54: } while (PIR2bits.BCLIF == 1);
  9096  002FA2  A6A1               	btfss	4001,3,c	;volatile
  9097  002FA4  0012               	return	
  9098  002FA6  D7F7               	goto	l222
  9099  002FA8                     __end_of__I2CRepeatedStart:
  9100                           	opt stack 0
  9101                           tosu	equ	0xFFF
  9102                           tosh	equ	0xFFE
  9103                           tosl	equ	0xFFD
  9104                           pclath	equ	0xFFA
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodh	equ	0xFF4
  9110                           prodl	equ	0xFF3
  9111                           intcon	equ	0xFF2
  9112                           intcon2	equ	0xFF1
  9113                           postinc0	equ	0xFEE
  9114                           wreg	equ	0xFE8
  9115                           postinc1	equ	0xFE6
  9116                           postdec1	equ	0xFE5
  9117                           fsr1l	equ	0xFE1
  9118                           indf2	equ	0xFDF
  9119                           postinc2	equ	0xFDE
  9120                           postdec2	equ	0xFDD
  9121                           fsr2h	equ	0xFDA
  9122                           fsr2l	equ	0xFD9
  9123                           status	equ	0xFD8
  9124                           
  9125 ;; *************** function __I2CReceive *****************
  9126 ;; Defined at:
  9127 ;;		line 11 in file "src/I2C.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;  data            2   15[COMRAM] PTR unsigned char 
  9130 ;;		 -> year(1), month(1), day(1), second(1), 
  9131 ;;		 -> minute(1), hour(1), 
  9132 ;;  ack             1   17[COMRAM] unsigned char 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;		None               void
  9137 ;; Registers used:
  9138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9144 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9147 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9148 ;;Total ram usage:        3 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    2
  9151 ;; This function calls:
  9152 ;;		__I2CWait
  9153 ;; This function is called by:
  9154 ;;		_getTime
  9155 ;;		_getDate
  9156 ;;		_getDay
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text36
  9161  002DCE                     __ptext36:
  9162                           	opt stack 0
  9163  002DCE                     __I2CReceive:
  9164                           	opt stack 26
  9165                           
  9166                           ;I2C.c: 12: _I2CWait();
  9167                           
  9168                           ;incstack = 0
  9169  002DCE  ECD4  F017         	call	__I2CWait	;wreg free
  9170                           
  9171                           ;I2C.c: 13: SSPCON2bits.RCEN = 1;
  9172  002DD2  86C5               	bsf	4037,3,c	;volatile
  9173                           
  9174                           ;I2C.c: 14: _I2CWait();
  9175  002DD4  ECD4  F017         	call	__I2CWait	;wreg free
  9176                           
  9177                           ;I2C.c: 15: *data = SSPBUF;
  9178  002DD8  C010  FFD9         	movff	__I2CReceive@data,fsr2l
  9179  002DDC  C011  FFDA         	movff	__I2CReceive@data+1,fsr2h
  9180  002DE0  CFC9 FFDF          	movff	4041,indf2	;volatile
  9181                           
  9182                           ;I2C.c: 16: _I2CWait();
  9183  002DE4  ECD4  F017         	call	__I2CWait	;wreg free
  9184                           
  9185                           ;I2C.c: 17: SSPCON2bits.ACKDT = ack;
  9186  002DE8  B012               	btfsc	__I2CReceive@ack,0,c
  9187  002DEA  D002               	bra	u3465
  9188  002DEC  9AC5               	bcf	4037,5,c	;volatile
  9189  002DEE  D001               	bra	u3466
  9190  002DF0                     u3465:
  9191  002DF0  8AC5               	bsf	4037,5,c	;volatile
  9192  002DF2                     u3466:
  9193                           
  9194                           ;I2C.c: 18: SSPCON2bits.ACKEN = 1;
  9195  002DF2  88C5               	bsf	4037,4,c	;volatile
  9196  002DF4                     l188:
  9197  002DF4  B8C5               	btfsc	4037,4,c	;volatile
  9198  002DF6  D7FE               	goto	l188
  9199  002DF8                     l191:
  9200  002DF8  A6A1               	btfss	4001,3,c	;volatile
  9201  002DFA  0012               	return	
  9202  002DFC  D7FD               	goto	l191
  9203  002DFE                     __end_of__I2CReceive:
  9204                           	opt stack 0
  9205                           tosu	equ	0xFFF
  9206                           tosh	equ	0xFFE
  9207                           tosl	equ	0xFFD
  9208                           pclath	equ	0xFFA
  9209                           tblptru	equ	0xFF8
  9210                           tblptrh	equ	0xFF7
  9211                           tblptrl	equ	0xFF6
  9212                           tablat	equ	0xFF5
  9213                           prodh	equ	0xFF4
  9214                           prodl	equ	0xFF3
  9215                           intcon	equ	0xFF2
  9216                           intcon2	equ	0xFF1
  9217                           postinc0	equ	0xFEE
  9218                           wreg	equ	0xFE8
  9219                           postinc1	equ	0xFE6
  9220                           postdec1	equ	0xFE5
  9221                           fsr1l	equ	0xFE1
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function __I2CAddress *****************
  9230 ;; Defined at:
  9231 ;;		line 3 in file "src/I2C.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  address         1    wreg     unsigned char 
  9234 ;;  readnwrite      1   16[COMRAM] unsigned char 
  9235 ;; Auto vars:     Size  Location     Type
  9236 ;;  address         1   17[COMRAM] unsigned char 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/0
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9250 ;;Total ram usage:        2 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    3
  9253 ;; This function calls:
  9254 ;;		__I2CSend
  9255 ;; This function is called by:
  9256 ;;		_getTime
  9257 ;;		_getDate
  9258 ;;		_setRTC
  9259 ;;		_setDay
  9260 ;;		_getDay
  9261 ;; This function uses a non-reentrant model
  9262 ;;
  9263                           
  9264                           	psect	text37
  9265  002FBA                     __ptext37:
  9266                           	opt stack 0
  9267  002FBA                     __I2CAddress:
  9268                           	opt stack 25
  9269                           
  9270                           ;incstack = 0
  9271                           ;__I2CAddress@address stored from wreg
  9272  002FBA  6E12               	movwf	__I2CAddress@address,c
  9273                           
  9274                           ;I2C.c: 4: _I2CSend(address * 2 + readnwrite);
  9275  002FBC  5012               	movf	__I2CAddress@address,w,c
  9276  002FBE  0D02               	mullw	2
  9277  002FC0  50F3               	movf	prodl,w,c
  9278  002FC2  2411               	addwf	__I2CAddress@readnwrite,w,c
  9279  002FC4  ECAF  F017         	call	__I2CSend
  9280  002FC8  0012               	return	
  9281  002FCA                     __end_of__I2CAddress:
  9282                           	opt stack 0
  9283                           tosu	equ	0xFFF
  9284                           tosh	equ	0xFFE
  9285                           tosl	equ	0xFFD
  9286                           pclath	equ	0xFFA
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           intcon	equ	0xFF2
  9294                           intcon2	equ	0xFF1
  9295                           postinc0	equ	0xFEE
  9296                           wreg	equ	0xFE8
  9297                           postinc1	equ	0xFE6
  9298                           postdec1	equ	0xFE5
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function __I2CSend *****************
  9308 ;; Defined at:
  9309 ;;		line 23 in file "src/I2C.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  data            1    wreg     unsigned char 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  data            1   15[COMRAM] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, status,2, status,0, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9327 ;;Total ram usage:        1 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    2
  9330 ;; This function calls:
  9331 ;;		__I2CWait
  9332 ;; This function is called by:
  9333 ;;		_getTime
  9334 ;;		_getDate
  9335 ;;		__I2CAddress
  9336 ;;		_setRTC
  9337 ;;		_setDay
  9338 ;;		_getDay
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           	psect	text38
  9343  002F5E                     __ptext38:
  9344                           	opt stack 0
  9345  002F5E                     __I2CSend:
  9346                           	opt stack 26
  9347                           
  9348                           ;incstack = 0
  9349                           ;__I2CSend@data stored from wreg
  9350  002F5E  6E10               	movwf	__I2CSend@data,c
  9351                           
  9352                           ;I2C.c: 24: _I2CWait();
  9353  002F60  ECD4  F017         	call	__I2CWait	;wreg free
  9354                           
  9355                           ;I2C.c: 25: SSPBUF = data;
  9356  002F64  C010  FFC9         	movff	__I2CSend@data,4041	;volatile
  9357  002F68                     l197:
  9358  002F68  B0C7               	btfsc	4039,0,c	;volatile
  9359  002F6A  D7FE               	goto	l197
  9360  002F6C                     l200:
  9361  002F6C  A6A1               	btfss	4001,3,c	;volatile
  9362  002F6E  0012               	return	
  9363  002F70  D7FD               	goto	l200
  9364  002F72                     __end_of__I2CSend:
  9365                           	opt stack 0
  9366                           tosu	equ	0xFFF
  9367                           tosh	equ	0xFFE
  9368                           tosl	equ	0xFFD
  9369                           pclath	equ	0xFFA
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           intcon	equ	0xFF2
  9377                           intcon2	equ	0xFF1
  9378                           postinc0	equ	0xFEE
  9379                           wreg	equ	0xFE8
  9380                           postinc1	equ	0xFE6
  9381                           postdec1	equ	0xFE5
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function __I2CWait *****************
  9391 ;; Defined at:
  9392 ;;		line 7 in file "src/I2C.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;		None
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9410 ;;Total ram usage:        1 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    1
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		__I2CReceive
  9417 ;;		__I2CSend
  9418 ;;		__I2CStop
  9419 ;;		__I2CStart
  9420 ;;		__I2CRepeatedStart
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           	psect	text39
  9425  002FA8                     __ptext39:
  9426                           	opt stack 0
  9427  002FA8                     __I2CWait:
  9428                           	opt stack 26
  9429  002FA8                     l182:
  9430  002FA8  B4C7               	btfsc	4039,2,c	;volatile
  9431  002FAA  D7FE               	goto	l182
  9432  002FAC  CFC5 F00F          	movff	4037,??__I2CWait	;volatile
  9433  002FB0  0E1F               	movlw	31
  9434  002FB2  160F               	andwf	??__I2CWait,f,c
  9435  002FB4  B4D8               	btfsc	status,2,c
  9436  002FB6  0012               	return	
  9437  002FB8  D7F7               	goto	l182
  9438  002FBA                     __end_of__I2CWait:
  9439                           	opt stack 0
  9440                           tosu	equ	0xFFF
  9441                           tosh	equ	0xFFE
  9442                           tosl	equ	0xFFD
  9443                           pclath	equ	0xFFA
  9444                           tblptru	equ	0xFF8
  9445                           tblptrh	equ	0xFF7
  9446                           tblptrl	equ	0xFF6
  9447                           tablat	equ	0xFF5
  9448                           prodh	equ	0xFF4
  9449                           prodl	equ	0xFF3
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postinc1	equ	0xFE6
  9455                           postdec1	equ	0xFE5
  9456                           fsr1l	equ	0xFE1
  9457                           indf2	equ	0xFDF
  9458                           postinc2	equ	0xFDE
  9459                           postdec2	equ	0xFDD
  9460                           fsr2h	equ	0xFDA
  9461                           fsr2l	equ	0xFD9
  9462                           status	equ	0xFD8
  9463                           
  9464 ;; *************** function _getADC9 *****************
  9465 ;; Defined at:
  9466 ;;		line 4 in file "src/zonnekracht.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;  zonnekracht     2   56[COMRAM] PTR float 
  9469 ;;		 -> adc(3), 
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;  adc             2   60[COMRAM] int 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;		None               void
  9474 ;; Registers used:
  9475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9481 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9485 ;;Total ram usage:        6 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    3
  9488 ;; This function calls:
  9489 ;;		___awtoft
  9490 ;;		___ftdiv
  9491 ;;		___ftmul
  9492 ;; This function is called by:
  9493 ;;		_loop
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           	psect	text40
  9498  002748                     __ptext40:
  9499                           	opt stack 0
  9500  002748                     _getADC9:
  9501                           	opt stack 26
  9502                           
  9503                           ;zonnekracht.c: 5: int adc = 0;
  9504                           
  9505                           ;incstack = 0
  9506  002748  0E00               	movlw	0
  9507  00274A  6E3E               	movwf	getADC9@adc+1,c
  9508  00274C  0E00               	movlw	0
  9509  00274E  6E3D               	movwf	getADC9@adc,c
  9510                           
  9511                           ;zonnekracht.c: 6: ADCON0 = 0x27;
  9512  002750  0E27               	movlw	39
  9513  002752  6EC2               	movwf	4034,c	;volatile
  9514                           
  9515                           ;zonnekracht.c: 7: ADCON1 = 0x00;
  9516  002754  0E00               	movlw	0
  9517  002756  6EC1               	movwf	4033,c	;volatile
  9518                           
  9519                           ;zonnekracht.c: 8: ADCON2 = 0xAE;
  9520  002758  0EAE               	movlw	174
  9521  00275A  6EC0               	movwf	4032,c	;volatile
  9522  00275C                     l438:
  9523  00275C  B2C2               	btfsc	4034,1,c	;volatile
  9524  00275E  D7FE               	goto	l438
  9525                           
  9526                           ;zonnekracht.c: 10: adc = ADRESH<<8|ADRESL;
  9527  002760  50C3               	movf	4035,w,c	;volatile
  9528  002762  CFC4 F03B          	movff	4036,??_getADC9	;volatile
  9529  002766  6A3C               	clrf	(??_getADC9+1)& (0+255),c
  9530  002768  C03B  F03C         	movff	??_getADC9,??_getADC9+1
  9531  00276C  6A3B               	clrf	??_getADC9,c
  9532  00276E  103B               	iorwf	??_getADC9,w,c
  9533  002770  6E3D               	movwf	getADC9@adc,c
  9534  002772  503C               	movf	??_getADC9+1,w,c
  9535  002774  6E3E               	movwf	getADC9@adc+1,c
  9536                           
  9537                           ;zonnekracht.c: 11: *zonnekracht = adc / 4096.0 * 5.0;
  9538  002776  0E00               	movlw	0
  9539  002778  6E1E               	movwf	___ftdiv@f2,c
  9540  00277A  0E80               	movlw	128
  9541  00277C  6E1F               	movwf	___ftdiv@f2+1,c
  9542  00277E  0E45               	movlw	69
  9543  002780  6E20               	movwf	___ftdiv@f2+2,c
  9544  002782  C03D  F017         	movff	getADC9@adc,___awtoft@c
  9545  002786  C03E  F018         	movff	getADC9@adc+1,___awtoft@c+1
  9546  00278A  EC2D  F016         	call	___awtoft	;wreg free
  9547  00278E  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  9548  002792  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  9549  002796  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  9550  00279A  ECEA  F010         	call	___ftdiv	;wreg free
  9551  00279E  C01B  F02A         	movff	?___ftdiv,___ftmul@f1
  9552  0027A2  C01C  F02B         	movff	?___ftdiv+1,___ftmul@f1+1
  9553  0027A6  C01D  F02C         	movff	?___ftdiv+2,___ftmul@f1+2
  9554  0027AA  0E00               	movlw	0
  9555  0027AC  6E2D               	movwf	___ftmul@f2,c
  9556  0027AE  0EA0               	movlw	160
  9557  0027B0  6E2E               	movwf	___ftmul@f2+1,c
  9558  0027B2  0E40               	movlw	64
  9559  0027B4  6E2F               	movwf	___ftmul@f2+2,c
  9560  0027B6  EC72  F010         	call	___ftmul	;wreg free
  9561  0027BA  C039  FFD9         	movff	getADC9@zonnekracht,fsr2l
  9562  0027BE  C03A  FFDA         	movff	getADC9@zonnekracht+1,fsr2h
  9563  0027C2  C02A  FFDE         	movff	?___ftmul,postinc2
  9564  0027C6  C02B  FFDE         	movff	?___ftmul+1,postinc2
  9565  0027CA  C02C  FFDD         	movff	?___ftmul+2,postdec2
  9566  0027CE  52DD               	movf	postdec2,f,c
  9567  0027D0  0012               	return	
  9568  0027D2                     __end_of_getADC9:
  9569                           	opt stack 0
  9570                           tosu	equ	0xFFF
  9571                           tosh	equ	0xFFE
  9572                           tosl	equ	0xFFD
  9573                           pclath	equ	0xFFA
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           postinc1	equ	0xFE6
  9585                           postdec1	equ	0xFE5
  9586                           fsr1l	equ	0xFE1
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           fsr2h	equ	0xFDA
  9591                           fsr2l	equ	0xFD9
  9592                           status	equ	0xFD8
  9593                           
  9594 ;; *************** function ___ftmul *****************
  9595 ;; Defined at:
  9596 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;  f1              3   41[COMRAM] float 
  9599 ;;  f2              3   44[COMRAM] float 
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;  f3_as_produc    3   51[COMRAM] unsigned um
  9602 ;;  sign            1   55[COMRAM] unsigned char 
  9603 ;;  cntr            1   54[COMRAM] unsigned char 
  9604 ;;  exp             1   50[COMRAM] unsigned char 
  9605 ;; Return value:  Size  Location     Type
  9606 ;;                  3   41[COMRAM] float 
  9607 ;; Registers used:
  9608 ;;		wreg, status,2, status,0, cstack
  9609 ;; Tracked objects:
  9610 ;;		On entry : 0/0
  9611 ;;		On exit  : 0/0
  9612 ;;		Unchanged: 0/0
  9613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9614 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9615 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9617 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9618 ;;Total ram usage:       15 bytes
  9619 ;; Hardware stack levels used:    1
  9620 ;; Hardware stack levels required when called:    2
  9621 ;; This function calls:
  9622 ;;		___ftpack
  9623 ;; This function is called by:
  9624 ;;		_timer0init
  9625 ;;		_getTemperature
  9626 ;;		_getADC9
  9627 ;;		_fround
  9628 ;;		_scale
  9629 ;;		__doprnt
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           	psect	text41
  9634  0020E4                     __ptext41:
  9635                           	opt stack 0
  9636  0020E4                     ___ftmul:
  9637                           	opt stack 26
  9638                           
  9639                           ;incstack = 0
  9640  0020E4  C02C  F030         	movff	___ftmul@f1+2,??___ftmul
  9641  0020E8  6A31               	clrf	(??___ftmul+1)& (0+255),c
  9642  0020EA  6A32               	clrf	(??___ftmul+2)& (0+255),c
  9643  0020EC  342B               	rlcf	___ftmul@f1+1,w,c
  9644  0020EE  3630               	rlcf	??___ftmul& (0+255),f,c
  9645  0020F0  E301               	bnc	u5091
  9646  0020F2  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  9647  0020F4                     u5091:
  9648  0020F4  5030               	movf	??___ftmul,w,c
  9649  0020F6  6E33               	movwf	___ftmul@exp,c
  9650  0020F8  6633               	tstfsz	___ftmul@exp& (0+255),c
  9651  0020FA  D007               	goto	l4391
  9652  0020FC  0E00               	movlw	0
  9653  0020FE  6E2A               	movwf	?___ftmul,c
  9654  002100  0E00               	movlw	0
  9655  002102  6E2B               	movwf	?___ftmul+1,c
  9656  002104  0E00               	movlw	0
  9657  002106  6E2C               	movwf	?___ftmul+2,c
  9658  002108  0012               	return	
  9659  00210A                     l4391:
  9660  00210A  C02F  F030         	movff	___ftmul@f2+2,??___ftmul
  9661  00210E  6A31               	clrf	(??___ftmul+1)& (0+255),c
  9662  002110  6A32               	clrf	(??___ftmul+2)& (0+255),c
  9663  002112  342E               	rlcf	___ftmul@f2+1,w,c
  9664  002114  3630               	rlcf	??___ftmul& (0+255),f,c
  9665  002116  E301               	bnc	u5111
  9666  002118  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  9667  00211A                     u5111:
  9668  00211A  5030               	movf	??___ftmul,w,c
  9669  00211C  6E38               	movwf	___ftmul@sign,c
  9670  00211E  6638               	tstfsz	___ftmul@sign& (0+255),c
  9671  002120  D007               	goto	l4397
  9672  002122  0E00               	movlw	0
  9673  002124  6E2A               	movwf	?___ftmul,c
  9674  002126  0E00               	movlw	0
  9675  002128  6E2B               	movwf	?___ftmul+1,c
  9676  00212A  0E00               	movlw	0
  9677  00212C  6E2C               	movwf	?___ftmul+2,c
  9678  00212E  0012               	return	
  9679  002130                     l4397:
  9680  002130  5038               	movf	___ftmul@sign,w,c
  9681  002132  0F7B               	addlw	123
  9682  002134  2633               	addwf	___ftmul@exp,f,c
  9683  002136  C02C  F038         	movff	___ftmul@f1+2,___ftmul@sign
  9684  00213A  502F               	movf	___ftmul@f2+2,w,c
  9685  00213C  1A38               	xorwf	___ftmul@sign,f,c
  9686  00213E  0E80               	movlw	128
  9687  002140  1638               	andwf	___ftmul@sign,f,c
  9688  002142  8E2B               	bsf	___ftmul@f1+1,7,c
  9689  002144  8E2E               	bsf	___ftmul@f2+1,7,c
  9690  002146  0EFF               	movlw	255
  9691  002148  162D               	andwf	___ftmul@f2,f,c
  9692  00214A  0EFF               	movlw	255
  9693  00214C  162E               	andwf	___ftmul@f2+1,f,c
  9694  00214E  0E00               	movlw	0
  9695  002150  162F               	andwf	___ftmul@f2+2,f,c
  9696  002152  0E00               	movlw	0
  9697  002154  6E34               	movwf	___ftmul@f3_as_product,c
  9698  002156  0E00               	movlw	0
  9699  002158  6E35               	movwf	___ftmul@f3_as_product+1,c
  9700  00215A  0E00               	movlw	0
  9701  00215C  6E36               	movwf	___ftmul@f3_as_product+2,c
  9702  00215E  0E07               	movlw	7
  9703  002160  6E37               	movwf	___ftmul@cntr,c
  9704  002162                     l4411:
  9705  002162  A02A               	btfss	___ftmul@f1,0,c
  9706  002164  D006               	goto	l4415
  9707  002166  502D               	movf	___ftmul@f2,w,c
  9708  002168  2634               	addwf	___ftmul@f3_as_product,f,c
  9709  00216A  502E               	movf	___ftmul@f2+1,w,c
  9710  00216C  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  9711  00216E  502F               	movf	___ftmul@f2+2,w,c
  9712  002170  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  9713  002172                     l4415:
  9714  002172  90D8               	bcf	status,0,c
  9715  002174  322C               	rrcf	___ftmul@f1+2,f,c
  9716  002176  322B               	rrcf	___ftmul@f1+1,f,c
  9717  002178  322A               	rrcf	___ftmul@f1,f,c
  9718  00217A  90D8               	bcf	status,0,c
  9719  00217C  362D               	rlcf	___ftmul@f2,f,c
  9720  00217E  362E               	rlcf	___ftmul@f2+1,f,c
  9721  002180  362F               	rlcf	___ftmul@f2+2,f,c
  9722  002182  2E37               	decfsz	___ftmul@cntr,f,c
  9723  002184  D7EE               	goto	l4411
  9724  002186  0E09               	movlw	9
  9725  002188  6E37               	movwf	___ftmul@cntr,c
  9726  00218A                     l4421:
  9727  00218A  A02A               	btfss	___ftmul@f1,0,c
  9728  00218C  D006               	goto	l4425
  9729  00218E  502D               	movf	___ftmul@f2,w,c
  9730  002190  2634               	addwf	___ftmul@f3_as_product,f,c
  9731  002192  502E               	movf	___ftmul@f2+1,w,c
  9732  002194  2235               	addwfc	___ftmul@f3_as_product+1,f,c
  9733  002196  502F               	movf	___ftmul@f2+2,w,c
  9734  002198  2236               	addwfc	___ftmul@f3_as_product+2,f,c
  9735  00219A                     l4425:
  9736  00219A  90D8               	bcf	status,0,c
  9737  00219C  322C               	rrcf	___ftmul@f1+2,f,c
  9738  00219E  322B               	rrcf	___ftmul@f1+1,f,c
  9739  0021A0  322A               	rrcf	___ftmul@f1,f,c
  9740  0021A2  90D8               	bcf	status,0,c
  9741  0021A4  3236               	rrcf	___ftmul@f3_as_product+2,f,c
  9742  0021A6  3235               	rrcf	___ftmul@f3_as_product+1,f,c
  9743  0021A8  3234               	rrcf	___ftmul@f3_as_product,f,c
  9744  0021AA  2E37               	decfsz	___ftmul@cntr,f,c
  9745  0021AC  D7EE               	goto	l4421
  9746  0021AE  C034  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  9747  0021B2  C035  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9748  0021B6  C036  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9749  0021BA  C033  F012         	movff	___ftmul@exp,___ftpack@exp
  9750  0021BE  C038  F013         	movff	___ftmul@sign,___ftpack@sign
  9751  0021C2  EC21  F012         	call	___ftpack	;wreg free
  9752  0021C6  C00F  F02A         	movff	?___ftpack,?___ftmul
  9753  0021CA  C010  F02B         	movff	?___ftpack+1,?___ftmul+1
  9754  0021CE  C011  F02C         	movff	?___ftpack+2,?___ftmul+2
  9755  0021D2  0012               	return	
  9756  0021D4                     __end_of___ftmul:
  9757                           	opt stack 0
  9758                           tosu	equ	0xFFF
  9759                           tosh	equ	0xFFE
  9760                           tosl	equ	0xFFD
  9761                           pclath	equ	0xFFA
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           intcon2	equ	0xFF1
  9770                           postinc0	equ	0xFEE
  9771                           wreg	equ	0xFE8
  9772                           postinc1	equ	0xFE6
  9773                           postdec1	equ	0xFE5
  9774                           fsr1l	equ	0xFE1
  9775                           indf2	equ	0xFDF
  9776                           postinc2	equ	0xFDE
  9777                           postdec2	equ	0xFDD
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           
  9782 ;; *************** function ___ftdiv *****************
  9783 ;; Defined at:
  9784 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;  f1              3   26[COMRAM] float 
  9787 ;;  f2              3   29[COMRAM] float 
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  f3              3   36[COMRAM] float 
  9790 ;;  sign            1   40[COMRAM] unsigned char 
  9791 ;;  exp             1   39[COMRAM] unsigned char 
  9792 ;;  cntr            1   35[COMRAM] unsigned char 
  9793 ;; Return value:  Size  Location     Type
  9794 ;;                  3   26[COMRAM] float 
  9795 ;; Registers used:
  9796 ;;		wreg, status,2, status,0, cstack
  9797 ;; Tracked objects:
  9798 ;;		On entry : 0/0
  9799 ;;		On exit  : 0/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9802 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9803 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9805 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9806 ;;Total ram usage:       15 bytes
  9807 ;; Hardware stack levels used:    1
  9808 ;; Hardware stack levels required when called:    2
  9809 ;; This function calls:
  9810 ;;		___ftpack
  9811 ;; This function is called by:
  9812 ;;		_getADC9
  9813 ;; This function uses a non-reentrant model
  9814 ;;
  9815                           
  9816                           	psect	text42
  9817  0021D4                     __ptext42:
  9818                           	opt stack 0
  9819  0021D4                     ___ftdiv:
  9820                           	opt stack 26
  9821                           
  9822                           ;incstack = 0
  9823  0021D4  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  9824  0021D8  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9825  0021DA  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9826  0021DC  341C               	rlcf	___ftdiv@f1+1,w,c
  9827  0021DE  3621               	rlcf	??___ftdiv& (0+255),f,c
  9828  0021E0  E301               	bnc	u6211
  9829  0021E2  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9830  0021E4                     u6211:
  9831  0021E4  5021               	movf	??___ftdiv,w,c
  9832  0021E6  6E28               	movwf	___ftdiv@exp,c
  9833  0021E8  6628               	tstfsz	___ftdiv@exp& (0+255),c
  9834  0021EA  D007               	goto	l5009
  9835  0021EC  0E00               	movlw	0
  9836  0021EE  6E1B               	movwf	?___ftdiv,c
  9837  0021F0  0E00               	movlw	0
  9838  0021F2  6E1C               	movwf	?___ftdiv+1,c
  9839  0021F4  0E00               	movlw	0
  9840  0021F6  6E1D               	movwf	?___ftdiv+2,c
  9841  0021F8  0012               	return	
  9842  0021FA                     l5009:
  9843  0021FA  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  9844  0021FE  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  9845  002200  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  9846  002202  341F               	rlcf	___ftdiv@f2+1,w,c
  9847  002204  3621               	rlcf	??___ftdiv& (0+255),f,c
  9848  002206  E301               	bnc	u6231
  9849  002208  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  9850  00220A                     u6231:
  9851  00220A  5021               	movf	??___ftdiv,w,c
  9852  00220C  6E29               	movwf	___ftdiv@sign,c
  9853  00220E  6629               	tstfsz	___ftdiv@sign& (0+255),c
  9854  002210  D007               	goto	l5015
  9855  002212  0E00               	movlw	0
  9856  002214  6E1B               	movwf	?___ftdiv,c
  9857  002216  0E00               	movlw	0
  9858  002218  6E1C               	movwf	?___ftdiv+1,c
  9859  00221A  0E00               	movlw	0
  9860  00221C  6E1D               	movwf	?___ftdiv+2,c
  9861  00221E  0012               	return	
  9862  002220                     l5015:
  9863  002220  0E00               	movlw	0
  9864  002222  6E25               	movwf	___ftdiv@f3,c
  9865  002224  0E00               	movlw	0
  9866  002226  6E26               	movwf	___ftdiv@f3+1,c
  9867  002228  0E00               	movlw	0
  9868  00222A  6E27               	movwf	___ftdiv@f3+2,c
  9869  00222C  5029               	movf	___ftdiv@sign,w,c
  9870  00222E  0F89               	addlw	137
  9871  002230  5E28               	subwf	___ftdiv@exp,f,c
  9872  002232  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  9873  002236  5020               	movf	___ftdiv@f2+2,w,c
  9874  002238  1A29               	xorwf	___ftdiv@sign,f,c
  9875  00223A  0E80               	movlw	128
  9876  00223C  1629               	andwf	___ftdiv@sign,f,c
  9877  00223E  8E1C               	bsf	___ftdiv@f1+1,7,c
  9878  002240  0EFF               	movlw	255
  9879  002242  161B               	andwf	___ftdiv@f1,f,c
  9880  002244  0EFF               	movlw	255
  9881  002246  161C               	andwf	___ftdiv@f1+1,f,c
  9882  002248  0E00               	movlw	0
  9883  00224A  161D               	andwf	___ftdiv@f1+2,f,c
  9884  00224C  8E1F               	bsf	___ftdiv@f2+1,7,c
  9885  00224E  0EFF               	movlw	255
  9886  002250  161E               	andwf	___ftdiv@f2,f,c
  9887  002252  0EFF               	movlw	255
  9888  002254  161F               	andwf	___ftdiv@f2+1,f,c
  9889  002256  0E00               	movlw	0
  9890  002258  1620               	andwf	___ftdiv@f2+2,f,c
  9891  00225A  0E18               	movlw	24
  9892  00225C  6E24               	movwf	___ftdiv@cntr,c
  9893  00225E                     l5035:
  9894  00225E  90D8               	bcf	status,0,c
  9895  002260  3625               	rlcf	___ftdiv@f3,f,c
  9896  002262  3626               	rlcf	___ftdiv@f3+1,f,c
  9897  002264  3627               	rlcf	___ftdiv@f3+2,f,c
  9898  002266  501E               	movf	___ftdiv@f2,w,c
  9899  002268  5C1B               	subwf	___ftdiv@f1,w,c
  9900  00226A  501F               	movf	___ftdiv@f2+1,w,c
  9901  00226C  581C               	subwfb	___ftdiv@f1+1,w,c
  9902  00226E  5020               	movf	___ftdiv@f2+2,w,c
  9903  002270  581D               	subwfb	___ftdiv@f1+2,w,c
  9904  002272  A0D8               	btfss	status,0,c
  9905  002274  D007               	goto	l1007
  9906  002276  501E               	movf	___ftdiv@f2,w,c
  9907  002278  5E1B               	subwf	___ftdiv@f1,f,c
  9908  00227A  501F               	movf	___ftdiv@f2+1,w,c
  9909  00227C  5A1C               	subwfb	___ftdiv@f1+1,f,c
  9910  00227E  5020               	movf	___ftdiv@f2+2,w,c
  9911  002280  5A1D               	subwfb	___ftdiv@f1+2,f,c
  9912  002282  8025               	bsf	___ftdiv@f3,0,c
  9913  002284                     l1007:
  9914  002284  90D8               	bcf	status,0,c
  9915  002286  361B               	rlcf	___ftdiv@f1,f,c
  9916  002288  361C               	rlcf	___ftdiv@f1+1,f,c
  9917  00228A  361D               	rlcf	___ftdiv@f1+2,f,c
  9918  00228C  2E24               	decfsz	___ftdiv@cntr,f,c
  9919  00228E  D7E7               	goto	l5035
  9920  002290  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9921  002294  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9922  002298  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9923  00229C  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  9924  0022A0  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  9925  0022A4  EC21  F012         	call	___ftpack	;wreg free
  9926  0022A8  C00F  F01B         	movff	?___ftpack,?___ftdiv
  9927  0022AC  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  9928  0022B0  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  9929  0022B4  0012               	return	
  9930  0022B6                     __end_of___ftdiv:
  9931                           	opt stack 0
  9932                           tosu	equ	0xFFF
  9933                           tosh	equ	0xFFE
  9934                           tosl	equ	0xFFD
  9935                           pclath	equ	0xFFA
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           intcon2	equ	0xFF1
  9944                           postinc0	equ	0xFEE
  9945                           wreg	equ	0xFE8
  9946                           postinc1	equ	0xFE6
  9947                           postdec1	equ	0xFE5
  9948                           fsr1l	equ	0xFE1
  9949                           indf2	equ	0xFDF
  9950                           postinc2	equ	0xFDE
  9951                           postdec2	equ	0xFDD
  9952                           fsr2h	equ	0xFDA
  9953                           fsr2l	equ	0xFD9
  9954                           status	equ	0xFD8
  9955                           
  9956 ;; *************** function ___awtoft *****************
  9957 ;; Defined at:
  9958 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  c               2   22[COMRAM] int 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;  sign            1   25[COMRAM] unsigned char 
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  3   22[COMRAM] float 
  9965 ;; Registers used:
  9966 ;;		wreg, status,2, status,0, prodl, cstack
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9972 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9975 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9976 ;;Total ram usage:        4 bytes
  9977 ;; Hardware stack levels used:    1
  9978 ;; Hardware stack levels required when called:    2
  9979 ;; This function calls:
  9980 ;;		___ftpack
  9981 ;; This function is called by:
  9982 ;;		_getTemperature
  9983 ;;		_getADC9
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           	psect	text43
  9988  002C5A                     __ptext43:
  9989                           	opt stack 0
  9990  002C5A                     ___awtoft:
  9991                           	opt stack 26
  9992                           
  9993                           ;incstack = 0
  9994  002C5A  0E00               	movlw	0
  9995  002C5C  6E1A               	movwf	___awtoft@sign,c
  9996  002C5E  5018               	movf	___awtoft@c+1,w,c
  9997  002C60  0A80               	xorlw	128
  9998  002C62  6EF3               	movwf	prodl,c
  9999  002C64  0E80               	movlw	128
 10000  002C66  5CF3               	subwf	prodl,w,c
 10001  002C68  0E00               	movlw	0
 10002  002C6A  B4D8               	btfsc	status,2,c
 10003  002C6C  5C17               	subwf	___awtoft@c,w,c
 10004  002C6E  B0D8               	btfsc	status,0,c
 10005  002C70  D006               	goto	l5057
 10006  002C72  6C17               	negf	___awtoft@c,c
 10007  002C74  1E18               	comf	___awtoft@c+1,f,c
 10008  002C76  B0D8               	btfsc	status,0,c
 10009  002C78  2A18               	incf	___awtoft@c+1,f,c
 10010  002C7A  0E01               	movlw	1
 10011  002C7C  6E1A               	movwf	___awtoft@sign,c
 10012  002C7E                     l5057:
 10013  002C7E  C017  F00F         	movff	___awtoft@c,___ftpack@arg
 10014  002C82  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 10015  002C86  6A11               	clrf	___ftpack@arg+2,c
 10016  002C88  0E8E               	movlw	142
 10017  002C8A  6E12               	movwf	___ftpack@exp,c
 10018  002C8C  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
 10019  002C90  EC21  F012         	call	___ftpack	;wreg free
 10020  002C94  C00F  F017         	movff	?___ftpack,?___awtoft
 10021  002C98  C010  F018         	movff	?___ftpack+1,?___awtoft+1
 10022  002C9C  C011  F019         	movff	?___ftpack+2,?___awtoft+2
 10023  002CA0  0012               	return	
 10024  002CA2                     __end_of___awtoft:
 10025                           	opt stack 0
 10026                           tosu	equ	0xFFF
 10027                           tosh	equ	0xFFE
 10028                           tosl	equ	0xFFD
 10029                           pclath	equ	0xFFA
 10030                           tblptru	equ	0xFF8
 10031                           tblptrh	equ	0xFF7
 10032                           tblptrl	equ	0xFF6
 10033                           tablat	equ	0xFF5
 10034                           prodh	equ	0xFF4
 10035                           prodl	equ	0xFF3
 10036                           intcon	equ	0xFF2
 10037                           intcon2	equ	0xFF1
 10038                           postinc0	equ	0xFEE
 10039                           wreg	equ	0xFE8
 10040                           postinc1	equ	0xFE6
 10041                           postdec1	equ	0xFE5
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           fsr2h	equ	0xFDA
 10047                           fsr2l	equ	0xFD9
 10048                           status	equ	0xFD8
 10049                           
 10050 ;; *************** function ___ftpack *****************
 10051 ;; Defined at:
 10052 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  arg             3   14[COMRAM] unsigned um
 10055 ;;  exp             1   17[COMRAM] unsigned char 
 10056 ;;  sign            1   18[COMRAM] unsigned char 
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;		None
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  3   14[COMRAM] float 
 10061 ;; Registers used:
 10062 ;;		wreg, status,2, status,0
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10068 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10070 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10071 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10072 ;;Total ram usage:        8 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; Hardware stack levels required when called:    1
 10075 ;; This function calls:
 10076 ;;		Nothing
 10077 ;; This function is called by:
 10078 ;;		___awtoft
 10079 ;;		___ftadd
 10080 ;;		___ftdiv
 10081 ;;		___ftmul
 10082 ;;		___lltoft
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           	psect	text44
 10087  002442                     __ptext44:
 10088                           	opt stack 0
 10089  002442                     ___ftpack:
 10090                           	opt stack 26
 10091                           
 10092                           ;incstack = 0
 10093  002442  5012               	movf	___ftpack@exp,w,c
 10094  002444  B4D8               	btfsc	status,2,c
 10095  002446  D005               	goto	l4285
 10096  002448  500F               	movf	___ftpack@arg,w,c
 10097  00244A  1010               	iorwf	___ftpack@arg+1,w,c
 10098  00244C  1011               	iorwf	___ftpack@arg+2,w,c
 10099  00244E  A4D8               	btfss	status,2,c
 10100  002450  D00C               	goto	l4291
 10101  002452                     l4285:
 10102  002452  0E00               	movlw	0
 10103  002454  6E0F               	movwf	?___ftpack,c
 10104  002456  0E00               	movlw	0
 10105  002458  6E10               	movwf	?___ftpack+1,c
 10106  00245A  0E00               	movlw	0
 10107  00245C  6E11               	movwf	?___ftpack+2,c
 10108  00245E  0012               	return	
 10109  002460                     l4289:
 10110  002460  2A12               	incf	___ftpack@exp,f,c
 10111  002462  90D8               	bcf	status,0,c
 10112  002464  3211               	rrcf	___ftpack@arg+2,f,c
 10113  002466  3210               	rrcf	___ftpack@arg+1,f,c
 10114  002468  320F               	rrcf	___ftpack@arg,f,c
 10115  00246A                     l4291:
 10116  00246A  0E00               	movlw	0
 10117  00246C  140F               	andwf	___ftpack@arg,w,c
 10118  00246E  6E14               	movwf	??___ftpack& (0+255),c
 10119  002470  0E00               	movlw	0
 10120  002472  1410               	andwf	___ftpack@arg+1,w,c
 10121  002474  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10122  002476  0EFE               	movlw	254
 10123  002478  1411               	andwf	___ftpack@arg+2,w,c
 10124  00247A  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10125  00247C  5014               	movf	??___ftpack,w,c
 10126  00247E  1015               	iorwf	??___ftpack+1,w,c
 10127  002480  1016               	iorwf	??___ftpack+2,w,c
 10128  002482  B4D8               	btfsc	status,2,c
 10129  002484  D00C               	goto	l4297
 10130  002486  D7EC               	goto	l4289
 10131  002488                     l4293:
 10132  002488  2A12               	incf	___ftpack@exp,f,c
 10133  00248A  0E01               	movlw	1
 10134  00248C  260F               	addwf	___ftpack@arg,f,c
 10135  00248E  0E00               	movlw	0
 10136  002490  2210               	addwfc	___ftpack@arg+1,f,c
 10137  002492  0E00               	movlw	0
 10138  002494  2211               	addwfc	___ftpack@arg+2,f,c
 10139  002496  90D8               	bcf	status,0,c
 10140  002498  3211               	rrcf	___ftpack@arg+2,f,c
 10141  00249A  3210               	rrcf	___ftpack@arg+1,f,c
 10142  00249C  320F               	rrcf	___ftpack@arg,f,c
 10143  00249E                     l4297:
 10144  00249E  0E00               	movlw	0
 10145  0024A0  140F               	andwf	___ftpack@arg,w,c
 10146  0024A2  6E14               	movwf	??___ftpack& (0+255),c
 10147  0024A4  0E00               	movlw	0
 10148  0024A6  1410               	andwf	___ftpack@arg+1,w,c
 10149  0024A8  6E15               	movwf	(??___ftpack+1)& (0+255),c
 10150  0024AA  0EFF               	movlw	255
 10151  0024AC  1411               	andwf	___ftpack@arg+2,w,c
 10152  0024AE  6E16               	movwf	(??___ftpack+2)& (0+255),c
 10153  0024B0  5014               	movf	??___ftpack,w,c
 10154  0024B2  1015               	iorwf	??___ftpack+1,w,c
 10155  0024B4  1016               	iorwf	??___ftpack+2,w,c
 10156  0024B6  B4D8               	btfsc	status,2,c
 10157  0024B8  D006               	goto	l4301
 10158  0024BA  D7E6               	goto	l4293
 10159  0024BC                     l4299:
 10160  0024BC  0612               	decf	___ftpack@exp,f,c
 10161  0024BE  90D8               	bcf	status,0,c
 10162  0024C0  360F               	rlcf	___ftpack@arg,f,c
 10163  0024C2  3610               	rlcf	___ftpack@arg+1,f,c
 10164  0024C4  3611               	rlcf	___ftpack@arg+2,f,c
 10165  0024C6                     l4301:
 10166  0024C6  AE10               	btfss	___ftpack@arg+1,7,c
 10167  0024C8  D7F9               	goto	l4299
 10168  0024CA  A012               	btfss	___ftpack@exp,0,c
 10169  0024CC  9E10               	bcf	___ftpack@arg+1,7,c
 10170  0024CE  90D8               	bcf	status,0,c
 10171  0024D0  3212               	rrcf	___ftpack@exp,f,c
 10172  0024D2  5012               	movf	___ftpack@exp,w,c
 10173  0024D4  1211               	iorwf	___ftpack@arg+2,f,c
 10174  0024D6  5013               	movf	___ftpack@sign,w,c
 10175  0024D8  A4D8               	btfss	status,2,c
 10176  0024DA  8E11               	bsf	___ftpack@arg+2,7,c
 10177  0024DC  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 10178  0024E0  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 10179  0024E4  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 10180  0024E8  0012               	return	
 10181  0024EA                     __end_of___ftpack:
 10182                           	opt stack 0
 10183                           tosu	equ	0xFFF
 10184                           tosh	equ	0xFFE
 10185                           tosl	equ	0xFFD
 10186                           pclath	equ	0xFFA
 10187                           tblptru	equ	0xFF8
 10188                           tblptrh	equ	0xFF7
 10189                           tblptrl	equ	0xFF6
 10190                           tablat	equ	0xFF5
 10191                           prodh	equ	0xFF4
 10192                           prodl	equ	0xFF3
 10193                           intcon	equ	0xFF2
 10194                           intcon2	equ	0xFF1
 10195                           postinc0	equ	0xFEE
 10196                           wreg	equ	0xFE8
 10197                           postinc1	equ	0xFE6
 10198                           postdec1	equ	0xFE5
 10199                           fsr1l	equ	0xFE1
 10200                           indf2	equ	0xFDF
 10201                           postinc2	equ	0xFDE
 10202                           postdec2	equ	0xFDD
 10203                           fsr2h	equ	0xFDA
 10204                           fsr2l	equ	0xFD9
 10205                           status	equ	0xFD8
 10206                           
 10207 ;; *************** function _broadcastConvert *****************
 10208 ;; Defined at:
 10209 ;;		line 6 in file "src/DS18B20.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;		None               void
 10216 ;; Registers used:
 10217 ;;		wreg, status,2, status,0, cstack
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10227 ;;Total ram usage:        0 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    3
 10230 ;; This function calls:
 10231 ;;		_onewireInit
 10232 ;;		_onewireReadBit
 10233 ;;		_onewireWriteByte
 10234 ;; This function is called by:
 10235 ;;		_loop
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           	psect	text45
 10240  002F2A                     __ptext45:
 10241                           	opt stack 0
 10242  002F2A                     _broadcastConvert:
 10243                           	opt stack 26
 10244                           
 10245                           ;DS18B20.c: 8: onewireInit();
 10246                           
 10247                           ;incstack = 0
 10248  002F2A  EC74  F017         	call	_onewireInit	;wreg free
 10249                           
 10250                           ;DS18B20.c: 9: onewireWriteByte(0xCC);
 10251  002F2E  0ECC               	movlw	204
 10252  002F30  ECFF  F016         	call	_onewireWriteByte
 10253                           
 10254                           ;DS18B20.c: 10: onewireWriteByte(0x44);
 10255  002F34  0E44               	movlw	68
 10256  002F36  ECFF  F016         	call	_onewireWriteByte
 10257  002F3A                     l5097:
 10258                           
 10259                           ;DS18B20.c: 13: if (onewireReadBit())
 10260  002F3A  EC62  F017         	call	_onewireReadBit	;wreg free
 10261  002F3E  0900               	iorlw	0
 10262  002F40  A4D8               	btfss	status,2,c
 10263                           
 10264                           ;DS18B20.c: 14: break;
 10265  002F42  0012               	return	
 10266  002F44  D7FA               	goto	l5097
 10267  002F46                     __end_of_broadcastConvert:
 10268                           	opt stack 0
 10269                           tosu	equ	0xFFF
 10270                           tosh	equ	0xFFE
 10271                           tosl	equ	0xFFD
 10272                           pclath	equ	0xFFA
 10273                           tblptru	equ	0xFF8
 10274                           tblptrh	equ	0xFF7
 10275                           tblptrl	equ	0xFF6
 10276                           tablat	equ	0xFF5
 10277                           prodh	equ	0xFF4
 10278                           prodl	equ	0xFF3
 10279                           intcon	equ	0xFF2
 10280                           intcon2	equ	0xFF1
 10281                           postinc0	equ	0xFEE
 10282                           wreg	equ	0xFE8
 10283                           postinc1	equ	0xFE6
 10284                           postdec1	equ	0xFE5
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           fsr2h	equ	0xFDA
 10290                           fsr2l	equ	0xFD9
 10291                           status	equ	0xFD8
 10292                           
 10293 ;; *************** function _onewireWriteByte *****************
 10294 ;; Defined at:
 10295 ;;		line 64 in file "src/onewire.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;  data            1    wreg     unsigned char 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  data            1   17[COMRAM] unsigned char 
 10300 ;;  loop            1   18[COMRAM] unsigned char 
 10301 ;; Return value:  Size  Location     Type
 10302 ;;		None               void
 10303 ;; Registers used:
 10304 ;;		wreg, status,2, status,0, cstack
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10313 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10314 ;;Total ram usage:        3 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    2
 10317 ;; This function calls:
 10318 ;;		_onewireWriteBit
 10319 ;; This function is called by:
 10320 ;;		_broadcastConvert
 10321 ;;		_getTemperature
 10322 ;;		_getTemperatureInt
 10323 ;;		_printSingleAddress
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text46
 10328  002DFE                     __ptext46:
 10329                           	opt stack 0
 10330  002DFE                     _onewireWriteByte:
 10331                           	opt stack 26
 10332                           
 10333                           ;incstack = 0
 10334                           ;onewireWriteByte@data stored from wreg
 10335  002DFE  6E12               	movwf	onewireWriteByte@data,c
 10336                           
 10337                           ;onewire.c: 66: for (unsigned char loop = 0; loop < 8; loop++) {
 10338  002E00  0E00               	movlw	0
 10339  002E02  6E13               	movwf	onewireWriteByte@loop,c
 10340  002E04  0E07               	movlw	7
 10341  002E06  6413               	cpfsgt	onewireWriteByte@loop,c
 10342  002E08  D001               	goto	l4599
 10343  002E0A  0012               	return	
 10344  002E0C                     l4599:
 10345                           
 10346                           ;onewire.c: 67: onewireWriteBit(data & 0x01);
 10347  002E0C  C012  F011         	movff	onewireWriteByte@data,??_onewireWriteByte
 10348  002E10  0E01               	movlw	1
 10349  002E12  1611               	andwf	??_onewireWriteByte,f,c
 10350  002E14  5011               	movf	??_onewireWriteByte,w,c
 10351  002E16  6E0F               	movwf	onewireWriteBit@b,c
 10352  002E18  6A10               	clrf	onewireWriteBit@b+1,c
 10353  002E1A  ECAF  F016         	call	_onewireWriteBit	;wreg free
 10354                           
 10355                           ;onewire.c: 70: data >>= 1;
 10356  002E1E  90D8               	bcf	status,0,c
 10357  002E20  3212               	rrcf	onewireWriteByte@data,f,c
 10358  002E22  2A13               	incf	onewireWriteByte@loop,f,c
 10359  002E24  0E07               	movlw	7
 10360  002E26  6413               	cpfsgt	onewireWriteByte@loop,c
 10361  002E28  D7F1               	goto	l4599
 10362  002E2A  0012               	return	
 10363  002E2C                     __end_of_onewireWriteByte:
 10364                           	opt stack 0
 10365                           tosu	equ	0xFFF
 10366                           tosh	equ	0xFFE
 10367                           tosl	equ	0xFFD
 10368                           pclath	equ	0xFFA
 10369                           tblptru	equ	0xFF8
 10370                           tblptrh	equ	0xFF7
 10371                           tblptrl	equ	0xFF6
 10372                           tablat	equ	0xFF5
 10373                           prodh	equ	0xFF4
 10374                           prodl	equ	0xFF3
 10375                           intcon	equ	0xFF2
 10376                           intcon2	equ	0xFF1
 10377                           postinc0	equ	0xFEE
 10378                           wreg	equ	0xFE8
 10379                           postinc1	equ	0xFE6
 10380                           postdec1	equ	0xFE5
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function _onewireWriteBit *****************
 10390 ;; Defined at:
 10391 ;;		line 4 in file "src/onewire.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  b               2   14[COMRAM] int 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;		None
 10396 ;; Return value:  Size  Location     Type
 10397 ;;		None               void
 10398 ;; Registers used:
 10399 ;;		wreg, status,2, status,0
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10409 ;;Total ram usage:        2 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    1
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_onewireWriteByte
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	text47
 10420  002D5E                     __ptext47:
 10421                           	opt stack 0
 10422  002D5E                     _onewireWriteBit:
 10423                           	opt stack 26
 10424                           
 10425                           ;onewire.c: 5: b = b & 0x01;
 10426                           
 10427                           ;incstack = 0
 10428  002D5E  0E01               	movlw	1
 10429  002D60  140F               	andwf	onewireWriteBit@b,w,c
 10430  002D62  6E0F               	movwf	onewireWriteBit@b,c
 10431  002D64  6A10               	clrf	onewireWriteBit@b+1,c
 10432                           
 10433                           ;onewire.c: 6: if (b) {
 10434  002D66  5010               	movf	onewireWriteBit@b+1,w,c
 10435  002D68  100F               	iorwf	onewireWriteBit@b,w,c
 10436  002D6A  B4D8               	btfsc	status,2,c
 10437  002D6C  D00B               	goto	l394
 10438                           
 10439                           ;onewire.c: 8: TRISAbits.TRISA1 = 0;
 10440  002D6E  9292               	bcf	3986,1,c	;volatile
 10441                           
 10442                           ;onewire.c: 9: PORTAbits.RA1 = 0;
 10443  002D70  9280               	bcf	3968,1,c	;volatile
 10444                           
 10445                           ;onewire.c: 10: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10446  002D72  0E03               	movlw	3
 10447  002D74                     u6457:
 10448  002D74  2EE8               	decfsz	wreg,f,c
 10449  002D76  D7FE               	goto	u6457
 10450  002D78  F000               	nop	
 10451                           
 10452                           ;onewire.c: 11: TRISAbits.TRISA1 = 1;
 10453  002D7A  8292               	bsf	3986,1,c	;volatile
 10454                           
 10455                           ;onewire.c: 12: _delay((unsigned long)((60)*(8000000/4000000.0)));
 10456  002D7C  0E28               	movlw	40
 10457  002D7E                     u6467:
 10458  002D7E  2EE8               	decfsz	wreg,f,c
 10459  002D80  D7FE               	goto	u6467
 10460                           
 10461                           ;onewire.c: 13: } else {
 10462  002D82  0012               	return	
 10463  002D84                     l394:
 10464                           
 10465                           ;onewire.c: 15: TRISAbits.TRISA1 = 0;
 10466  002D84  9292               	bcf	3986,1,c	;volatile
 10467                           
 10468                           ;onewire.c: 16: PORTAbits.RA1 = 0;
 10469  002D86  9280               	bcf	3968,1,c	;volatile
 10470                           
 10471                           ;onewire.c: 17: _delay((unsigned long)((70)*(8000000/4000000.0)));
 10472  002D88  0E2E               	movlw	46
 10473  002D8A                     u6477:
 10474  002D8A  2EE8               	decfsz	wreg,f,c
 10475  002D8C  D7FE               	goto	u6477
 10476  002D8E  D000               	nop2		;nop
 10477                           
 10478                           ;onewire.c: 18: TRISAbits.TRISA1 = 1;
 10479  002D90  8292               	bsf	3986,1,c	;volatile
 10480                           
 10481                           ;onewire.c: 19: _delay((unsigned long)((2)*(8000000/4000000.0)));
 10482  002D92  D000               	nop2		;2 cycle nop
 10483  002D94  D000               	nop2		;2 cycle nop
 10484  002D96  0012               	return	
 10485  002D98                     __end_of_onewireWriteBit:
 10486                           	opt stack 0
 10487                           tosu	equ	0xFFF
 10488                           tosh	equ	0xFFE
 10489                           tosl	equ	0xFFD
 10490                           pclath	equ	0xFFA
 10491                           tblptru	equ	0xFF8
 10492                           tblptrh	equ	0xFF7
 10493                           tblptrl	equ	0xFF6
 10494                           tablat	equ	0xFF5
 10495                           prodh	equ	0xFF4
 10496                           prodl	equ	0xFF3
 10497                           intcon	equ	0xFF2
 10498                           intcon2	equ	0xFF1
 10499                           postinc0	equ	0xFEE
 10500                           wreg	equ	0xFE8
 10501                           postinc1	equ	0xFE6
 10502                           postdec1	equ	0xFE5
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _onewireReadBit *****************
 10512 ;; Defined at:
 10513 ;;		line 23 in file "src/onewire.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  result          1   14[COMRAM] unsigned char 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      unsigned char 
 10520 ;; Registers used:
 10521 ;;		wreg, status,2
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10531 ;;Total ram usage:        1 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    1
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_broadcastConvert
 10538 ;;		_onewireReadByte
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           	psect	text48
 10543  002EC4                     __ptext48:
 10544                           	opt stack 0
 10545  002EC4                     _onewireReadBit:
 10546                           	opt stack 26
 10547                           
 10548                           ;onewire.c: 24: unsigned char result;
 10549                           ;onewire.c: 26: TRISAbits.TRISA1 = 0;
 10550                           
 10551                           ;incstack = 0
 10552  002EC4  9292               	bcf	3986,1,c	;volatile
 10553                           
 10554                           ;onewire.c: 27: PORTAbits.RA1 = 0;
 10555  002EC6  9280               	bcf	3968,1,c	;volatile
 10556                           
 10557                           ;onewire.c: 28: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10558  002EC8  D000               	nop2		;2 cycle nop
 10559                           
 10560                           ;onewire.c: 29: TRISAbits.TRISA1 = 1;
 10561  002ECA  8292               	bsf	3986,1,c	;volatile
 10562                           
 10563                           ;onewire.c: 30: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10564  002ECC  0E03               	movlw	3
 10565  002ECE                     u6487:
 10566  002ECE  2EE8               	decfsz	wreg,f,c
 10567  002ED0  D7FE               	goto	u6487
 10568  002ED2  F000               	nop	
 10569                           
 10570                           ;onewire.c: 31: result = PORTAbits.RA1;
 10571  002ED4  0E00               	movlw	0
 10572  002ED6  B280               	btfsc	3968,1,c	;volatile
 10573  002ED8  0E01               	movlw	1
 10574  002EDA  6E0F               	movwf	onewireReadBit@result,c
 10575                           
 10576                           ;onewire.c: 32: _delay((unsigned long)((55)*(8000000/4000000.0)));
 10577  002EDC  0E24               	movlw	36
 10578  002EDE                     u6497:
 10579  002EDE  2EE8               	decfsz	wreg,f,c
 10580  002EE0  D7FE               	goto	u6497
 10581  002EE2  D000               	nop2		;nop
 10582                           
 10583                           ;onewire.c: 33: return result;
 10584  002EE4  500F               	movf	onewireReadBit@result,w,c
 10585  002EE6  0012               	return	
 10586  002EE8                     __end_of_onewireReadBit:
 10587                           	opt stack 0
 10588                           tosu	equ	0xFFF
 10589                           tosh	equ	0xFFE
 10590                           tosl	equ	0xFFD
 10591                           pclath	equ	0xFFA
 10592                           tblptru	equ	0xFF8
 10593                           tblptrh	equ	0xFF7
 10594                           tblptrl	equ	0xFF6
 10595                           tablat	equ	0xFF5
 10596                           prodh	equ	0xFF4
 10597                           prodl	equ	0xFF3
 10598                           intcon	equ	0xFF2
 10599                           intcon2	equ	0xFF1
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           postinc1	equ	0xFE6
 10603                           postdec1	equ	0xFE5
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           postdec2	equ	0xFDD
 10608                           fsr2h	equ	0xFDA
 10609                           fsr2l	equ	0xFD9
 10610                           status	equ	0xFD8
 10611                           
 10612 ;; *************** function _onewireInit *****************
 10613 ;; Defined at:
 10614 ;;		line 37 in file "src/onewire.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;		None
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  1    wreg      unsigned char 
 10621 ;; Registers used:
 10622 ;;		wreg
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10632 ;;Total ram usage:        0 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    1
 10635 ;; This function calls:
 10636 ;;		Nothing
 10637 ;; This function is called by:
 10638 ;;		_broadcastConvert
 10639 ;;		_getTemperature
 10640 ;;		_getTemperatureInt
 10641 ;;		_printSingleAddress
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text49
 10646  002EE8                     __ptext49:
 10647                           	opt stack 0
 10648  002EE8                     _onewireInit:
 10649                           	opt stack 27
 10650                           
 10651                           ;onewire.c: 38: TRISAbits.TRISA1 = 0;
 10652                           
 10653                           ;incstack = 0
 10654  002EE8  9292               	bcf	3986,1,c	;volatile
 10655                           
 10656                           ;onewire.c: 39: PORTAbits.RA1 = 0;
 10657  002EEA  9280               	bcf	3968,1,c	;volatile
 10658                           
 10659                           ;onewire.c: 40: _delay((unsigned long)((480)*(8000000/4000000.0)));
 10660  002EEC  0EF0               	movlw	240
 10661  002EEE                     u6507:
 10662  002EEE  F000               	nop	
 10663  002EF0  2EE8               	decfsz	wreg,f,c
 10664  002EF2  D7FD               	goto	u6507
 10665                           
 10666                           ;onewire.c: 41: TRISAbits.TRISA1 = 1;
 10667  002EF4  8292               	bsf	3986,1,c	;volatile
 10668                           
 10669                           ;onewire.c: 42: _delay((unsigned long)((60)*(8000000/4000000.0)));
 10670  002EF6  0E28               	movlw	40
 10671  002EF8                     u6517:
 10672  002EF8  2EE8               	decfsz	wreg,f,c
 10673  002EFA  D7FE               	goto	u6517
 10674                           
 10675                           ;onewire.c: 43: if (PORTAbits.RA1 == 0) {
 10676  002EFC  B280               	btfsc	3968,1,c	;volatile
 10677  002EFE  0012               	return	
 10678                           
 10679                           ;onewire.c: 44: _delay((unsigned long)((100)*(8000000/4000000.0)));
 10680  002F00  0E42               	movlw	66
 10681  002F02                     u6527:
 10682  002F02  2EE8               	decfsz	wreg,f,c
 10683  002F04  D7FE               	goto	u6527
 10684  002F06  D000               	nop2		;nop
 10685  002F08  0012               	return	
 10686  002F0A                     __end_of_onewireInit:
 10687                           	opt stack 0
 10688                           tosu	equ	0xFFF
 10689                           tosh	equ	0xFFE
 10690                           tosl	equ	0xFFD
 10691                           pclath	equ	0xFFA
 10692                           tblptru	equ	0xFF8
 10693                           tblptrh	equ	0xFF7
 10694                           tblptrl	equ	0xFF6
 10695                           tablat	equ	0xFF5
 10696                           prodh	equ	0xFF4
 10697                           prodl	equ	0xFF3
 10698                           intcon	equ	0xFF2
 10699                           intcon2	equ	0xFF1
 10700                           postinc0	equ	0xFEE
 10701                           wreg	equ	0xFE8
 10702                           postinc1	equ	0xFE6
 10703                           postdec1	equ	0xFE5
 10704                           fsr1l	equ	0xFE1
 10705                           indf2	equ	0xFDF
 10706                           postinc2	equ	0xFDE
 10707                           postdec2	equ	0xFDD
 10708                           fsr2h	equ	0xFDA
 10709                           fsr2l	equ	0xFD9
 10710                           status	equ	0xFD8
 10711                           
 10712 ;; *************** function __UART2Send *****************
 10713 ;; Defined at:
 10714 ;;		line 35 in file "src/EUSART.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;  message         2   14[COMRAM] PTR unsigned char 
 10717 ;;		 -> message(80), 
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;  i               2   16[COMRAM] unsigned int 
 10720 ;; Return value:  Size  Location     Type
 10721 ;;		None               void
 10722 ;; Registers used:
 10723 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10729 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10732 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10733 ;;Total ram usage:        4 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    1
 10736 ;; This function calls:
 10737 ;;		Nothing
 10738 ;; This function is called by:
 10739 ;;		_setup
 10740 ;;		_loop
 10741 ;; This function uses a non-reentrant model
 10742 ;;
 10743                           
 10744                           	psect	text50
 10745  002CE2                     __ptext50:
 10746                           	opt stack 0
 10747  002CE2                     __UART2Send:
 10748                           	opt stack 28
 10749                           
 10750                           ;EUSART.c: 36: for (uint16_t i = 0; *(message + i) != '\0'; i++) {
 10751                           
 10752                           ;incstack = 0
 10753  002CE2  0E00               	movlw	0
 10754  002CE4  6E12               	movwf	__UART2Send@i+1,c
 10755  002CE6  0E00               	movlw	0
 10756  002CE8  6E11               	movwf	__UART2Send@i,c
 10757  002CEA  D00C               	goto	l3967
 10758  002CEC                     l296:
 10759  002CEC  A2BA               	btfss	4026,1,c	;volatile
 10760  002CEE  D7FE               	goto	l296
 10761                           
 10762                           ;EUSART.c: 38: TXREG2 = *(message + i);
 10763  002CF0  5011               	movf	__UART2Send@i,w,c
 10764  002CF2  240F               	addwf	__UART2Send@message,w,c
 10765  002CF4  6ED9               	movwf	fsr2l,c
 10766  002CF6  5012               	movf	__UART2Send@i+1,w,c
 10767  002CF8  2010               	addwfc	__UART2Send@message+1,w,c
 10768  002CFA  6EDA               	movwf	fsr2h,c
 10769  002CFC  50DF               	movf	indf2,w,c
 10770  002CFE  6E79               	movwf	3961,c	;volatile
 10771  002D00  4A11               	infsnz	__UART2Send@i,f,c
 10772  002D02  2A12               	incf	__UART2Send@i+1,f,c
 10773  002D04                     l3967:
 10774  002D04  5011               	movf	__UART2Send@i,w,c
 10775  002D06  240F               	addwf	__UART2Send@message,w,c
 10776  002D08  6ED9               	movwf	fsr2l,c
 10777  002D0A  5012               	movf	__UART2Send@i+1,w,c
 10778  002D0C  2010               	addwfc	__UART2Send@message+1,w,c
 10779  002D0E  6EDA               	movwf	fsr2h,c
 10780  002D10  50DF               	movf	indf2,w,c
 10781  002D12  A4D8               	btfss	status,2,c
 10782  002D14  D7EB               	goto	l296
 10783  002D16                     l300:
 10784  002D16  A2BA               	btfss	4026,1,c	;volatile
 10785  002D18  D7FE               	goto	l300
 10786                           
 10787                           ;EUSART.c: 43: TXREG2 = 0x00;
 10788  002D1A  0E00               	movlw	0
 10789  002D1C  6E79               	movwf	3961,c	;volatile
 10790  002D1E  0012               	return	
 10791  002D20                     __end_of__UART2Send:
 10792                           	opt stack 0
 10793                           tosu	equ	0xFFF
 10794                           tosh	equ	0xFFE
 10795                           tosl	equ	0xFFD
 10796                           pclath	equ	0xFFA
 10797                           tblptru	equ	0xFF8
 10798                           tblptrh	equ	0xFF7
 10799                           tblptrl	equ	0xFF6
 10800                           tablat	equ	0xFF5
 10801                           prodh	equ	0xFF4
 10802                           prodl	equ	0xFF3
 10803                           intcon	equ	0xFF2
 10804                           intcon2	equ	0xFF1
 10805                           postinc0	equ	0xFEE
 10806                           wreg	equ	0xFE8
 10807                           postinc1	equ	0xFE6
 10808                           postdec1	equ	0xFE5
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function __UART1Send *****************
 10818 ;; Defined at:
 10819 ;;		line 7 in file "src/EUSART.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  message         2   14[COMRAM] PTR unsigned char 
 10822 ;;		 -> message(80), 
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;  i               2   16[COMRAM] unsigned int 
 10825 ;; Return value:  Size  Location     Type
 10826 ;;		None               void
 10827 ;; Registers used:
 10828 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10837 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10838 ;;Total ram usage:        4 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    1
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_loop
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           	psect	text51
 10849  002D20                     __ptext51:
 10850                           	opt stack 0
 10851  002D20                     __UART1Send:
 10852                           	opt stack 28
 10853                           
 10854                           ;EUSART.c: 8: for (uint16_t i = 0; *(message + i) != '\0'; i++) {
 10855                           
 10856                           ;incstack = 0
 10857  002D20  0E00               	movlw	0
 10858  002D22  6E12               	movwf	__UART1Send@i+1,c
 10859  002D24  0E00               	movlw	0
 10860  002D26  6E11               	movwf	__UART1Send@i,c
 10861  002D28  D00C               	goto	l4081
 10862  002D2A                     l278:
 10863  002D2A  A2AC               	btfss	4012,1,c	;volatile
 10864  002D2C  D7FE               	goto	l278
 10865                           
 10866                           ;EUSART.c: 10: TXREG1 = *(message + i);
 10867  002D2E  5011               	movf	__UART1Send@i,w,c
 10868  002D30  240F               	addwf	__UART1Send@message,w,c
 10869  002D32  6ED9               	movwf	fsr2l,c
 10870  002D34  5012               	movf	__UART1Send@i+1,w,c
 10871  002D36  2010               	addwfc	__UART1Send@message+1,w,c
 10872  002D38  6EDA               	movwf	fsr2h,c
 10873  002D3A  50DF               	movf	indf2,w,c
 10874  002D3C  6EAD               	movwf	4013,c	;volatile
 10875  002D3E  4A11               	infsnz	__UART1Send@i,f,c
 10876  002D40  2A12               	incf	__UART1Send@i+1,f,c
 10877  002D42                     l4081:
 10878  002D42  5011               	movf	__UART1Send@i,w,c
 10879  002D44  240F               	addwf	__UART1Send@message,w,c
 10880  002D46  6ED9               	movwf	fsr2l,c
 10881  002D48  5012               	movf	__UART1Send@i+1,w,c
 10882  002D4A  2010               	addwfc	__UART1Send@message+1,w,c
 10883  002D4C  6EDA               	movwf	fsr2h,c
 10884  002D4E  50DF               	movf	indf2,w,c
 10885  002D50  A4D8               	btfss	status,2,c
 10886  002D52  D7EB               	goto	l278
 10887  002D54                     l282:
 10888  002D54  A2AC               	btfss	4012,1,c	;volatile
 10889  002D56  D7FE               	goto	l282
 10890                           
 10891                           ;EUSART.c: 15: TXREG1 = 0x00;
 10892  002D58  0E00               	movlw	0
 10893  002D5A  6EAD               	movwf	4013,c	;volatile
 10894  002D5C  0012               	return	
 10895  002D5E                     __end_of__UART1Send:
 10896                           	opt stack 0
 10897                           tosu	equ	0xFFF
 10898                           tosh	equ	0xFFE
 10899                           tosl	equ	0xFFD
 10900                           pclath	equ	0xFFA
 10901                           tblptru	equ	0xFF8
 10902                           tblptrh	equ	0xFF7
 10903                           tblptrl	equ	0xFF6
 10904                           tablat	equ	0xFF5
 10905                           prodh	equ	0xFF4
 10906                           prodl	equ	0xFF3
 10907                           intcon	equ	0xFF2
 10908                           intcon2	equ	0xFF1
 10909                           postinc0	equ	0xFEE
 10910                           wreg	equ	0xFE8
 10911                           postinc1	equ	0xFE6
 10912                           postdec1	equ	0xFE5
 10913                           fsr1l	equ	0xFE1
 10914                           indf2	equ	0xFDF
 10915                           postinc2	equ	0xFDE
 10916                           postdec2	equ	0xFDD
 10917                           fsr2h	equ	0xFDA
 10918                           fsr2l	equ	0xFD9
 10919                           status	equ	0xFD8
 10920                           
 10921 ;; *************** function _isr *****************
 10922 ;; Defined at:
 10923 ;;		line 19 in file "src/main.c"
 10924 ;; Parameters:    Size  Location     Type
 10925 ;;		None
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;		None
 10928 ;; Return value:  Size  Location     Type
 10929 ;;		None               void
 10930 ;; Registers used:
 10931 ;;		wreg, status,2, status,0
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10939 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10940 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10941 ;;Total ram usage:       14 bytes
 10942 ;; Hardware stack levels used:    1
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		Interrupt level 2
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	intcode
 10951  000008                     __pintcode:
 10952                           	opt stack 0
 10953  000008                     _isr:
 10954                           	opt stack 24
 10955                           
 10956                           ;incstack = 0
 10957  000008  CFFA F001          	movff	pclath,??_isr
 10958  00000C  CFFB F002          	movff	pclatu,??_isr+1
 10959  000010  CFE9 F003          	movff	fsr0l,??_isr+2
 10960  000014  CFEA F004          	movff	fsr0h,??_isr+3
 10961  000018  CFE1 F005          	movff	fsr1l,??_isr+4
 10962  00001C  CFE2 F006          	movff	fsr1h,??_isr+5
 10963  000020  CFD9 F007          	movff	fsr2l,??_isr+6
 10964  000024  CFDA F008          	movff	fsr2h,??_isr+7
 10965  000028  CFF3 F009          	movff	prodl,??_isr+8
 10966  00002C  CFF4 F00A          	movff	prodh,??_isr+9
 10967  000030  CFF6 F00B          	movff	tblptrl,??_isr+10
 10968  000034  CFF7 F00C          	movff	tblptrh,??_isr+11
 10969  000038  CFF8 F00D          	movff	tblptru,??_isr+12
 10970  00003C  CFF5 F00E          	movff	tablat,??_isr+13
 10971                           
 10972                           ;main.c: 20: if (PIR1bits.SSPIF == 1) {
 10973  000040  A69E               	btfss	3998,3,c	;volatile
 10974  000042  D007               	goto	i2l73
 10975                           
 10976                           ;main.c: 21: PIR1bits.SSPIF = 0;
 10977  000044  969E               	bcf	3998,3,c	;volatile
 10978                           
 10979                           ;main.c: 22: if (SSPCON1bits.WCOL || SSPCON1bits.SSPOV) {
 10980  000046  BEC6               	btfsc	4038,7,c	;volatile
 10981  000048  D002               	goto	i2l76
 10982  00004A  ACC6               	btfss	4038,6,c	;volatile
 10983  00004C  D002               	goto	i2l73
 10984  00004E                     i2l76:
 10985                           
 10986                           ;main.c: 23: SSPCON1bits.SSPOV = 0;
 10987  00004E  9CC6               	bcf	4038,6,c	;volatile
 10988                           
 10989                           ;main.c: 24: SSPCON1bits.WCOL = 0;
 10990  000050  9EC6               	bcf	4038,7,c	;volatile
 10991  000052                     i2l73:
 10992                           
 10993                           ;main.c: 25: }
 10994                           ;main.c: 26: }
 10995                           ;main.c: 27: if (PIR2bits.BCLIF == 1) {
 10996  000052  B6A1               	btfsc	4001,3,c	;volatile
 10997                           
 10998                           ;main.c: 28: PIR2bits.BCLIF = 0;
 10999  000054  96A1               	bcf	4001,3,c	;volatile
 11000                           
 11001                           ;main.c: 29: }
 11002                           ;main.c: 30: if (INTCONbits.TMR0IF == 1) {
 11003  000056  A4F2               	btfss	intcon,2,c	;volatile
 11004  000058  D00C               	goto	i2l79
 11005                           
 11006                           ;main.c: 31: INTCONbits.TMR0IF = 0;
 11007  00005A  94F2               	bcf	intcon,2,c	;volatile
 11008                           
 11009                           ;main.c: 32: TMR0H = timer0.b;
 11010  00005C  0100               	movlb	0	; () banked
 11011  00005E  51CB               	movf	(_timer0+1)& (0+255),w,b
 11012  000060  0BFF               	andlw	255
 11013  000062  6ED7               	movwf	4055,c	;volatile
 11014                           
 11015                           ;main.c: 33: TMR0L = timer0.a;
 11016  000064  0100               	movlb	0	; () banked
 11017  000066  51CA               	movf	_timer0& (0+255),w,b
 11018  000068  0BFF               	andlw	255
 11019  00006A  6ED6               	movwf	4054,c	;volatile
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;main.c: 34: start = 1;
 11023  00006C  0E01               	movlw	1
 11024  00006E  0100               	movlb	0	; () banked
 11025  000070  6FD1               	movwf	_start& (0+255),b
 11026  000072                     i2l79:
 11027  000072  C00E  FFF5         	movff	??_isr+13,tablat
 11028  000076  C00D  FFF8         	movff	??_isr+12,tblptru
 11029  00007A  C00C  FFF7         	movff	??_isr+11,tblptrh
 11030  00007E  C00B  FFF6         	movff	??_isr+10,tblptrl
 11031  000082  C00A  FFF4         	movff	??_isr+9,prodh
 11032  000086  C009  FFF3         	movff	??_isr+8,prodl
 11033  00008A  C008  FFDA         	movff	??_isr+7,fsr2h
 11034  00008E  C007  FFD9         	movff	??_isr+6,fsr2l
 11035  000092  C006  FFE2         	movff	??_isr+5,fsr1h
 11036  000096  C005  FFE1         	movff	??_isr+4,fsr1l
 11037  00009A  C004  FFEA         	movff	??_isr+3,fsr0h
 11038  00009E  C003  FFE9         	movff	??_isr+2,fsr0l
 11039  0000A2  C002  FFFB         	movff	??_isr+1,pclatu
 11040  0000A6  C001  FFFA         	movff	??_isr,pclath
 11041  0000AA  0011               	retfie		f
 11042  0000AC                     __end_of_isr:
 11043                           	opt stack 0
 11044                           tosu	equ	0xFFF
 11045                           tosh	equ	0xFFE
 11046                           tosl	equ	0xFFD
 11047                           pclatu	equ	0xFFB
 11048                           pclath	equ	0xFFA
 11049                           tblptru	equ	0xFF8
 11050                           tblptrh	equ	0xFF7
 11051                           tblptrl	equ	0xFF6
 11052                           tablat	equ	0xFF5
 11053                           prodh	equ	0xFF4
 11054                           prodl	equ	0xFF3
 11055                           intcon	equ	0xFF2
 11056                           intcon2	equ	0xFF1
 11057                           postinc0	equ	0xFEE
 11058                           fsr0h	equ	0xFEA
 11059                           fsr0l	equ	0xFE9
 11060                           wreg	equ	0xFE8
 11061                           postinc1	equ	0xFE6
 11062                           postdec1	equ	0xFE5
 11063                           fsr1h	equ	0xFE2
 11064                           fsr1l	equ	0xFE1
 11065                           indf2	equ	0xFDF
 11066                           postinc2	equ	0xFDE
 11067                           postdec2	equ	0xFDD
 11068                           fsr2h	equ	0xFDA
 11069                           fsr2l	equ	0xFD9
 11070                           status	equ	0xFD8
 11071                           tosu	equ	0xFFF
 11072                           tosh	equ	0xFFE
 11073                           tosl	equ	0xFFD
 11074                           pclatu	equ	0xFFB
 11075                           pclath	equ	0xFFA
 11076                           tblptru	equ	0xFF8
 11077                           tblptrh	equ	0xFF7
 11078                           tblptrl	equ	0xFF6
 11079                           tablat	equ	0xFF5
 11080                           prodh	equ	0xFF4
 11081                           prodl	equ	0xFF3
 11082                           intcon	equ	0xFF2
 11083                           intcon2	equ	0xFF1
 11084                           postinc0	equ	0xFEE
 11085                           fsr0h	equ	0xFEA
 11086                           fsr0l	equ	0xFE9
 11087                           wreg	equ	0xFE8
 11088                           postinc1	equ	0xFE6
 11089                           postdec1	equ	0xFE5
 11090                           fsr1h	equ	0xFE2
 11091                           fsr1l	equ	0xFE1
 11092                           indf2	equ	0xFDF
 11093                           postinc2	equ	0xFDE
 11094                           postdec2	equ	0xFDD
 11095                           fsr2h	equ	0xFDA
 11096                           fsr2l	equ	0xFD9
 11097                           status	equ	0xFD8
 11098                           
 11099                           	psect	rparam
 11100  0000                     tosu	equ	0xFFF
 11101                           tosh	equ	0xFFE
 11102                           tosl	equ	0xFFD
 11103                           pclatu	equ	0xFFB
 11104                           pclath	equ	0xFFA
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           intcon2	equ	0xFF1
 11113                           postinc0	equ	0xFEE
 11114                           fsr0h	equ	0xFEA
 11115                           fsr0l	equ	0xFE9
 11116                           wreg	equ	0xFE8
 11117                           postinc1	equ	0xFE6
 11118                           postdec1	equ	0xFE5
 11119                           fsr1h	equ	0xFE2
 11120                           fsr1l	equ	0xFE1
 11121                           indf2	equ	0xFDF
 11122                           postinc2	equ	0xFDE
 11123                           postdec2	equ	0xFDD
 11124                           fsr2h	equ	0xFDA
 11125                           fsr2l	equ	0xFD9
 11126                           status	equ	0xFD8


Data Sizes:
    Strings     156
    Constant    150
    Data        15
    BSS         117
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     72      81
    BANK0           160     82     125
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_3(CODE[37]), STR_2(CODE[67]), STR_1(CODE[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 80
		 -> message(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), message(BANK1[80]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), message(BANK1[80]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 67
		 -> STR_5(CODE[12]), STR_4(CODE[6]), STR_3(CODE[37]), STR_2(CODE[67]), 
		 -> STR_1(CODE[17]), 

    S1904__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    S1904__prbuf$ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), message(BANK1[80]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), message(BANK1[80]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(COMRAM[4]), 

    S1952$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    getADC9@zonnekracht	PTR float  size(2) Largest target is 3
		 -> adc(BANK0[3]), 

    getTemperature@address	PTR unsigned char  size(2) Largest target is 8
		 -> tempAddress(BANK0[8]), 

    timer0init@timer0	PTR struct . size(2) Largest target is 2
		 -> timer0(BANK0[2]), 

    _UART2Send@message	PTR unsigned char  size(2) Largest target is 80
		 -> message(BANK1[80]), 

    _UART1Send@message	PTR unsigned char  size(2) Largest target is 80
		 -> message(BANK1[80]), 

    _I2CReceive@data	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), month(BANK0[1]), day(BANK0[1]), second(BANK0[1]), 
		 -> minute(BANK0[1]), hour(BANK0[1]), 

    bcdtodec@dec	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), day(BANK0[1]), second(BANK0[1]), minute(BANK0[1]), 

    toMonth@year	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), 

    toMonth@month	PTR unsigned char  size(2) Largest target is 1
		 -> month(BANK0[1]), 

    toHour@hour	PTR unsigned char  size(2) Largest target is 1
		 -> hour(BANK0[1]), 

    getDate@year	PTR unsigned char  size(2) Largest target is 1
		 -> year(BANK0[1]), 

    getDate@month	PTR unsigned char  size(2) Largest target is 1
		 -> month(BANK0[1]), 

    getDate@day	PTR unsigned char  size(2) Largest target is 1
		 -> day(BANK0[1]), 

    getTime@hour	PTR unsigned char  size(2) Largest target is 1
		 -> hour(BANK0[1]), 

    getTime@minute	PTR unsigned char  size(2) Largest target is 1
		 -> minute(BANK0[1]), 

    getTime@second	PTR unsigned char  size(2) Largest target is 1
		 -> second(BANK0[1]), 


Critical Paths under _main in COMRAM

    _timer0init->___fttol
    __UART2Init->___lldiv
    __UART1Init->___lldiv
    __I2CInit->___lldiv
    __doprnt->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    _getTime->__I2CAddress
    _getTime->__I2CReceive
    _getTime->_bcdtodec
    _getTime->_toHour
    _getTemperature->___ftmul
    _onewireReadByte->_onewireReadBit
    _getDate->_toMonth
    __I2CStop->__I2CWait
    __I2CStart->__I2CWait
    __I2CRepeatedStart->__I2CWait
    __I2CReceive->__I2CWait
    __I2CAddress->__I2CSend
    __I2CSend->__I2CWait
    _getADC9->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _broadcastConvert->_onewireWriteByte
    _onewireWriteByte->_onewireWriteBit

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _setup->_sprintf
    _timer0init->___fttol
    _loop->_sprintf
    _sprintf->__doprnt
    __doprnt->___fttol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  154250
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0   71162
                           __I2CInit
                         __UART1Init
                         __UART2Init
                         __UART2Send
                            _sprintf
                         _timer0init
 ---------------------------------------------------------------------------------
 (2) _timer0init                                          12     7      5   11309
                                              6 BANK0     12     7      5
                            ___ftadd
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) __UART2Init                                           8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) __UART1Init                                           8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) __I2CInit                                             8     4      4    1144
                                             27 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _loop                                                 0     0      0   83088
                         __UART1Send
                         __UART2Send
                   _broadcastConvert
                            _getADC9
                            _getDate
                     _getTemperature
                            _getTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28     6     22   56203
                                             54 BANK0     28     6     22
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             52    46      6   55286
                                              6 BANK0     48    42      6
                   Absolute function *
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch *
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   11859
                                             56 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   11580
                                             56 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftadd (ARG)
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2335
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1666
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     574
                                             14 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2672
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    1058
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     679
                                             63 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4781
                                             34 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4448
                                             22 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getTime                                              6     0      6    2536
                                             18 COMRAM     6     0      6
                        __I2CAddress
                        __I2CReceive
                  __I2CRepeatedStart
                           __I2CSend
                          __I2CStart
                           __I2CStop
                           _bcdtodec
                             _toHour
 ---------------------------------------------------------------------------------
 (3) _toHour                                               4     2      2     263
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getTemperature                                      18    15      3    9324
                                             56 COMRAM     5     2      3
                                              0 BANK0     13    13      0
                           ___awtoft
                            ___ftmul
                        _onewireInit
                    _onewireReadByte
                   _onewireWriteByte
 ---------------------------------------------------------------------------------
 (3) _onewireReadByte                                      2     2      0     142
                                             15 COMRAM     2     2      0
                     _onewireReadBit
 ---------------------------------------------------------------------------------
 (2) _getDate                                              6     0      6    2556
                                             20 COMRAM     6     0      6
                        __I2CAddress
                        __I2CReceive
                  __I2CRepeatedStart
                           __I2CSend
                          __I2CStart
                           __I2CStop
                           _bcdtodec
                            _toMonth
 ---------------------------------------------------------------------------------
 (3) _toMonth                                              6     2      4     261
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _bcdtodec                                             4     2      2     345
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) __I2CStop                                             0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CStart                                            0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CRepeatedStart                                    0     0      0       0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CReceive                                          3     0      3     940
                                             15 COMRAM     3     0      3
                           __I2CWait
 ---------------------------------------------------------------------------------
 (3) __I2CAddress                                          2     1      1     642
                                             16 COMRAM     2     1      1
                           __I2CSend
 ---------------------------------------------------------------------------------
 (3) __I2CSend                                             1     1      0      22
                                             15 COMRAM     1     1      0
                           __I2CWait
 ---------------------------------------------------------------------------------
 (4) __I2CWait                                             1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getADC9                                              6     4      2   11819
                                             56 COMRAM     6     4      2
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5713
                                             41 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3181
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2780
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2493
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _broadcastConvert                                     0     0      0     278
                        _onewireInit
                     _onewireReadBit
                   _onewireWriteByte
 ---------------------------------------------------------------------------------
 (3) _onewireWriteByte                                     3     3      0     244
                                             16 COMRAM     3     3      0
                    _onewireWriteBit
 ---------------------------------------------------------------------------------
 (4) _onewireWriteBit                                      2     0      2     142
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _onewireReadBit                                       1     1      0      34
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _onewireInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __UART2Send                                           4     2      2     218
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) __UART1Send                                           4     2      2     154
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     __UART1Send
     __UART2Send
     _broadcastConvert
       _onewireInit
       _onewireReadBit
       _onewireWriteByte
         _onewireWriteBit
     _getADC9
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _getDate
       __I2CAddress
         __I2CSend
           __I2CWait
       __I2CReceive
         __I2CWait
       __I2CRepeatedStart
         __I2CWait
       __I2CSend
         __I2CWait
       __I2CStart
         __I2CWait
       __I2CStop
         __I2CWait
       _bcdtodec
       _toMonth
     _getTemperature
       ___awtoft
         ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _onewireInit
       _onewireReadByte
         _onewireReadBit
       _onewireWriteByte
         _onewireWriteBit
     _getTime
       __I2CAddress
         __I2CSend
           __I2CWait
       __I2CReceive
         __I2CWait
       __I2CRepeatedStart
         __I2CWait
       __I2CSend
         __I2CWait
       __I2CStart
         __I2CWait
       __I2CStop
         __I2CWait
       _bcdtodec
       _toHour
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _setup
     __I2CInit
       ___lldiv
     __UART1Init
       ___lldiv
     __UART2Init
       ___lldiv
     __UART2Send
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___awdiv *
           ___awmod (ARG)
         ___ftadd *
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge *
         ___ftmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg *
         ___ftsub *
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol *
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         ___lltoft *
           ___ftpack
         ___wmul *
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ *
         __tdiv_to_l_ *
         _fround *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit *
         _putch *
         _scale *
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _timer0init
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___fttol
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      50       8       31.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      7D       5       78.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     48      51       1       85.3%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11E       6        0.0%
DATA                 0      0     11E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Jun 07 11:19:30 2018

               _SSPSTATbits 000FC7                ___awdiv@sign 001A         ___wmul@multiplicand 001F  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                ___ftadd@exp1 0022  
              ___ftadd@exp2 0021          __UART2Send@message 000F            ??_getTemperature 003C  
              ___ftadd@sign 0020                         l200 2F6C                         l300 2D16  
                       l222 2F96                         l214 2F84                         l206 2F72  
                       l223 2F9E                         l215 2F8C                         l207 2F7A  
                       l182 2FA8                         l191 2DF8                         l282 2D54  
                       l188 2DF4                         l197 2F68                         l278 2D2A  
                       l438 275C                         l550 0A92                         l296 2CEC  
                       l394 2D84                         l903 1E6A                         l499 0D4E  
                       l972 1A0C                         l976 1A38                         l987 1AE4  
                       l996 1B00                __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000  
                       _adc 00C7                         _day 00DA                         _dow 0051  
                       _isr 0008                ___awmod@sign 0014                         prod 000FF3  
                       tosl 000FFD                         wreg 000FE8                  _TXSTA1bits 000FAC  
                _TXSTA2bits 000FBA                ___ftdiv@cntr 0024                ___ftdiv@sign 0029  
                      l1100 28C6                        l1021 20D2                        l1110 2A0E  
                      l1014 2040                        l1007 2284                        l1015 2068  
                      l1046 2E92                        l3003 2584                        l3031 2696  
                      l3023 2676                        l3015 264C                        l3201 1D50  
                      l3025 267E                        l3027 2682                        l3035 26A0  
                      l3019 2668                        l3221 1DCE                        l3207 1D8C  
                      l3039 26AE                        l3153 2006                        l3137 2F22  
                      l3251 1E66                        l3243 1E42                        l3147 1FDC  
                      l4301 24C6                        l3333 2878                        l3229 1DFE  
                      l3181 209A                        l5015 2220                        l3415 2BE6  
                      l3263 26E8                        l3335 2884                        l3239 1E32  
                      l3191 20C2                        l4081 2D42                        l5009 21FA  
                      l5113 22DA                        l3273 2744                        l3345 28B8  
                      l3337 2888                        l3361 2A00                        l3353 29CC  
                      l3249 1E5A                        l3193 20CE                        l3185 20AA  
                      l5035 225E                        l4411 2162                        l3267 2718  
                      l4323 1A1A                        l3355 29D8                        l4421 218A  
                      l3357 29DC                        l4415 2172                        l5127 230C  
                      l4351 1A98                        l4511 1750                        l5057 2C7E  
                      l4425 219A                        l4353 1AA2                        l4345 1A76  
                      l4329 1A46                        l4505 16A0                        l4291 246A  
                      l4371 1B1C                        l4363 1AD4                        l4355 1AAA  
                      l4531 1EAA                        l4293 2488                        l4285 2452  
                      l4613 2EAA                        l4381 1B4C                        l4365 1ADE  
                      l4357 1AB2                        l4701 0418                        l4391 210A  
                      l5183 2F54                        l5097 2F3A                        l4297 249E  
                      l4289 2460                        l4561 1F74                        l4553 1F42  
                      l4473 1986                        l4465 18BA                        l4801 08C6  
                      l4721 0512                        l4705 043E                        l4633 0108  
                      l4299 24BC                        l4563 1F7A                        l2971 250E  
                      l4643 015C                        l4627 00B4                        l5179 2F4A  
                      l4397 2130                        l4549 1F26                        l4573 2B4E  
                      l4493 1550                        l4821 0A30                        l4813 09AE  
                      l4805 08E2                        l4733 0584                        l4717 04EC  
                      l4709 0484                        l4637 0138                        l4567 1FA0  
                      l4559 1F5C                        l4575 2B5A                        l2983 2544  
                      l4487 14A0                        l4815 09DC                        l4751 0638  
                      l4663 021E                        l4639 0152                        l2985 254C  
                      l2977 252E                        l4497 1574                        l4841 0AF8  
                      l4833 0A96                        l4825 0A5A                        l4817 09EA  
                      l4737 05EC                        l4665 0260                        l4657 0212  
                      l4649 0196                        l2995 256C                        l2987 2550  
                      l4923 0EF4                        l4915 0EB2                        l4827 0A62  
                      l4771 0744                        l4755 0688                        l4659 0218  
                      l4941 0FCC                        l4917 0EC4                        l4861 0CBC  
                      l4845 0B22                        l4781 07BC                        l4693 03B0  
                      l4677 02E8                        l3967 2D04                        l4599 2E0C  
                      l2999 2576                        l4951 1048                        l4927 0F2C  
                      l4871 0D3A                        l4863 0CCA                        l4791 0844  
                      l4783 07D4                        l4775 078A                        l4767 0718  
                      l4759 06AE                        l4937 0FA2                        l4953 1052  
                      l4929 0F38                        l4873 0D42                        l4857 0C40  
                      l4849 0B74                        l4793 084C                        l4971 1142  
                      l4963 10CC                        l4955 105C                        l4947 101E  
                      l4883 0DDC                        l4867 0D10                        l4859 0C6E  
                      l4787 081A                        l4779 07B4                        ?_isr 0001  
                      l4965 10DE                        l4885 0E1A                        l4991 12FC  
                      l4959 10A2                        l4975 116C                        l4977 1180  
                      l4985 12A2                        l4979 1216                        l4987 12B4  
                      l4995 1328                        l4899 0E66                        l4997 133C  
                      l4999 135E                        STR_1 7FDC                        STR_2 7F63  
                      STR_3 7FA6                        STR_4 7FF9                        STR_5 7FED  
                      STR_6 7FCB                        u3031 1FC2                        u3120 1D32  
                      u3051 1FEC                        u3140 1D6E                        u3125 1D28  
                      u3145 1D64                        u5111 211A                        u3520 2BEE  
                      u3530 2CD0                        u3526 2BF0                        u3536 2CD2  
                      u3465 2DF0                        u5241 1E8C                        u3466 2DF2  
                      u3490 2BBE                        u6211 21E4                        u5091 20F4  
                      u5260 1EC8                        u6231 220A                        u3496 2BC0  
                      u6128 108C                        u4480 2ADE                        u5265 1EC0  
                      u6058 0F8C                        u5418 00F0                        u4490 2A7A  
                      u4485 2AD4                        u5470 0338                        u5455 02C2  
                      u4495 2A70                        u6168 112C                        u6088 1008  
                      u6281 22C0                        u6507 2EEE                        u5475 032C  
                      u6188 12E4                        u5708 0804                        u6517 2EF8  
                      u6527 2F02                        i2l73 0052                        u6457 2D74  
                      u4881 19D6                        u5658 0702                        u6467 2D7E  
                      u4891 19EA                        i2l76 004E                        u5748 08B0  
                      u6477 2D8A                        u5925 0DB2                        u5678 0774  
                      i2l79 0072                        u6487 2ECE                        u5848 0AE2  
                      u5768 0994                        u6497 2EDE                        u5868 0C26  
                      u5798 0A1A                        u5898 0CFA                        _main 2F46  
              ___ftpack@arg 000F                        _hour 00CC                        _loop 1B72  
              ___ftpack@exp 0012                        _temp 00C4                        _year 00DC  
                      fsr0h 000FEA                        fsr1h 000FE2                        fsr0l 000FE9  
                      fsr2h 000FDA                        fsr1l 000FE1                        indf2 000FDF  
                      fsr2l 000FD9                        pclat 000FFA                        prodh 000FF4  
                      prodl 000FF3                        start 00AC               __CFG_IESO$OFF 000000  
             __CFG_FOSC$HS1 000000               __CFG_MCLRE$ON 000000                ___ftmul@cntr 0037  
              ___ftmul@sign 0038                ___fttol@exp1 0065                ___fttol@lval 0061  
                     ??_isr 0001                  __UART1Init 2A84                  __UART2Init 2A20  
                __UART1Send 2D20                  __UART2Send 2CE2   __size_of_broadcastConvert 001C  
                     ?_main 0001             __end_of___awdiv 258E                       ?_loop 0001  
           __end_of___ftadd 1B72             __end_of___awmod 26B8             __end_of___ftdiv 22B6  
           __end_of___ftneg 2EA0             __end_of___lldiv 28D8             __end_of___ftmul 21D4  
           ___awdiv@divisor 0017             __end_of___llmod 2A20             __end_of___ftsub 2DCE  
           __end_of___fttol 1FB2            ?_onewireReadByte 0001             ___awdiv@counter 0019  
           __end_of_getADC9 27D2                       _TMR0H 000FD7                       _TMR0L 000FD6  
           __end_of__doprnt 136C               __CFG_WRT0$OFF 000000             __end_of_getDate 2856  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 001F              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
           __end_of_getTime 2954              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000               ___awtoft@sign 001A  
           __end_of_dpowers 7EF5             _timer0init$2563 006F                       _scale 136C  
           __end_of_isdigit 2F2A                       _month 00DB                       _year1 00CF  
             ___ftpack@sign 0013            __end_of__I2CInit 2C5A                       _setup 258E  
          __end_of__I2CSend 2F72                       _putch 2FD8            __end_of__I2CWait 2FBA  
                     _start 00D1            __end_of__I2CStop 2F84             __end_of_toMonth 2CE2  
            __CFG_BOREN$OFF 000000                       pclath 000FFA                       tablat 000FF5  
       onewireReadByte@loop 0011          __size_of__I2CStart 0012                       status 000FD8  
           __end_of_sprintf 29BA            ?_onewireWriteBit 000F             __initialization 2AE8  
              __end_of_main 2F5E                __end_of_loop 1D14        onewireReadBit@result 000F  
                    ??_main 0049               ___fttol@sign1 0060                      ??_loop 0049  
             __activetblptr 000002        __size_of__tdiv_to_l_ 0132              __CFG_RETEN$OFF 000000  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADCON2 000FC0  
        getTemperature@F206 00B2            ___llmod@dividend 001C                      ?_scale 0039  
                    _ADRESH 000FC4                      _ADRESL 000FC3            ___awdiv@dividend 0015  
                    ?_setup 0001            __end_of___awtoft 2CA2                      ?_putch 0001  
          __end_of___ftpack 24EA            __end_of___lltoft 2BA4             __CFG_BBSIZ$BB2K 000000  
            __CFG_WDTEN$OFF 000000                      _RCREG1 000FAE                      _RCREG2 000F7A  
                    _RCSTA1 000FAB                      _RCSTA2 000FA6                      _SPBRG1 000FAF  
                    _SPBRG2 000F7B            __end_of_bcdtodec 2E54                      _SSPADD 000FC8  
                    _SSPBUF 000FC9                      _TXREG1 000FAD                      _TXREG2 000F79  
                    _TXSTA1 000FAC                      _TXSTA2 000FBA                ?_onewireInit 0001  
              __doprnt$2567 0072              __CFG_XINST$OFF 000000                __doprnt$1972 0075  
          __end_of__powers_ 7F43                      ___ftge 26B8                      ___wmul 2E54  
                 ??___awdiv 0019                   ??___ftadd 001D              __CFG_STVREN$ON 000000  
                 ??___awmod 0013                   ??___ftdiv 0021                   ??___ftneg 0012  
                 ??___lldiv 0017                   ??___ftmul 0030                   ??___llmod 0024  
                 ??___ftsub 0029                   ??___fttol 0044                 ?__UART1Init 001C  
               ?__UART2Init 001C                 ?__UART1Send 000F                 ?__UART2Send 000F  
                 ??_getADC9 003B                   ??__doprnt 006C                      _fround 1774  
                    clear_0 2AEE                      clear_1 2AFA                      clear_2 2B06  
          ___awdiv@quotient 001B                      _minute 00CD                      _second 00CE  
                    _toHour 2BA4             ___awmod@divisor 0011                   ??_getDate 001B  
                    _timer0 00CA                __doprnt@_val 008B                __doprnt@flag 0090  
           ___awmod@counter 0013                __doprnt@fval 0092                   ??_getTime 0019  
              __doprnt@prec 0085           __end_of__I2CStart 2F96     __size_of_onewireReadBit 0024  
     ___ftmul@f3_as_product 0034                __pdataCOMRAM 0051                   ??_isdigit 000F  
              __mediumconst 7ECC                   ??_toMonth 0013                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                      putch@c 0001  
              ?__I2CAddress 0011                   ??_sprintf 0049           ?_onewireWriteByte 0001  
                __accesstop 0060     __end_of__initialization 2B3E                  ___ftadd@f1 0017  
                ___ftadd@f2 001A                  ___ftge@ff1 000F                  ___ftge@ff2 0012  
              ?__I2CReceive 0010          ??_onewireWriteByte 0011                  ___ftdiv@f1 001B  
                ___ftdiv@f2 001E                  ___ftdiv@f3 0025                  ___ftneg@f1 000F  
                ___awtoft@c 0017                  ___ftmul@f1 002A                  ___ftmul@f2 002D  
                ___ftsub@f1 0023                  ___ftsub@f2 0026                  ___fttol@f1 0040  
            __pcstackCOMRAM 0001                __pidataBANK0 2FCA                  ___lltoft@c 0017  
             __end_of_scale 1774               __end_of_setup 2628               __end_of_putch 2FDA  
                 ?__I2CInit 001C                   ?__I2CSend 0001                   ?__I2CWait 0001  
          _broadcastConvert 2F2A                   ?__I2CStop 0001                  __div_to_l_ 1D14  
                __doprnt@ap 006A                  __doprnt@pb 0066                  __doprnt@vd 007A  
           __div_to_l_@exp1 001E             __div_to_l_@cntr 001D                     ??_scale 003C  
           __div_to_l_@quot 0019                     ??_setup 0049                     ??_putch 000F  
              __UART1Send@i 0011                  __pbssBANK0 00B2                  __pbssBANK1 0100  
              __UART2Send@i 0011         __size_of__UART1Init 0064         __size_of__UART2Init 0064  
       __size_of__UART1Send 003E             __CFG_PLLCFG$OFF 000000         __size_of__UART2Send 003E  
             __div_to_l_@f1 000F               __div_to_l_@f2 0012                     ?___ftge 000F  
                   ?___wmul 001D           timer0init@seconds 0068                     ?_fround 0039  
                ??__I2CInit 0020                  ??__I2CSend 0010                     ?_toHour 000F  
                ??__I2CWait 000F                   ?___awtoft 0017                   ?___ftpack 000F  
                ??__I2CStop 0010                   ?___lltoft 0017                   ?_bcdtodec 000F  
          __CFG_CANMX$PORTB 000000                  getADC9@adc 003D                     _SSPCON2 000FC5  
                   _SSPSTAT 000FC7                 toMonth@year 0011   getTemperature@temperature 0069  
           __CFG_PWRTEN$OFF 000000           __end_of__npowers_ 7F1C                     __Hparam 0000  
                _scale$2566 003C                     __Lparam 0000        __size_of_onewireInit 0022  
           __size_of___ftge 0090                     ___awdiv 24EA                     ___ftadd 19C6  
                   ___awmod 2628                     ___ftdiv 21D4                     ___ftneg 2E7A  
                   ___lldiv 2856             __size_of___wmul 0026                     ___ftmul 20E4  
                   ___llmod 29BA                     ___ftsub 2D98                     ___fttol 1E7C  
                   _getADC9 2748                     __doprnt 00B0                     __pcinit 2AE8  
                ??___awtoft 001A                  ??___ftpack 0014             __size_of_fround 0252  
                   _getDate 27D2                     __ramtop 0F00             __size_of_toHour 005C  
                ??___lltoft 001B              _onewireReadBit 2EC4                     __ptext0 2F46  
                   __ptext1 258E                     __ptext2 238A                     __ptext3 2A20  
                   _getTime 28D8                     __ptext4 2A84                     __ptext5 2C00  
                   __ptext6 1B72                     __ptext7 2954                     __ptext8 00B0  
                   __ptext9 136C                   _T0CONbits 000FD5           __end_of_hexpowers 7F63  
               ?__div_to_l_ 000F                     _dpowers 7ECD                  ??_bcdtodec 0011  
      onewireWriteByte@data 0012                     _isdigit 2F0A                __size_of_isr 00A4  
                   _message 0100            ___awmod@dividend 000F        onewireWriteByte@loop 0013  
         __CFG_MSSPMSK$MSK7 000000                     _toMonth 2CA2               __doprnt@integ 0082  
                   _sprintf 2954               __doprnt@width 0087        end_of_initialization 2B3E  
  __size_of_onewireReadByte 0024     __size_of_getTemperature 00D4                  getDate@day 0015  
      __size_of__I2CAddress 0010               __Lmediumconst 7ECC                     toHour@h 0012  
           ___lldiv@divisor 0013             ___lldiv@counter 001B       getTemperature@address 0039  
      __size_of__I2CReceive 0030       onewireReadByte@result 0010                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc1 000FE6  
                   postinc2 000FDE                  _timer0init 238A                ??__UART1Init 0020  
              ??__UART2Init 0020                ??__UART1Send 0011                ??__UART2Send 0011  
            __tdiv_to_l_@f1 000F              __tdiv_to_l_@f2 0012      __end_of_onewireReadBit 2EE8  
  __size_of_onewireWriteBit 003A               ??__tdiv_to_l_ 0015       getTemperatureInt@F211 00BB  
                 _PORTAbits 000F80                   _TRISAbits 000F92                   _TRISBbits 000F93  
                 _TRISCbits 000F94                   __I2CStart 2F84          getADC9@zonnekracht 0039  
         __I2CRepeatedStart 2F96          ?__I2CRepeatedStart 0001    __end_of_broadcastConvert 2F46  
        __end_of__UART1Init 2AE8          __end_of__UART2Init 2A84          __end_of__UART1Send 2D5E  
        __end_of__UART2Send 2D20                 ___ftdiv@exp 0028         __size_of__div_to_l_ 0168  
       ??__I2CRepeatedStart 0010                 ___ftmul@exp 0033              __end_of___ftge 2748  
           ?_onewireReadBit 0001              __end_of___wmul 2E7A   __size_of_onewireWriteByte 002E  
             __pidataCOMRAM 2FDA              __end_of_fround 19C6              __end_of_toHour 2C00  
         __size_of__I2CInit 005A           __size_of__I2CSend 0014           __size_of__I2CWait 0012  
         __size_of__I2CStop 0012         start_initialization 2AE8   __end_of__I2CRepeatedStart 2FA8  
                ?__I2CStart 0001         __end_of__tdiv_to_l_ 20E4                 __end_of_isr 00AC  
           ___llmod@divisor 0020             ___llmod@counter 0024           ??_onewireReadByte 0010  
                  ??___ftge 0015                 ?_timer0init 0066                    ??___wmul 0021  
               __doprnt@idx 0079                 __doprnt@exp 0089                 __pdataBANK0 00CF  
                  ??_fround 003C                    ??_toHour 0011                  fround@prec 0042  
         __size_of___awtoft 0048           __size_of___ftpack 00A8           __size_of___lltoft 005C  
         ??_onewireWriteBit 0011                 __pbssCOMRAM 0049               __pcstackBANK0 0060  
         __size_of_bcdtodec 0028         __end_of__stringdata 7FFF                _isdigit$2257 0010  
            _getTemperature 22B6             getTemperature@i 006C            onewireWriteBit@b 000F  
                 __doprnt@c 0095                   __doprnt@f 0068            __I2CReceive@data 0010  
                 __pintcode 0008               __pmediumconst 7ECC                  toHour@hour 000F  
          timer0init@timer0 0066                    ?___awdiv 0015                    ?___ftadd 0017  
                  ?___awmod 000F                    ?___ftdiv 001B                    ?___ftneg 000F  
                  ?___lldiv 000F                    ?___ftmul 002A                    ?___llmod 001C  
                  ?___ftsub 0023                   __npowers_ 7EF5                    ?___fttol 0040  
                  ?_getADC9 0039                    ?__doprnt 0066                    ?_getDate 0015  
               __tdiv_to_l_ 1FB2                    ?_getTime 0013                ??__div_to_l_ 0015  
                  _BAUDCON1 000FA7                    _BAUDCON2 000FB9                    ?_isdigit 0001  
__size_of__I2CRepeatedStart 0012                    ?_toMonth 000F                 ??__I2CStart 0010  
    __end_of_getTemperature 238A                   _hexpowers 7F43                    ?_sprintf 0096  
            __size_of_scale 0408              __size_of_setup 009A         __size_of_timer0init 00B8  
            __size_of_putch 0002              ___wmul@product 0021               ??_onewireInit 000F  
                  _IPR1bits 000F9F                    _PIE1bits 000F9D                    _PIE2bits 000FA0  
                  _PIE3bits 000FA3                    _PIR1bits 000F9E          __end_of__div_to_l_ 1E7C  
                  _PIR2bits 000FA1                    _PIR3bits 000FA4                    _RCONbits 000FD0  
           __doprnt@vd_1974 007E            _onewireWriteByte 2DFE                    __I2CInit 2C00  
                  __I2CSend 2F5E                    __I2CWait 2FA8                    __I2CStop 2F72  
                _ADCON0bits 000FC2                 __stringdata 7F63           ___wmul@multiplier 001D  
          __CFG_SOSCSEL$DIG 000000                toMonth@month 000F             ?_getTemperature 0039  
             ??__I2CAddress 0012                 bcdtodec@bcd 0012                 bcdtodec@dec 000F  
               _INTCON2bits 000FF1                   copy_data0 2B20               ??__I2CReceive 0013  
         ?_broadcastConvert 0001                getDate@month 0017          ??_broadcastConvert 0014  
                _ANCON0bits 000F5D                    __Hrparam 0000            ??_onewireReadBit 000F  
                  __Lrparam 0000         __end_of_onewireInit 2F0A            __size_of___awdiv 00A4  
          __size_of___ftadd 01AC            __size_of___awmod 0090            __size_of___ftdiv 00E2  
          __size_of___ftneg 0026            __size_of___lldiv 0082            __size_of___ftmul 00F0  
          __size_of___llmod 0066            __size_of___ftsub 0036            __size_of___fttol 0136  
                  ___awtoft 2C5A                    ___ftpack 2442            __size_of_getADC9 008A  
          __size_of__doprnt 12BC                 _fround$2564 003F                 _fround$2565 003C  
                  ___lltoft 2B48            __size_of_getDate 0084            __size_of_getTime 007C  
                  _bcdtodec 2E2C             __I2CReceive@ack 0012      __I2CAddress@readnwrite 0011  
          __size_of_isdigit 0020            __size_of_toMonth 0040                    __ptext10 2FD8  
                  __ptext11 2F0A                    __ptext20 2856                    __ptext12 1774  
                  __ptext21 1E7C                    __ptext13 2E54                    __ptext30 27D2  
                  __ptext22 2D98                    __ptext14 2628                    __ptext31 2CA2  
                  __ptext23 19C6                    __ptext15 24EA                    __ptext40 2748  
                  __ptext32 2E2C                    __ptext24 2E7A                    __ptext16 1FB2  
                  __ptext41 20E4                    __ptext33 2F72                    __ptext25 26B8  
                  __ptext17 1D14                    __ptext50 2CE2                    __ptext42 21D4  
                  __ptext34 2F84                    __ptext26 28D8                    __ptext18 2B48  
                  __ptext51 2D20                    __ptext43 2C5A                    __ptext35 2F96  
                  __ptext27 2BA4                    __ptext19 29BA                    __ptext44 2442  
                  __ptext36 2DCE                    __ptext28 22B6                    __ptext45 2F2A  
                  __ptext37 2FBA                    __ptext29 2EA0                    __ptext46 2DFE  
                  __ptext38 2F5E                    __ptext47 2D5E                    __ptext39 2FA8  
                  __ptext48 2EC4                    __ptext49 2EE8             _onewireReadByte 2EA0  
                  __powers_ 7F1C            __size_of_sprintf 0066               __size_of_main 0018  
             __size_of_loop 01A2         __end_of__I2CAddress 2FCA              __I2CInit@BRate 001C  
              ??_timer0init 006B         __end_of__I2CReceive 2DFE             _onewireWriteBit 2D5E  
  getTemperature@scratchPad 0060               getTime@minute 0015               getTime@second 0017  
       __CFG_INTOSCSEL$HIGH 000000                 getDate@year 0019                  _INTCONbits 000FF2  
                  isdigit@c 0011                    scale@scl 003F                 _tempAddress 00D2  
                  intlevel2 0000                   sprintf@ap 00AC                   sprintf@pb 00AE  
          __tdiv_to_l_@exp1 001D            __tdiv_to_l_@cntr 001C                   sprintf@wh 0096  
        __end_of_timer0init 2442            __tdiv_to_l_@quot 0018            ___lldiv@dividend 000F  
                  toMonth@m 0014                 _onewireInit 2EE8            __UART1Init@BRate 001C  
        __CFG_WDTPS$1048576 000000            __UART2Init@BRate 001C                ?__tdiv_to_l_ 000F  
        __UART1Send@message 000F     __end_of_onewireReadByte 2EC4                    sprintf@f 0098  
          ___lldiv@quotient 0017               __I2CSend@data 0010      printSingleAddress@F214 0049  
       __I2CAddress@address 0012                 _SSPCON1bits 000FC6                 _SSPCON2bits 000FC5  
               getTime@hour 0013                 __I2CAddress 2FBA    __end_of_onewireWriteByte 2E2C  
       __CFG_BORPWR$ZPBORMV 000000     __end_of_onewireWriteBit 2D98                 __I2CReceive 2DCE  
